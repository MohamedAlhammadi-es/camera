#include "CameraSource.h"
#include "IniReader.h"
#include "IniWriter.h"

namespace logtype = boost::log::trivial;


int iDisplayCam1 = 0, iDisplayCam2 = 0, iDisplayCam3 = 0;
int iStkABWriteToPLC = 0, iStkCDWriteToPLC = 0, iStk18WriteToPLC = 0;
//namespace fs = std::experimental::filesystem::v1;
//using namespace boost::filesystem;
CameraSource::CameraSource()
{

}

CameraSource::CameraSource(PlcClient * plcclient1, Logger * logger)
{
	ReadCameraSettings();
	ReadRulerPoints();
	vPlcClient1 = plcclient1;
	vLogger = logger;
}

void CameraSource::ReadCameraSettings()
{
	CIniReader iniReader(".\\CameraAppSettings.ini");

	iDisplayCam1 = iniReader.ReadInteger("DisplayOptions", "DisplayCam1", 0);
	iDisplayCam2 = iniReader.ReadInteger("DisplayOptions", "DisplayCam2", 0);

	//Read Camera-1

	CAM1_SEARCHTOP = iniReader.ReadInteger("Camera1", "SEARCHFROMTOP", 100);
	CAM1_SEARCH_HEIGHT = iniReader.ReadInteger("Camera1", "SEARCHHEIGHT", 100);
	/*CAM1_RFRAME_X = iniReader.ReadInteger("Camera1", "RFRAME_X", 0);
	CAM1_RFRAME_Y = iniReader.ReadInteger("Camera1", "RFRAME_Y", 0);
	CAM1_RFRAME_WIDTH = iniReader.ReadInteger("Camera1", "RFRAME_WIDTH", 0);
	CAM1_RFRAME_HEIGHT = iniReader.ReadInteger("Camera1", "RFRAME_HEIGHT", 0);*/

	CAM1_WARN_LEN_DIFF = iniReader.ReadInteger("Camera1", "WARN_LEN_DIFF", 200);
	CAM1_WARN_LEN_DIFF_POS = iniReader.ReadInteger("Camera1", "WARN_LEN_DIFF_POS", 200);
	CAM1_WARN_LEN_DIFF_NEG = iniReader.ReadInteger("Camera1", "WARN_LEN_DIFF_NEG", 100);
	CAM1_DISPLAY_RULER = iniReader.ReadInteger("Camera1", "DISPLAYRULER", 0);

	CAM1_DISPLAYTOP = iniReader.ReadInteger("Camera1", "DISPLAYFROMTOP", 0);
	CAM1_DISPLAY_HEIGHT = iniReader.ReadInteger("Camera1", "DISPLAYHEIGHT", 0);
	CAM1_SAVE_VIDEO = iniReader.ReadInteger("Camera1", "SAVE_VIDEO", 0);

	//Read Camera-2

	CAM2_SEARCHTOP = iniReader.ReadInteger("Camera2", "SEARCHFROMTOP", 100);
	CAM2_SEARCH_HEIGHT = iniReader.ReadInteger("Camera2", "SEARCHHEIGHT", 100);
	CAM2_WARN_LEN_DIFF = iniReader.ReadInteger("Camera2", "WARN_LEN_DIFF", 200);
	CAM2_WARN_LEN_DIFF_POS = iniReader.ReadInteger("Camera2", "WARN_LEN_DIFF_POS", 200);
	CAM2_WARN_LEN_DIFF_NEG = iniReader.ReadInteger("Camera2", "WARN_LEN_DIFF_NEG", 100);
	CAM2_DISPLAY_RULER = iniReader.ReadInteger("Camera2", "DISPLAYRULER", 0);

	CAM2_DISPLAYTOP = iniReader.ReadInteger("Camera2", "DISPLAYFROMTOP", 0);
	CAM2_DISPLAY_HEIGHT = iniReader.ReadInteger("Camera2", "DISPLAYHEIGHT", 0);

	//plc data
	nUseL2DB = iniReader.ReadInteger("PLC", "USE_L2DB", 0);
	nUsePLC = iniReader.ReadInteger("PLC", "UsePLC", 1);
	nPLCReadOnly = iniReader.ReadInteger("PLC", "PLCREADONLY", 1);
	STKAB_READ_FROM_PLC = iniReader.ReadInteger("PLC", "STKAB_READ_FROM_PLC", 0);
	STKAB_WRITE_TO_PLC = iniReader.ReadInteger("PLC", "STKAB_WRITE_TO_PLC", 0);
	STKCD_READ_FROM_PLC = iniReader.ReadInteger("PLC", "STKCD_READ_FROM_PLC", 0);
	STKCD_WRITE_TO_PLC = iniReader.ReadInteger("PLC", "STKCD_WRITE_TO_PLC", 0);
	STK18_READ_FROM_PLC = iniReader.ReadInteger("PLC", "STK18_READ_FROM_PLC", 0);
	STK18_WRITE_TO_PLC = iniReader.ReadInteger("PLC", "STK18_WRITE_TO_PLC", 1);
	sPlcIpAddress = iniReader.ReadString("PLC", "IPADDRESS", "0");
	nPlcRack = iniReader.ReadInteger("PLC", "RACK", 0);
	nPlcSlot_30 = iniReader.ReadInteger("PLC", "SLOT_30", 0);
	nPlcSlot_18 = iniReader.ReadInteger("PLC", "SLOT_18", 0);
	nDBNumber_read = iniReader.ReadInteger("PLC", "DBNUMBER_READ", 0);
	nDBStart_read = iniReader.ReadInteger("PLC", "DBSTART_READ", 0);
	nDBSize_read_30 = iniReader.ReadInteger("PLC", "DBSIZE_READ_30", 0);
	nDBSize_read_18 = iniReader.ReadInteger("PLC", "DBSIZE_READ_18", 0);

	nDBNumber_write = iniReader.ReadInteger("PLC", "DBNUMBER_WRITE", 0);
	nDBStart_write = iniReader.ReadInteger("PLC", "DBSTART_WRITE", 0);
	nDBSize_write_30 = iniReader.ReadInteger("PLC", "DBSIZE_WRITE_30", 0);
	nDBSize_write_18 = iniReader.ReadInteger("PLC", "DBSIZE_WRITE_18", 0);

	if (nUsePLC == 0)
	{
		STKAB_READ_FROM_PLC = 0;
		STKCD_READ_FROM_PLC = 0;
		STK18_READ_FROM_PLC = 0;

		STKAB_WRITE_TO_PLC = 0;
		STKCD_WRITE_TO_PLC = 0;
		STK18_WRITE_TO_PLC = 0;
	}

	if (nPLCReadOnly == 1)
	{
		STKAB_WRITE_TO_PLC = 0;
		STKCD_WRITE_TO_PLC = 0;
		STK18_WRITE_TO_PLC = 0;
	}

	iStkABWriteToPLC = STKAB_WRITE_TO_PLC;
	iStkCDWriteToPLC = STKCD_WRITE_TO_PLC;
	iStk18WriteToPLC = STK18_WRITE_TO_PLC;
	//Stopper Positions
	Point vTempPoint;
	string sName;

	nStopperCount = iniReader.ReadInteger("STOPPERS_X", "StoppersCount", 0);
	for (int i = 1; i <= nStopperCount; i++)
	{
		sName = "Stopper" + to_string(i);
		char* key = &sName[0u];
		vTempPoint.x = iniReader.ReadInteger("STOPPERS_X", key, 0);
		vTempPoint.y = iniReader.ReadInteger("STOPPERS_Y", key, 0);
		lstStpPoint.push_back(vTempPoint);

		lstStpPixelVal.push_back("0");
		lstStpPrevPixelVal.push_back("0");
	}

	for (int i = 1; i <= 10; i++)
	{
		resultsAB.push_back(0);
		resultsCD.push_back(0);
		results18.push_back(0);
	}

	fillSavedResults(1);
	fillSavedResults(2);
	fillSavedResults(3);
	//vBackGround = imread("C:\\Level-3\\ImageLib\\StackerABCD.jpg");
	//vBackGround = vBackGround(Rect(0, CAM1_SEARCHTOP, vBackGround.cols, CAM1_SEARCH_HEIGHT));

	//cvtColor(vBackGround, vBackGround, cv::COLOR_RGB2GRAY);
	//cv::threshold(vBackGround, vBackGround, 100, 255, CV_THRESH_BINARY);
	//vTestImg = imread("C:\\Level-3\\ImageLib\\StackerABCD1.jpg");
	//vTestImg = vTestImg(Rect(0, CAM1_SEARCHTOP, vTestImg.cols, CAM1_SEARCH_HEIGHT));


	//cvtColor(vTestImg, vTestImg, CV_RGB2GRAY);

}

cuda::GpuMat CameraSource::rotate(cuda::GpuMat src, double angle)
{

	cuda::GpuMat dst;
	cuda::rotate(src, dst, src.size(), angle, src.size().width, src.size().height);
	//Point2f pt(src.cols / 2., src.rows / 2.);
	//cuda::GpuMat r = getRotationMatrix2D(pt, angle, 1.0);
	//warpAffine(src, dst, r, Size(src.cols, src.rows));
	return dst;
}

CameraSource::CameraSource(VideoBufferWithPlc * videobuffer1, VideoCapture * cam1capture, VideoBufferWithResult * resultbuffer1, PlcClient* plcclient1, Logger * logger)
{
	vLogger = logger;
	ReadCameraSettings();
	ReadRulerPoints();

	if (iDisplayCam1 == 1 && iDisplayCam2 == 0 && iDisplayCam3 == 0)
	{
		vProducerBuffer1 = videobuffer1;
		vProdCam1Capture = cam1capture;
		vConsumerBuffer1 = videobuffer1;

		vResultBuffer1 = resultbuffer1;
	}
	else if (iDisplayCam1 == 0 && iDisplayCam2 == 1 && iDisplayCam3 == 0)
	{
		vProducerBuffer2 = videobuffer1;
		vProdCam2Capture = cam1capture;
		vConsumerBuffer2 = videobuffer1;

		vResultBuffer2 = resultbuffer1;
	}

	vPlcClient1 = plcclient1;
}

CameraSource::CameraSource(VideoBufferWithPlc * videobuffer1, VideoCapture * cam1capture, VideoBufferWithPlc * videobuffer2, VideoCapture * cam2capture, VideoBufferWithResult * resultbuffer1, VideoBufferWithResult * resultbuffer2, PlcClient* plcclient1, Logger * logger)
{
	vLogger = logger;
	ReadCameraSettings();
	ReadRulerPoints();

	if (iDisplayCam1 == 1 && iDisplayCam2 == 1)
	{
		vProducerBuffer1 = videobuffer1;
		vProdCam1Capture = cam1capture;
		vConsumerBuffer1 = videobuffer1;

		vProducerBuffer2 = videobuffer2;
		vProdCam2Capture = cam2capture;
		vConsumerBuffer2 = videobuffer2;

		vResultBuffer1 = resultbuffer1;
		vResultBuffer2 = resultbuffer2;
	}

	vPlcClient1 = plcclient1;
}

CameraSource::CameraSource(VideoBufferWithPlc * videobuffer1, VideoCapture * cam1capture, VideoBufferWithResult * resultbuffer1, PlcClient * plcclient1, Logger * logger, VideoBufferDisplay * displaybuffer1, DBAccess* dbAccessBuffer)
{
	vLogger = logger;
	ReadCameraSettings();
	ReadRulerPoints();

	if (iDisplayCam1 == 1 && iDisplayCam2 == 0 && iDisplayCam3 == 0)
	{
		vProducerBuffer1 = videobuffer1;
		vProdCam1Capture = cam1capture;
		vConsumerBuffer1 = videobuffer1;

		vResultBuffer1 = resultbuffer1;
	}
	else if (iDisplayCam1 == 0 && iDisplayCam2 == 1 && iDisplayCam3 == 0)
	{
		vProducerBuffer2 = videobuffer1;
		vProdCam2Capture = cam1capture;
		vConsumerBuffer2 = videobuffer1;

		vResultBuffer2 = resultbuffer1;
	}

	vPlcClient1 = plcclient1;
	vDisplayBuffer = displaybuffer1;
	vDBAccessBuffer = dbAccessBuffer;
}

CameraSource::CameraSource(VideoBufferWithPlc * videobuffer1, VideoCapture * cam1capture, VideoBufferWithPlc * videobuffer2, VideoCapture * cam2capture, VideoBufferWithResult * resultbuffer1, VideoBufferWithResult * resultbuffer2, PlcClient * plcclient1, Logger * logger, VideoBufferDisplay * displaybuffer1)
{
	vLogger = logger;
	ReadCameraSettings();
	ReadRulerPoints();

	if (iDisplayCam1 == 1 && iDisplayCam2 == 1)
	{
		vProducerBuffer1 = videobuffer1;
		vProdCam1Capture = cam1capture;
		vConsumerBuffer1 = videobuffer1;

		vProducerBuffer2 = videobuffer2;
		vProdCam2Capture = cam2capture;
		vConsumerBuffer2 = videobuffer2;

		vResultBuffer1 = resultbuffer1;
		vResultBuffer2 = resultbuffer2;
	}

	vPlcClient1 = plcclient1;
	vDisplayBuffer = displaybuffer1;
}

CameraSource::CameraSource(VideoBufferWithPlc * videobuffer1, VideoCapture * cam1capture, VideoBufferWithPlc * videobuffer2, VideoBufferWithResult * resultbuffer1, VideoBufferWithResult * resultbuffer2, PlcClient * plcclient1, Logger * logger, VideoBufferDisplay * displaybuffer1)
{
	vLogger = logger;
	ReadCameraSettings();
	ReadRulerPoints();

	vProducerBuffer1 = videobuffer1;
	vProdCam1Capture = cam1capture;
	vConsumerBuffer1 = videobuffer1;

	vProducerBuffer2 = videobuffer2;
	vConsumerBuffer2 = videobuffer2;

	vResultBuffer1 = resultbuffer1;
	vResultBuffer2 = resultbuffer2;


	vPlcClient1 = plcclient1;
	vDisplayBuffer = displaybuffer1;
}

CameraSource::CameraSource(VideoBufferWithPlc * videobuffer1, VideoBufferWithPlc * videobuffer2, VideoCapture * cam2capture, VideoBufferWithResult * resultbuffer1, VideoBufferWithResult * resultbuffer2, PlcClient * plcclient1, Logger * logger, VideoBufferDisplay * displaybuffer1)
{
	vLogger = logger;
	ReadCameraSettings();
	ReadRulerPoints();

	vProducerBuffer1 = videobuffer1;
	vConsumerBuffer1 = videobuffer1;

	vProducerBuffer2 = videobuffer2;
	vProdCam2Capture = cam2capture;
	vConsumerBuffer2 = videobuffer2;

	vResultBuffer1 = resultbuffer1;
	vResultBuffer2 = resultbuffer2;


	vPlcClient1 = plcclient1;
	vDisplayBuffer = displaybuffer1;
}

void CameraSource::runProducer1()
{
	try
	{
		Mat vFrame1;
		int nFrameCounter1 = 0, nFrameCounter2 = 0;
		int nABLenToRead = 0, nCDLenToRead = 0;
		int nABPlcCode = 0, nCDPlcCode = 0;

		int nBufferSize = 0;
		int nIdleCount = 0;

		int nABPrintStatus = 0, nCDPrintStatus = 0;

		int nFrameGrabbed = 0;
		int nMustReadFrame = 0;

		while (true)
		{
			vPlcClient1->nNetworkCheck1 = 1;

			if (nFrameCounter1 > 0)
			{
				if (vPlcClient1->nABPrintStart > 0)
				{
					nFrameCounter1 = nFrameCounter1 + 1;
				}
			}
			else
			{
				nABPrintStatus = 0;
				nABLenToRead = 0;
				nABPlcCode = 0;
			}

			if (vPlcClient1->nABPrintStart == 1 && vPlcClient1->nABLength > 0 && nABPrintStatus == 0)
			{

				nABLenToRead = vPlcClient1->nABLength * 10;
				//nABPlcCode = vPlcClient1->nABCode;
				nFrameCounter1 = 1;
				nABPrintStatus = 1;
				nMustReadFrame = 1;
				nBufferSize = vProducerBuffer1->GetSize();

				timev = time(0);
				cout << "\n" << ctime(&timev) << "Start signal received for reading AB Length = " << nABLenToRead << " ; vProducerBuffer1 Size = " << nBufferSize << endl;
				vLogger->WriteCam1Log("runProducer1 : * * *", logtype::severity_level::info);
				vLogger->WriteCam1Log("runProducer1 : Start signal received for reading AB Length = " + to_string(nABLenToRead) + " ; vProducerBuffer1 Size = " + to_string(nBufferSize), logtype::severity_level::info);

			}

			if (vPlcClient1->nABPrintStart == 1 && vPlcClient1->nABLength > 0 && nABPlcCode == 0 && vPlcClient1->nABCode > 0)
			{
				nABPlcCode = vPlcClient1->nABCode;
				nMustReadFrame = 1;

				timev = time(0);
				cout << ctime(&timev) << "AB new PLC Code = " << nABPlcCode << endl;
				vLogger->WriteCam1Log("runProducer1 : AB new PLC Code = " + to_string(nABPlcCode) + " ; Frame counter = " + to_string(nFrameCounter1), logtype::severity_level::info);
			}

			if (vPlcClient1->nABPrintStart == 0 && nABPrintStatus == 1)
			{
				nBufferSize = vProducerBuffer1->GetSize();

				timev = time(0);
				cout << ctime(&timev) << "Stop signal received for reading AB Length. Total Frames = " << nFrameCounter1 << " ; vProducerBuffer1 Size = " << nBufferSize << endl;
				vLogger->WriteCam1Log("runProducer1 : Stop signal received for reading AB Length. Total Frames = " + to_string(nFrameCounter1) + " ; vProducerBuffer1 Size = " + to_string(nBufferSize), logtype::severity_level::info);

				nFrameCounter1 = 0;
				nABPrintStatus = 0;
				nABLenToRead = 0;
				nABPlcCode = 0;
				nMustReadFrame = 1;
			}


			if (nFrameCounter2 > 0)
			{
				if (vPlcClient1->nCDPrintStart > 0)
				{
					nFrameCounter2 = nFrameCounter2 + 1;
				}
			}
			else
			{
				nCDPrintStatus = 0;
				nCDLenToRead = 0;
				nCDPlcCode = 0;
			}

			if (vPlcClient1->nCDPrintStart == 1 && vPlcClient1->nCDLength > 0 && nCDPrintStatus == 0)
			{
				nCDLenToRead = vPlcClient1->nCDLength * 10;
				//nCDPlcCode = vPlcClient1->nCDCode;
				nFrameCounter2 = 1;
				nCDPrintStatus = 1;
				nMustReadFrame = 1;

				nBufferSize = vProducerBuffer1->GetSize();

				timev = time(0);
				cout << "\n" << ctime(&timev) << "Start signal received for reading CD Length = " << nCDLenToRead << " ; vProducerBuffer1 Size = " << nBufferSize << endl;
				vLogger->WriteCam2Log("runProducer1 : Start signal received for reading CD Length = " + to_string(nCDLenToRead) + " ; vProducerBuffer1 Size = " + to_string(nBufferSize), logtype::severity_level::info);

			}

			if (vPlcClient1->nCDPrintStart == 1 && vPlcClient1->nCDLength > 0 && nCDPlcCode == 0 && vPlcClient1->nCDCode > 0)
			{
				nCDPlcCode = vPlcClient1->nCDCode;
				nMustReadFrame = 1;

				timev = time(0);
				cout << ctime(&timev) << "CD new PLC Code = " << nCDPlcCode << endl;
				vLogger->WriteCam2Log("runProducer1 : CD new PLC Code = " + to_string(nCDPlcCode) + " ; Frame counter = " + to_string(nFrameCounter2), logtype::severity_level::info);
			}

			if (vPlcClient1->nCDPrintStart == 0 && nCDPrintStatus == 1)
			{
				nBufferSize = vProducerBuffer1->GetSize();

				timev = time(0);
				cout << ctime(&timev) << "Stop signal received for reading CD Length. Total Frames = " << nFrameCounter2 << " ; vProducerBuffer1 Size = " << nBufferSize << endl;
				vLogger->WriteCam2Log("runProducer1 : Stop signal received for reading CD Length. Total Frames = " + to_string(nFrameCounter2) + " ; vProducerBuffer1 Size = " + to_string(nBufferSize), logtype::severity_level::info);


				nFrameCounter2 = 0;
				nCDPrintStatus = 0;
				nCDLenToRead = 0;
				nCDPlcCode = 0;
				nMustReadFrame = 1;
			}


			if (iDisplayCam1 == 1)
			{
				if (nFrameGrabbed == 0)
				{
					if (!(vProdCam1Capture->read(vFrame1)))
					{
						cout << "Cam-1 Corrupted Frame \n";
						vPlcClient1->nNetworkCheck1 = 0;
						vLogger->WriteERRLog("Cam-1 corrupted frame", logtype::severity_level::error);
						//throw std::exception();
						nFrameGrabbed = 0;
						cv::waitKey(1);
						break;
					}
					nFrameGrabbed = 1;
					if (nFrameCounter1 > 0 || nFrameCounter2 > 0)
					{

						nIdleCount = 0;

						vGloABPlcCode = nABPlcCode;
						vGloCDPlcCode = nCDPlcCode;

						timev = time(0);
						if (nMustReadFrame == 0 && ((nABPlcCode > 0 && nCDPlcCode == 0 && vSkipPlcCodeAB == nABPlcCode) || (nCDPlcCode > 0 && nABPlcCode == 0 && vSkipPlcCodeCD == nCDPlcCode)))
						{
							if (nABPlcCode > 0)
							{
								if ((nFrameCounter1 % 10) == 0)
								{
									vProducerBuffer1->addFrameWithPlc(vFrame1.clone(), nFrameCounter1, nFrameCounter2, nABPrintStatus, nABLenToRead, nABLenToRead, 0, nABPlcCode, nCDPrintStatus, nCDLenToRead, nCDLenToRead, 0, nCDPlcCode, timev);
								}
							}
							else
							{
								if ((nFrameCounter2 % 10) == 0)
								{
									vProducerBuffer1->addFrameWithPlc(vFrame1.clone(), nFrameCounter1, nFrameCounter2, nABPrintStatus, nABLenToRead, nABLenToRead, 0, nABPlcCode, nCDPrintStatus, nCDLenToRead, nCDLenToRead, 0, nCDPlcCode, timev);
								}
							}
						}
						else
						{
							nBufferSize = vProducerBuffer1->GetSize();
							if (nMustReadFrame == 0 && ((nABPlcCode > 0 && nCDPlcCode > 0) || nBufferSize > 50))
							{
								if ((nFrameCounter1 % 2) == 0)
								{
									vProducerBuffer1->addFrameWithPlc(vFrame1.clone(), nFrameCounter1, nFrameCounter2, nABPrintStatus, nABLenToRead, nABLenToRead, 0, nABPlcCode, nCDPrintStatus, nCDLenToRead, nCDLenToRead, 0, nCDPlcCode, timev);
								}
							}
							else
							{
								vProducerBuffer1->addFrameWithPlc(vFrame1.clone(), nFrameCounter1, nFrameCounter2, nABPrintStatus, nABLenToRead, nABLenToRead, 0, nABPlcCode, nCDPrintStatus, nCDLenToRead, nCDLenToRead, 0, nCDPlcCode, timev);

								if (nMustReadFrame == 1)
								{
									nMustReadFrame = 0;
								}
							}
						}
						//cv::waitKey(1);
					}
					else
					{
						nIdleCount = nIdleCount + 1;
						if ((nIdleCount % 5) == 0)
						{
							timev = time(0);
							vProducerBuffer1->addFrameWithPlc(vFrame1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, timev);
						}
						if (nIdleCount > 1000)
						{
							nIdleCount = 0;
							nBufferSize = 0;
							//nBufferSize = vProducerBuffer1->GetSize();
							//std::cout << "vProducerBuffer1 Size = " << nBufferSize << "\n";
							//nBufferSize = vDisplayBuffer->GetSize();
							//std::cout << "vDisplayBuffer Size = " << nBufferSize << "\n";
							//vProducerBuffer1->deleteAllFrames(5);
							//vResultBuffer1->deleteAllFrames(0);
							//std::cout << "Buffer cleared for 30m stacker cam.. Idle count 1000 \n";
						}
					}

					//ToSaveVideo

					if (CAM1_SAVE_VIDEO == 1)
					{
						timev = time(0);
						saveVideo.addFrame(vFrame1(Rect(0, CAM1_SEARCHTOP, vFrame1.cols, CAM1_SEARCH_HEIGHT)).clone(), vPlcClient1->nABPrintStart, vPlcClient1->nABLength, vPlcClient1->nABCode, vPlcClient1->nCDPrintStart, vPlcClient1->nCDLength, vPlcClient1->nCDCode, timev);
					}

					nFrameGrabbed = 0;
				}
			}
			//vSearchFrame = vCurrFrame.vMat(Rect(0, CAM1_SEARCHTOP, vCurrFrame.vMat.cols, CAM1_SEARCH_HEIGHT)).clone();
		}
	}
	catch (const std::exception &ex)
	{
		timev = time(0);
		std::cout << ctime(&timev) << " error in runProducer1." << ex.what() << "\n";
	}
	catch (cv::Exception& e)
	{
		const char* err_msg = e.what();
		std::cout << "\n" << "Opencv Exception caught in runProducer1 :" << err_msg << endl;
	}
	std::exit(0);
}

void CameraSource::runConsumer1()
{
	try
	{
		Mat vSearchFrame;
		Mat vDisplayFrame;

		MatWithPlc vCurrFrame, vMatFrame;
		cuda::GpuMat vCurrGpuFrame;

		Mat vBGFrameCD;
		Mat vBGFrameAB;
		Mat vBGFrameGray;
		cuda::GpuMat vBGGpuFrameABCD;
		cuda::GpuMat vBGGpuFrameAB;
		cuda::GpuMat vBGGpuFrameCD;
		int nBGFrameCaptured = 0;
		int nABFoundCount = 0, nCDFoundCount = 0;

		//Mat vRightFrame;
		//cuda::GpuMat vRightGpuFrame;

		//Mat vLeftFrame;
		//cuda::GpuMat vLeftGpuFrame;
		//cuda::GpuMat vRightGpuCanny;
		Mat vRightCanny;

		cuda::GpuMat vGrayGpuFrame;
		cuda::GpuMat vTreshGpuFrameAB;
		cuda::GpuMat vTreshGpuFrameCD;
		cuda::GpuMat vTreshFrame1;
		cuda::GpuMat vTreshFrame2;
		//cuda::GpuMat vResGpuFrame;

		Mat vCurrResFrame;
		//cuda::GpuMat kernel_ero1 = getStructuringElement(MORPH_RECT, Size(3, 3));
		cuda::GpuMat hsvFrame;
		cuda::GpuMat hsvChannels[3];
		VideoBuffer vHistoryFrames;

		Rect saleRect;
		//UMat vSearchFrame;
		//UMat detected_edges;

		int nFirstMap1 = 0;
		Mat map11, map21;

		Point pt11, pt12;
		Point pt21, pt22;
		Point pt1, pt2;
		int nAlt = 0;

		Rect rectABPrev, rectCDPrev;
		cv::Point ptCDPrev1, ptCDPrev2;
		cv::Point ptCD1, ptCD2;

		cv::Point ptABPrev1, ptABPrev2;
		cv::Point ptAB1, ptAB2;

		int bGetNextFrame = true;
		int nFrameCounterAB = 0, nFrameCounterCD = 0, nExtraFrameCntAB = 0, nExtraFrameCntCD = 0;
		int nIsReadFromPLC = 0;
		int nSaleDetected = 0, nNoSaleDetectCount = 0;
		int dPredctedLength = 0;
		bool bResult = false;
		string sCurSavePath1, sCurSavePath2;
		char timebuff[100];

		int nSaleABDetected = 0;
		int nABRightEdge = 0;
		int nABRightThreshold = 0;
		int nABLeftEdgeStart = 0, nCDLeftEdgeStart = 0, nCDLeftEdgeEnd = 0;;

		int nSaleCDDetected = 0;
		int nCDLeftEdge = 0;
		int nCDLeftThreshold = 0;

		int nPrevABPrintLen = 0, nPrevCDPrintLen = 0;
		int nPrevABReadLen = 0, nPrevCDReadLen = 0;
		int nStopperReadCount = -1;
		int nABLeftEdgeBlock = 0, nCDLeftEdgeBlock = 0;;
		int nABLenOkToSave = 0, nCDLenOkToSave = 0;

		Mat ErrorFrame1, ErrorFrame2;
		Mat vFirstFrame1, vFirstFrame2;
		Mat vSavingFrame1, vSavingFrame2;
		int nRefreshScreen = 0, nSkipCDFrames = 0, nSkipABFrames = 0;
		int nABCodePLC = 0, nCDCodePLC = 0;
		int nABdatabaseLen = 0, nCDdatabaseLen = 0;
		int nDisplayCount = 0;
		int nResValue = 0;
		int nBufSize = 0;

		while (true)
		{

			if (vPlcClient1->nWarnAck1 == 1)
			{
				vLogger->WriteCam1Log("runConsumer1 : AB Warning Alarm acknowledgement", logtype::severity_level::info);
				vPlcClient1->nWarnAck1 = 0;
			}

			if (vPlcClient1->nWarnAck2 == 1)
			{
				vLogger->WriteCam2Log("runConsumer1 : CD Warning Alarm acknowledgement", logtype::severity_level::info);
				vPlcClient1->nWarnAck2 = 0;
			}

			nBufSize = vConsumerBuffer1->GetSize();
			if (nBufSize <= 0)
			{
				cv::waitKey(1);
				continue;
			}

			/*if (nBufSize == 100)
			{
				cout << "Consuemer Buffer-1 Size = " << nBufSize << endl;
				//cout << "Result Buffer-1 Size = " << vResultBuffer1->GetSize() << endl;
			}*/

			//cout << "Consuemer Buffer-1 Size = " << vConsumerBuffer1->GetSize() << endl;
			//cout << "Result Buffer-1 Size = " << vResultBuffer1->GetSize() << endl;
			/*if (nTest==0)
			{
				nTest = 1;
				vDBAccessBuffer->addNewPLCLen(1, 4984035, 10000, 0, 0);
			}*/

			if (bGetNextFrame == false)
			{
				continue;
			}
			vMatFrame = vConsumerBuffer1->deleteFrame();
			if (vMatFrame.vMat.empty())
			{
				continue;
			}

			//bGetNextFrame = false;
			vCurrFrame.vMat = vMatFrame.vMat.clone();
			vDisplayFrame = vMatFrame.vMat.clone();

			vCurrFrame.nFrameNumberABor18 = vMatFrame.nFrameNumberABor18;
			vCurrFrame.nFrameNumberCD = vMatFrame.nFrameNumberCD;
			vCurrFrame.nABor18PrintStart = vMatFrame.nABor18PrintStart;
			vCurrFrame.nABor18PrintLength = vMatFrame.nABor18PrintLength;
			vCurrFrame.nABor18TrackingLen = vMatFrame.nABor18TrackingLen;
			vCurrFrame.nABor18DBLen = vMatFrame.nABor18DBLen;
			vCurrFrame.nABor18PlcCode = vMatFrame.nABor18PlcCode;
			vCurrFrame.nCDPrintStart = vMatFrame.nCDPrintStart;
			vCurrFrame.nCDPrintLength = vMatFrame.nCDPrintLength;
			vCurrFrame.nCDTrackingLen = vMatFrame.nCDTrackingLen;
			vCurrFrame.nCDDBLen = vMatFrame.nCDDBLen;
			vCurrFrame.nCDPlcCode = vMatFrame.nCDPlcCode;
			vCurrFrame.eventTime = vMatFrame.eventTime;

#pragma region SkippingFrames
			if (vCurrFrame.nFrameNumberABor18 <= 1)
			{
				nSkipABFrames = 0;
			}

			if (vCurrFrame.nFrameNumberCD <= 1)
			{
				nSkipCDFrames = 0;
			}

			if (nSkipABFrames > 0)
			{
				if (vCurrFrame.nABor18PrintLength > 0 && nABCodePLC == vCurrFrame.nABor18PlcCode && vCurrFrame.nCDPrintLength == 0 && nPrevCDPrintLen == 0)
				{
					if ((vCurrFrame.nFrameNumberABor18 % 5) > 0)
					{
						//cout << "AB Frame = " + std::to_string(vCurrFrame.nFrameNumberABor18) + " skipped" << endl;
						vLogger->WriteCam1Log("runConsumer1 : AB Frame = " + to_string(vCurrFrame.nFrameNumberABor18) + " skipped", logtype::severity_level::info);
						bGetNextFrame = true;
						continue;
					}
					else
					{
						vLogger->WriteCam1Log("runConsumer1 : AB Frame = " + to_string(vCurrFrame.nFrameNumberABor18) + " displayed. No length detection", logtype::severity_level::info);
					}
				}
			}

			if (nSkipCDFrames > 0)
			{
				if (vCurrFrame.nCDPrintLength > 0 && nCDCodePLC == vCurrFrame.nCDPlcCode && vCurrFrame.nABor18PrintLength == 0 && nPrevABPrintLen == 0)
				{
					if ((vCurrFrame.nFrameNumberCD % 5) > 0)
					{
						//cout << "CD Frame = " + std::to_string(vCurrFrame.nFrameNumberCD) + " skipped" << endl;
						vLogger->WriteCam2Log("runConsumer1 : CD Frame = " + to_string(vCurrFrame.nFrameNumberCD) + " skipped", logtype::severity_level::info);
						bGetNextFrame = true;
						continue;
					}
					else
					{
						vLogger->WriteCam2Log("runConsumer1 : CD Frame = " + to_string(vCurrFrame.nFrameNumberCD) + " displayed. No length detection", logtype::severity_level::info);
					}
				}
			}
#pragma endregion SkippingFrames

			if (nABCodePLC == 0 && vCurrFrame.nABor18PrintLength > 0)
			{
				nABCodePLC = vCurrFrame.nABor18PlcCode;
				if (nABCodePLC > 0 && nFrameCounterAB > 0)
				{
					if (iDisplayCam1 == 1)
					{
						cv::putText(ErrorFrame1, "Code = " + to_string(nABCodePLC), cv::Point(ErrorFrame1.cols - 1700, ErrorFrame1.rows - 5), FONT_HERSHEY_COMPLEX, 0.75, Scalar(0, 255, 0), 2, LINE_AA);
						//vResultBuffer1->updatePLCCode(0, nABCodePLC);
					}
				}
			}

			if (nCDCodePLC == 0 && vCurrFrame.nCDPrintLength > 0)//
			{
				nCDCodePLC = vCurrFrame.nCDPlcCode;

				if (nCDCodePLC > 0 && nFrameCounterCD > 0)
				{
					if (iDisplayCam1 == 1)
					{
						cv::putText(ErrorFrame2, "Code = " + to_string(nCDCodePLC), cv::Point(130, ErrorFrame2.rows - 5), FONT_HERSHEY_COMPLEX, 0.75, Scalar(0, 255, 0), 2, LINE_AA);
						//vResultBuffer1->updatePLCCode(1, nCDCodePLC);
					}
				}
			}

#pragma region	CheckingDBLength

			if (nUseL2DB == 1 && nABCodePLC > 0 && vCurrFrame.nABor18TrackingLen > 0)
			{
				if (nABdatabaseLen == 0)
				{
					//nABdatabaseLen = vDBAccessBuffer->getDBPrintLen(nABCodePLC);
					//vResultBuffer1->updatePLCCode(0, nABCodePLC);
					//nABdatabaseLen = getDatabasePrintLen(nABCodePLC);
					nABdatabaseLen = vGloABDBLen;

					if (nABdatabaseLen > 0)
					{
						//vGloABDBLen = 0;
						if (vCurrFrame.nABor18TrackingLen != nABdatabaseLen)
						{
							vPlcClient1->nWarning1 = 2;

							cout << "Stk AB Length Mismatch. Alarm Sent to PLC. Frame = " << nFrameCounterAB << "; PLC Code = " << nABCodePLC << "; PLC Len = " << vCurrFrame.nABor18TrackingLen << "; Sticker Len = " << nABdatabaseLen << "\n";
							vLogger->WriteCam1Log("runConsumer1 : Stk AB Length Mismatch. Alarm Sent to PLC. Frame= " + to_string(nFrameCounterAB) + " ; PLC Code = = " + to_string(nABCodePLC) + " ; PLC Len = " + to_string(vCurrFrame.nABor18TrackingLen) + "; Sticker Len = " + to_string(nABdatabaseLen), logtype::severity_level::warning);
							nABFoundCount = 0;

							if (nFrameCounterAB > 0)
							{
								vResultBuffer1->updatePLCLenWithDBLen(0, nABdatabaseLen);
							}
						}
						else
						{
							cout << "Stk AB PLC length and Database length are matching. Frame = " << nFrameCounterAB << "; PLC Code = " << nABCodePLC << "; PLC Len = " << vCurrFrame.nABor18TrackingLen << "\n";
							vLogger->WriteCam1Log("runConsumer1 : Stk AB PLC length and Database length are matching. Frame= " + to_string(nFrameCounterAB) + " ; PLC Code = = " + to_string(nABCodePLC) + " ; PLC Len = " + to_string(vCurrFrame.nABor18TrackingLen), logtype::severity_level::info);
						}


					}
					else
					{
						cout << "Stk AB database length not found. Frame = " << nFrameCounterAB << "; PLC Code = " << nABCodePLC << "; PLC Len = " << vCurrFrame.nABor18TrackingLen << "\n";
						vLogger->WriteCam1Log("runConsumer1 : Stk AB database length not found. Frame= " + to_string(nFrameCounterAB) + " ; PLC Code = " + to_string(nABCodePLC) + " ; PLC Len = " + to_string(vCurrFrame.nABor18TrackingLen), logtype::severity_level::warning);
					}
				}
			}
			else
			{
				nABdatabaseLen = 0;
				//vGloABDBLen = 0;
			}
			if (nABdatabaseLen > 0)
			{
				vCurrFrame.nABor18PrintLength = nABdatabaseLen;
				vCurrFrame.nABor18DBLen = nABdatabaseLen;
			}
			else
			{
				vCurrFrame.nABor18PrintLength = vCurrFrame.nABor18TrackingLen;
				vCurrFrame.nABor18DBLen = 0;
			}

			if (nUseL2DB == 1 && nCDCodePLC > 0 && vCurrFrame.nCDTrackingLen > 0)
			{
				if (nCDdatabaseLen == 0)
				{
					//nCDdatabaseLen = vDBAccessBuffer->getDBPrintLen(nCDCodePLC);
					//vResultBuffer1->updatePLCCode(1, nCDCodePLC);
					//nCDdatabaseLen = getDatabasePrintLen(nCDCodePLC);
					nCDdatabaseLen = vGloCDDBLen;

					if (nCDdatabaseLen > 0)
					{
						//vGloCDDBLen = 0;
						if (vCurrFrame.nCDTrackingLen != nCDdatabaseLen)
						{
							vPlcClient1->nWarning2 = 2;

							cout << "Stk CD Length Mismatch. Alarm Sent to PLC. Frame = " << nFrameCounterCD << "; PLC Code = " << nCDCodePLC << "; PLC Len = " << vCurrFrame.nCDTrackingLen << "; Sticker Len = " << nCDdatabaseLen << "\n";
							vLogger->WriteCam2Log("runConsumer1 : Stk CD Length Mismatch. Alarm Sent to PLC. Frame= " + to_string(nFrameCounterCD) + " ; PLC Code = = " + to_string(nCDCodePLC) + " ; PLC Len = " + to_string(vCurrFrame.nCDTrackingLen) + "; Sticker Len = " + to_string(nCDdatabaseLen), logtype::severity_level::warning);
							nCDFoundCount = 0;


							if (nFrameCounterCD > 0)
							{
								vResultBuffer1->updatePLCLenWithDBLen(1, nCDdatabaseLen);
							}
						}
						else
						{
							cout << "Stk CD PLC length and Database length are matching. Frame = " << nFrameCounterCD << "; PLC Code = " << nCDCodePLC << "; PLC Len = " << vCurrFrame.nCDTrackingLen << "\n";
							vLogger->WriteCam2Log("runConsumer1 : Stk CD PLC length and Database length are matching. Frame= " + to_string(nFrameCounterCD) + " ; PLC Code = = " + to_string(nCDCodePLC) + " ; PLC Len = " + to_string(vCurrFrame.nCDTrackingLen), logtype::severity_level::info);
						}
					}
					else
					{
						cout << "Stk CD database length not found. Frame = " << nFrameCounterCD << "; PLC Code = " << nCDCodePLC << "; PLC Len = " << vCurrFrame.nCDTrackingLen << "\n";
						vLogger->WriteCam2Log("runConsumer1 : Stk CD database length not found. Frame= " + to_string(nFrameCounterCD) + " ; PLC Code = " + to_string(nCDCodePLC) + " ; PLC Len = " + to_string(vCurrFrame.nCDTrackingLen), logtype::severity_level::warning);
					}
				}
			}
			else
			{
				nCDdatabaseLen = 0;
				//vGloCDDBLen = 0;
			}
			if (nCDdatabaseLen > 0)
			{
				vCurrFrame.nCDPrintLength = nCDdatabaseLen;
				vCurrFrame.nCDDBLen = nCDdatabaseLen;
			}
			else
			{
				vCurrFrame.nCDPrintLength = vCurrFrame.nCDTrackingLen;
				vCurrFrame.nCDDBLen = 0;
			}

#pragma endregion	CheckingDBLength

			if (iDisplayCam1 == 0)
			{
				continue;
			}

			//vDisplayFrame = vMatFrame.vMat.clone();

			vSearchFrame = vCurrFrame.vMat(Rect(0, CAM1_SEARCHTOP, vCurrFrame.vMat.cols, CAM1_SEARCH_HEIGHT)).clone();
			nFrameCounterAB = vCurrFrame.nFrameNumberABor18;
			nFrameCounterCD = vCurrFrame.nFrameNumberCD;

			//dPredctedLength = GetPredictedLength(1, 600, 400, 1, 474, 79, 1942, 25);
			//cout << " Pred Len = " << dPredctedLength << endl;
			//dPredctedLength = 0;
			//CreateBackgroundSubtraction objects

			//pBackSub->apply(vSearchFrame, fgMask);
			//cv::GaussianBlur(fgMask, fgMask, cv::Size(5, 5), 3.5, 3.5);
			//cv::threshold(fgMask, fgMask, 10, 255, THRESH_BINARY);
			////cvtColor(vSearchFrame, subtractImg, COLOR_RGB2GRAY);
			////subtract(subtractImg, fgMask, subtractImg);
			////pBackSub->getBackgroundImage(subtractImg);
			//cv::namedWindow("fgMask", WINDOW_NORMAL);
			//cv::imshow("fgMask", fgMask);

			if (vCurrFrame.nABor18PrintStart > 0 || vCurrFrame.nCDPrintStart > 0 || 1 == 1)
			{
				//vRightFrame.upload(vCurrFrame(cv::Rect(CAM1_RFRAME_X, CAM1_RFRAME_Y, CAM1_RFRAME_WIDTH, CAM1_RFRAME_HEIGHT)));

				vCurrGpuFrame.upload(vSearchFrame);

				cv::Ptr<cuda::Filter> filter = cuda::createGaussianFilter(vCurrGpuFrame.type(), vCurrGpuFrame.type(), cv::Size(5, 5), 0);
				filter->apply(vCurrGpuFrame, vGrayGpuFrame);
				//cv::GaussianBlur(vSearchFrame, vGrayFrame, cv::Size(7, 7),0);

				cuda::cvtColor(vGrayGpuFrame, vGrayGpuFrame, COLOR_RGB2GRAY);
				//cv::cvtColor(vGrayFrame, vGrayFrame, COLOR_RGB2GRAY);

				//if (nStopperReadCount <= 0)
				//{
				//	ReadStopperPixelValues(vGrayGpuFrame);
				//	//GetABLeftEdgeBlock();
				//	if (nStopperReadCount == -1)
				//	{
				//		FillStopperPrevPixelValues(1);
				//		nStopperReadCount = 0;
				//	}
				//	else
				//	{
				//		FillStopperPrevPixelValues(vCurrFrame.nABPrintLength);
				//	}
				//}

				//nStopperReadCount = nStopperReadCount + 1;
				//if (nStopperReadCount == 100)
				//{
				//	nStopperReadCount = 0;
				//}
				/*if (vCurrFrame.nABPrintStart == 0 && vCurrFrame.nCDPrintStart == 0)
				{*/

				nBGFrameCaptured = 0;
				if (vHistoryFrames.GetGpuBufferSize() < 25)
				{
					vHistoryFrames.addGpuFrame(vGrayGpuFrame.clone());
				}

				if (vHistoryFrames.GetGpuBufferSize() >= 25)//&& (vCurrFrame.nCDPrintLength > 0 || vCurrFrame.nABPrintLength > 0)
				{
					/*if (vCurrFrame.nCDPrintLength > 0 || vCurrFrame.nABPrintLength > 0)
					{
						vBGGpuFrameABCD = vHistoryFrames.getAndReinsertFrame();
					}
					else
					{
						vBGGpuFrameABCD = vHistoryFrames.deleteGpuFrame();
						vHistoryFrames.addGpuFrame(vGrayGpuFrame.clone());
					}*/
					vBGGpuFrameABCD = vHistoryFrames.deleteGpuFrame();
					nBGFrameCaptured = 1;
				}

				cv::rectangle(vSearchFrame, cv::Point(5, vSearchFrame.rows - 20), cv::Point(vCurrFrame.vMat.cols - 5, vSearchFrame.rows), Scalar(30, 30, 30), cv::FILLED);

				cv::putText(vSearchFrame, "f " + to_string(nFrameCounterCD), cv::Point(30, vSearchFrame.rows - 5), FONT_HERSHEY_COMPLEX, 0.75, Scalar(0, 255, 0), 2, LINE_AA);
				if (vCurrFrame.nCDPlcCode > 0)
				{
					cv::putText(vSearchFrame, "Code = " + to_string(vCurrFrame.nCDPlcCode), cv::Point(130, vSearchFrame.rows - 5), FONT_HERSHEY_COMPLEX, 0.75, Scalar(0, 255, 0), 2, LINE_AA);
				}
				cv::putText(vSearchFrame, "Len = " + to_string(vCurrFrame.nCDPrintLength), cv::Point(500, vSearchFrame.rows - 5), FONT_HERSHEY_COMPLEX, 0.75, Scalar(0, 255, 0), 2, LINE_AA);
				if (vCurrFrame.nCDDBLen > 0 && vCurrFrame.nCDDBLen != vCurrFrame.nCDTrackingLen)
				{
					cv::putText(vSearchFrame, "Length Mismatch. PLC Len = " + to_string(vCurrFrame.nCDTrackingLen), cv::Point(1100, vSearchFrame.rows - 5), FONT_HERSHEY_COMPLEX, 0.75, Scalar(0, 0, 255), 2, LINE_AA);
				}

				cv::putText(vSearchFrame, "f " + to_string(nFrameCounterAB), cv::Point(vCurrFrame.vMat.cols - 1800, vSearchFrame.rows - 5), FONT_HERSHEY_COMPLEX, 0.75, Scalar(0, 255, 0), 2, LINE_AA);
				if (vCurrFrame.nABor18PlcCode > 0)
				{
					cv::putText(vSearchFrame, "Code = " + to_string(vCurrFrame.nABor18PlcCode), cv::Point(vCurrFrame.vMat.cols - 1700, vSearchFrame.rows - 5), FONT_HERSHEY_COMPLEX, 0.75, Scalar(0, 255, 0), 2, LINE_AA);
				}
				cv::putText(vSearchFrame, "Len = " + to_string(vCurrFrame.nABor18PrintLength), cv::Point(vCurrFrame.vMat.cols - 1330, vSearchFrame.rows - 5), FONT_HERSHEY_COMPLEX, 0.75, Scalar(0, 255, 0), 2, LINE_AA);

				//timev = time(0);
				timev = vCurrFrame.eventTime;
				std::strftime(timebuff, 100, "%d-%m-%y %H:%M:%S", localtime(&timev));
				cv::putText(vSearchFrame, timebuff, cv::Point(vCurrFrame.vMat.cols - 1080, vSearchFrame.rows - 5), FONT_HERSHEY_COMPLEX, 0.75, Scalar(0, 255, 0), 2, LINE_AA);

				if (vCurrFrame.nABor18DBLen > 0 && vCurrFrame.nABor18DBLen != vCurrFrame.nABor18TrackingLen)
				{
					cv::putText(vSearchFrame, "Length Mismatch. PLC Len = " + to_string(vCurrFrame.nABor18TrackingLen), cv::Point(vCurrFrame.vMat.cols - 730, vSearchFrame.rows - 5), FONT_HERSHEY_COMPLEX, 0.75, Scalar(0, 0, 255), 2, LINE_AA);
				}
				/*putText(vSearchFrame, "Code = " + to_string(vCurrFrame.nABPlcCode), cv::Point((vCurrFrame.vMat.cols / 2) + 100, 25), FONT_HERSHEY_COMPLEX, 0.75, Scalar(0, 255, 0), 2, LINE_AA);
				putText(vSearchFrame, "Len = " + to_string(vCurrFrame.nABPrintLength), cv::Point((vCurrFrame.vMat.cols / 2) + 450, 25), FONT_HERSHEY_COMPLEX, 0.75, Scalar(0, 255, 0), 2, LINE_AA);*/
				//}

#pragma region BackGroundSubtractionCD

				if (vCurrFrame.nCDPrintLength > 0)
				{
					nCDLeftEdgeEnd = 2100;

					if (nPrevCDPrintLen == 0)
					{
						//timev = time(0);
						timev = vCurrFrame.eventTime;
						std::strftime(timebuff, 100, "%d-%m-%y %H:%M:%S", localtime(&timev));
						cv::putText(vSearchFrame, timebuff, cv::Point(750, vSearchFrame.rows - 5), FONT_HERSHEY_COMPLEX, 0.75, Scalar(0, 255, 0), 2, LINE_AA);

						ErrorFrame2 = vSearchFrame(Rect(0, 0, nCDLeftEdgeEnd, vSearchFrame.rows)).clone();

						vResultBuffer1->addFrameWithResult(ErrorFrame2, nFrameCounterCD, 0, 0, 0, 0, vCurrFrame.nCDPrintLength, vCurrFrame.nCDTrackingLen, vCurrFrame.nCDDBLen, 0, vCurrFrame.nCDPlcCode, 1);

						vLogger->WriteCam2Log("runConsumer1 : CD First frame captured. Frame = " + to_string(nFrameCounterCD), logtype::severity_level::info);

						//putText(ErrorFrame2, to_string(vCurrFrame.nCDPlcCode), cv::Point(200, 25), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 255, 0), 2, LINE_AA);
						//putText(ErrorFrame2, to_string(vCurrFrame.nCDPrintLength), cv::Point(200, 55), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 255, 0), 2, LINE_AA);
					}

					/*if (nPrevCDPrintLen == 0 && vCurrFrame.nCDPrintLength > 0)
					{
						nCDLeftEdgeBlock = 0;
						ReadStopperPixelValues(vGrayGpuFrame);
						nCDLeftEdgeBlock = GetCDLeftEdgeBlock();
					}*/

					if (nBGFrameCaptured == 1)
					{
						vBGGpuFrameCD = vBGGpuFrameABCD(Rect(0, 0, nCDLeftEdgeEnd, vGrayGpuFrame.rows)).clone();

						cuda::absdiff(vGrayGpuFrame(Rect(0, 0, nCDLeftEdgeEnd, vGrayGpuFrame.rows)), vBGGpuFrameCD, vBGGpuFrameCD);
						//cuda::subtract(vGrayGpuFrame(Rect(0, 0, nCDLeftEdgeEnd, vGrayGpuFrame.rows)), vBGGpuFrameCD, vBGGpuFrameCD);

						cuda::threshold(vBGGpuFrameCD, vBGGpuFrameCD, 7, 255, THRESH_BINARY);
						vBGGpuFrameCD.download(vBGFrameCD);

						if (!vBGFrameCD.empty())
						{
							ptCD1.x = 0;
							ptCD1.y = 0;
							ptCD2.x = 0;
							ptCD2.y = 0;
							dPredctedLength = 0;
							/*if (nCDFoundCount < 7 || nCDLenOkToSave == 0)
							{
								dPredctedLength = detectCDSaleLeftEdge_BG(nFrameCounterCD, vCurrFrame.nCDPrintLength, vBGFrameCD, ptCD1, ptCD2);
							}*/
							if (std::abs(vCurrFrame.nCDPrintLength - nPrevCDReadLen) > 10)
							{
								vSkipPlcCodeCD = 0;
								dPredctedLength = detectCDSaleLeftEdge_BG(nFrameCounterCD, nCDFoundCount, vCurrFrame.nCDPrintLength, nPrevCDReadLen, vBGFrameCD, ptCD1, ptCD2);
							}
							else
							{
								if (nSkipCDFrames == 0)
								{
									cout << "CD Skip Start Frame = " + std::to_string(nFrameCounterCD) + "; CD PrintLen = " + std::to_string(vCurrFrame.nCDPrintLength) + "; nPrevCDReadLen = " + std::to_string(nPrevCDReadLen) << endl;
									vLogger->WriteCam2Log("runConsumer1 : CD Skip Start Frame = " + to_string(nFrameCounterCD) + "; CD PrintLen = " + std::to_string(vCurrFrame.nCDPrintLength) + "; nPrevCDReadLen = " + std::to_string(nPrevCDReadLen), logtype::severity_level::info);
									nSkipCDFrames = 1;

									vSkipPlcCodeCD = vCurrFrame.nCDPlcCode;
								}
							}
							if (dPredctedLength > 0 && ptCD1.x > 200)
							{
								if (std::abs(vCurrFrame.nCDPrintLength - nPrevCDReadLen) > std::abs(vCurrFrame.nCDPrintLength - dPredctedLength))
								{
									vFirstFrame2 = ErrorFrame2.clone();
									nCDLenOkToSave = 0;
									//if (std::abs(vCurrFrame.nCDPrintLength - dPredctedLength) <= CAM1_WARN_LEN_DIFF)
									if ((vCurrFrame.nCDPrintLength >= dPredctedLength && vCurrFrame.nCDPrintLength - dPredctedLength <= CAM1_WARN_LEN_DIFF_NEG) || (dPredctedLength > vCurrFrame.nCDPrintLength && dPredctedLength - vCurrFrame.nCDPrintLength <= CAM1_WARN_LEN_DIFF_POS))
									{
										if (compareLenWithLeftEdge(2, vCurrFrame.nCDPrintLength, ptCD1.x, false) > 0)
										{
											nCDLenOkToSave = 1;
										}
										else
										{
											if (nCDFoundCount == 0)
											{
												dPredctedLength = 4000;
											}
										}

										line(vSearchFrame, ptCD1, ptCD2, Scalar(0, 255, 0), 1, 8);
										line(vFirstFrame2, ptCD1, ptCD2, Scalar(0, 255, 0), 1, 8);

										/*nCDFoundCount = nCDFoundCount + 1;
										if (nCDFoundCount == 1)//allowing first finding
										{
											nCDLenOkToSave = 1;
										}*/
									}
									else
									{
										line(vSearchFrame, ptCD1, ptCD2, Scalar(0, 0, 255), 1, 8);
										line(vFirstFrame2, ptCD1, ptCD2, Scalar(0, 0, 255), 1, 8);
									}


									//cv::rectangle(vSearchFrame, cv::Point(saleRect.x, saleRect.y), cv::Point(saleRect.x + saleRect.width, saleRect.y + saleRect.height), Scalar(0, 255, 0), 1, 8);
									if (dPredctedLength > 3000)
									{
										cv::putText(vSearchFrame, to_string(dPredctedLength), cv::Point(120, 50), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 255, 0), 2, LINE_AA);//cv::Point(ptCD1.x - 150, 50)
										cv::putText(vFirstFrame2, to_string(dPredctedLength), cv::Point(120, 50), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 255, 0), 2, LINE_AA);//ptCD1.y
									}
									else
									{
										cv::putText(vSearchFrame, to_string(dPredctedLength), cv::Point(120, 50), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 0, 255), 2, LINE_AA);
										cv::putText(vFirstFrame2, to_string(dPredctedLength), cv::Point(120, 50), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 0, 255), 2, LINE_AA);
									}

									//putText(vSearchFrame, to_string(vCurrFrame.nCDPrintLength), cv::Point(ptCD1.x - 150, ptCD1.y + 30), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 255, 0), 1, LINE_AA);

									if (nCDFoundCount < 1 || (nCDFoundCount >= 1 && nCDLenOkToSave == 1))
									{
										/*timev = time(0);
										std::strftime(timebuff, 100, "%d-%m-%y %H:%M:%S", localtime(&timev));
										cv::putText(vSearchFrame, timebuff, cv::Point(650, vSearchFrame.rows - 5), FONT_HERSHEY_COMPLEX, 0.75, Scalar(0, 255, 0), 2, LINE_AA);*/

										//vResultBuffer1->addFrameWithResult(vSearchFrame(Rect(0, 0, nCDLeftEdgeEnd, vSearchFrame.rows)).clone(), nFrameCounterCD, ptCD1.x, ptCD1.y, ptCD2.x, ptCD2.y, vCurrFrame.nCDPrintLength, dPredctedLength, vCurrFrame.nCDPlcCode, 1);
										vResultBuffer1->addFrameWithResult(vFirstFrame2(Rect(0, 0, nCDLeftEdgeEnd, vSearchFrame.rows)).clone(), nFrameCounterCD, ptCD1.x, ptCD1.y, ptCD2.x, ptCD2.y, vCurrFrame.nCDPrintLength, vCurrFrame.nCDTrackingLen, vCurrFrame.nCDDBLen, dPredctedLength, vCurrFrame.nCDPlcCode, 1);
										cout << "CD Counter = " << nCDFoundCount << "; Frame = " << nFrameCounterCD << "; Length = " << dPredctedLength << "; X1 = " << ptCD1.x << " Y1 = " << ptCD1.y << " X2 = " << ptCD2.x << " Y2 = " << ptCD2.y << "\n";
										vLogger->WriteCam2Log("runConsumer1 : CD Counter = " + to_string(nCDFoundCount) + "; Frame = " + to_string(nFrameCounterCD) + "; Length = " + to_string(dPredctedLength) + " -- added to result", logtype::severity_level::info);

										nCDFoundCount = nCDFoundCount + 1;
										/*if (nCDFoundCount == 0)
										{
											nCDFoundCount = 1;
										}*/

										nPrevCDReadLen = dPredctedLength;
										ptCDPrev1.x = ptCD1.x;
										ptCDPrev1.y = ptCD1.y;
										ptCDPrev2.x = ptCD2.x;
										ptCDPrev2.y = ptCD2.y;
									}


									//cout << "Counter2 = " << nFrameCounter << "; vResultBuffer1 Size = " << vResultBuffer1->GetSize() << "; Length = " << dPredctedLength << "\n";

									/*nPrevCDReadLen = dPredctedLength;
									ptCDPrev1.x = ptCD1.x;
									ptCDPrev1.y = ptCD1.y;
									ptCDPrev2.x = ptCD2.x;
									ptCDPrev2.y = ptCD2.y;*/

									//cout << "CD Counter = " << nFrameCounterCD << "; Length = " << dPredctedLength << "; X1 = " << ptCDPrev1.x << " Y1 = " << ptCDPrev1.y << " X2 = " << ptCDPrev2.x << " Y2 = " << ptCDPrev2.y << "\n";
									//vLogger->WriteCam1Log("CD Counter = " + to_string(nFrameCounterCD) + "; Length = " + to_string(dPredctedLength) + "; X1 = " + to_string(ptCDPrev1.x) + "; Y1 = " + to_string(ptCDPrev1.y) + "; X2 = " + to_string(ptCDPrev2.x) + "; Height = " + to_string(ptCDPrev2.y), logtype::severity_level::error);

								}
							}

							if (nPrevCDReadLen > 0)
							{
								//if (std::abs(vCurrFrame.nCDPrintLength - nPrevCDReadLen) <= CAM1_WARN_LEN_DIFF)
								if ((vCurrFrame.nCDPrintLength >= nPrevCDReadLen && vCurrFrame.nCDPrintLength - nPrevCDReadLen <= CAM1_WARN_LEN_DIFF_NEG) || (nPrevCDReadLen > vCurrFrame.nCDPrintLength && nPrevCDReadLen - vCurrFrame.nCDPrintLength <= CAM1_WARN_LEN_DIFF_POS))
								{
									line(vSearchFrame, ptCDPrev1, ptCDPrev2, Scalar(0, 255, 0), 1, 8);
								}
								else
								{
									line(vSearchFrame, ptCDPrev1, ptCDPrev2, Scalar(0, 0, 255), 1, 8);
								}

								//cv::rectangle(vSearchFrame, cv::Point(saleRect.x, saleRect.y), cv::Point(saleRect.x + saleRect.width, saleRect.y + saleRect.height), Scalar(0, 255, 0), 1, 8);
								if (nPrevCDReadLen > 3000)
								{
									cv::putText(vSearchFrame, to_string(nPrevCDReadLen), cv::Point(120, 50), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 255, 0), 2, LINE_AA);//cv::Point(ptCDPrev1.x - 150, 50)
								}
								else
								{
									cv::putText(vSearchFrame, to_string(nPrevCDReadLen), cv::Point(120, 50), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 0, 255), 2, LINE_AA);
								}
							}

						}

						//cv::namedWindow("BGSubtract-CD", WINDOW_NORMAL);
						//cv::imshow("BGSubtract-CD", vBGFrameCD);
					}
				}
				/*else
				{
					if (nBGFrameCaptured == 0)
					{
						cout << ctime(&timev) << "\nBG frame not captured for CD\n";
						vLogger->WriteCam1Log("BG Frame not captured for CD", logtype::severity_level::error);
					}
				}*/

#pragma endregion BackGroundSubtractionCD


#pragma region BackGroundSubtractionAB

				if (vCurrFrame.nABor18PrintLength > 0) //|| 1 == 1
				{
					if (vCurrFrame.nABor18PrintLength > 15400 || vCurrFrame.nABor18PrintLength == 0)
					{
						nABLeftEdgeStart = 0;
					}
					else
					{
						nABLeftEdgeStart = 1900;
					}

					if (nPrevABPrintLen == 0 && vCurrFrame.nABor18PrintLength > 0)
					{
						ErrorFrame1 = vSearchFrame.clone();
						vResultBuffer1->addFrameWithResult(ErrorFrame1, nFrameCounterAB, 0, 0, 0, 0, vCurrFrame.nABor18PrintLength, vCurrFrame.nABor18TrackingLen, vCurrFrame.nABor18DBLen, 0, vCurrFrame.nABor18PlcCode, 0);

						vLogger->WriteCam1Log("runConsumer1 : AB First frame captured. Frame = " + to_string(nFrameCounterAB), logtype::severity_level::info);
					}
					/*if (nPrevABPrintLen == 0 && vCurrFrame.nABPrintLength > 0)
					{
						nABLeftEdgeBlock = 0;
						ReadStopperPixelValues(vGrayGpuFrame);
						nABLeftEdgeBlock = GetABLeftEdgeBlock();
					}*/
					if (nBGFrameCaptured == 1)
					{
						vBGGpuFrameAB = vBGGpuFrameABCD(Rect(nABLeftEdgeStart, 0, vGrayGpuFrame.cols - nABLeftEdgeStart, vGrayGpuFrame.rows)).clone();

						//cuda::absdiff(vGrayGpuFrame(Rect(nABLeftEdgeStart, 0, vGrayGpuFrame.cols - nABLeftEdgeStart, vGrayGpuFrame.rows)), vBGGpuFrameAB, vBGGpuFrameAB);
						cuda::subtract(vGrayGpuFrame(Rect(nABLeftEdgeStart, 0, vGrayGpuFrame.cols - nABLeftEdgeStart, vGrayGpuFrame.rows)), vBGGpuFrameAB, vBGGpuFrameAB);

						if (vCurrFrame.nABor18PrintLength < 18500)
						{
							cuda::threshold(vBGGpuFrameAB, vBGGpuFrameAB, 10, 255, THRESH_BINARY);//8
						}
						else
						{
							cuda::threshold(vBGGpuFrameAB, vBGGpuFrameAB, 5, 255, THRESH_BINARY);//8
						}
						vBGGpuFrameAB.download(vBGFrameAB);

						if (vCurrFrame.nABor18PrintLength > 0)
						{
							ptAB1.x = 0;
							ptAB1.y = 0;
							ptAB2.x = 0;
							ptAB2.y = 0;
							dPredctedLength = 0;

							if (std::abs(vCurrFrame.nABor18PrintLength - nPrevABReadLen) > 15)
							{
								vSkipPlcCodeAB = 0;
								dPredctedLength = detectABSaleLeftEdge_BG(nABLeftEdgeStart, nFrameCounterAB, nABFoundCount, vCurrFrame.nABor18PrintLength, nPrevABReadLen, vBGFrameAB, ptAB1, ptAB2);
							}
							else
							{
								if (nSkipABFrames == 0)
								{
									cout << "AB Skip start Frame = " + std::to_string(nFrameCounterAB) + "; AB PrintLen = " + std::to_string(vCurrFrame.nABor18PrintLength) + "; nPrevABReadLen = " + std::to_string(nPrevABReadLen) << endl;
									vLogger->WriteCam1Log("runConsumer1 : AB Skip start Frame = " + to_string(nFrameCounterAB) + "; AB PrintLen = " + std::to_string(vCurrFrame.nABor18PrintLength) + "; nPrevABReadLen = " + std::to_string(nPrevABReadLen), logtype::severity_level::info);
									nSkipABFrames = 1;
									vSkipPlcCodeAB = vCurrFrame.nABor18PlcCode;
								}

							}
							/*if (nABFoundCount < 10 || nABLenOkToSave == 0)
							{
								dPredctedLength = detectABSaleLeftEdge_BG(nABLeftEdgeStart, nFrameCounterAB, vCurrFrame.nABPrintLength, vBGFrameAB, ptAB1, ptAB2);
							}*/
							//putText(vSearchFrame, "Act = " + to_string(dPredctedLength), cv::Point((vCurrFrame.vMat.cols / 2) + 100, 85), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 255, 0), 2, LINE_AA);

							if (dPredctedLength > 0)
							{
								if (std::abs(vCurrFrame.nABor18PrintLength - nPrevABReadLen) > std::abs(vCurrFrame.nABor18PrintLength - dPredctedLength))
								{
									vFirstFrame1 = ErrorFrame1.clone();
									nABLenOkToSave = 0;
									//if (std::abs(vCurrFrame.nABPrintLength - dPredctedLength) <= CAM1_WARN_LEN_DIFF)
									if ((vCurrFrame.nABor18PrintLength >= dPredctedLength && vCurrFrame.nABor18PrintLength - dPredctedLength <= CAM1_WARN_LEN_DIFF_NEG) || (dPredctedLength > vCurrFrame.nABor18PrintLength && dPredctedLength - vCurrFrame.nABor18PrintLength <= CAM1_WARN_LEN_DIFF_POS))
									{
										//Checking for order lengths
										if (compareLenWithLeftEdge(1, vCurrFrame.nABor18PrintLength, ptAB1.x, false) > 0)
										{
											nABLenOkToSave = 1;
										}
										else
										{
											if (nABFoundCount == 0)
											{
												dPredctedLength = 4000;//some dummy length as the pred len is with in the range but
											}
										}
										line(vSearchFrame, ptAB1, ptAB2, Scalar(0, 255, 0), 1, 8);
										line(vFirstFrame1, ptAB1, ptAB2, Scalar(0, 255, 0), 1, 8);

										/*nABFoundCount = nABFoundCount + 1;
										if (nABFoundCount == 1)//allowing first finding
										{
											nABLenOkToSave = 1;
										}*/
									}
									else
									{
										line(vSearchFrame, ptAB1, ptAB2, Scalar(0, 0, 255), 1, 8);
										line(vFirstFrame1, ptAB1, ptAB2, Scalar(0, 0, 255), 1, 8);

									}
									//cv::rectangle(vSearchFrame, cv::Point(saleRect.x, saleRect.y), cv::Point(saleRect.x + saleRect.width, saleRect.y + saleRect.height), Scalar(0, 255, 0), 1, 8);
									if (dPredctedLength > 3000)
									{
										cv::putText(vSearchFrame, to_string(dPredctedLength), cv::Point(vSearchFrame.cols - 200, 30), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 255, 0), 2, LINE_AA); //cv::Point(ptAB1.x - 150, 50)
										cv::putText(vFirstFrame1, to_string(dPredctedLength), cv::Point(vSearchFrame.cols - 200, 30), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 255, 0), 2, LINE_AA);//ptAB1.y + 25
									}
									else
									{
										cv::putText(vSearchFrame, to_string(dPredctedLength), cv::Point(vSearchFrame.cols - 200, 30), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 0, 255), 2, LINE_AA);
										cv::putText(vFirstFrame1, to_string(dPredctedLength), cv::Point(vSearchFrame.cols - 200, 30), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 0, 255), 2, LINE_AA);
									}
									//putText(vSearchFrame, to_string(vCurrFrame.nABPrintLength), cv::Point(ptAB1.x - 150, ptAB1.y + 55), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 255, 0), 1, LINE_AA);

									if (nABFoundCount < 1 || (nABFoundCount >= 1 && nABLenOkToSave == 1))//if (nABFoundCount < 10 || nABLenOkToSave == 0)
									{
										//vResultBuffer1->addFrameWithResult(vSearchFrame(Rect(nABLeftEdgeStart, 0, vSearchFrame.cols - nABLeftEdgeStart, vSearchFrame.rows)).clone(), nFrameCounterAB, ptAB1.x, ptAB1.y, ptAB2.x, ptAB2.y, vCurrFrame.nABPrintLength, dPredctedLength, vCurrFrame.nABPlcCode, 0);
										vResultBuffer1->addFrameWithResult(vFirstFrame1(Rect(nABLeftEdgeStart, 0, vSearchFrame.cols - nABLeftEdgeStart, vSearchFrame.rows)).clone(), nFrameCounterAB, ptAB1.x, ptAB1.y, ptAB2.x, ptAB2.y, vCurrFrame.nABor18PrintLength, vCurrFrame.nABor18TrackingLen, vCurrFrame.nABor18DBLen, dPredctedLength, vCurrFrame.nABor18PlcCode, 0);
										cout << "AB Counter = " << nABFoundCount << "; Frame = " << nFrameCounterAB << "; Length = " << dPredctedLength << "; X1 = " << ptAB1.x << " Y1 = " << ptAB1.y << " X2 = " << ptAB2.x << " Y2 = " << ptAB2.y << "\n";
										vLogger->WriteCam1Log("runConsumer1 : AB Counter = " + to_string(nABFoundCount) + "; Frame = " + to_string(nFrameCounterAB) + "; Length = " + to_string(dPredctedLength) + " -- added to result", logtype::severity_level::info);

										nABFoundCount = nABFoundCount + 1;
										/*if (nABFoundCount == 0)
										{
											nABFoundCount = 1;
										}*/

										nPrevABReadLen = dPredctedLength;
										ptABPrev1.x = ptAB1.x;
										ptABPrev1.y = ptAB1.y;
										ptABPrev2.x = ptAB2.x;
										ptABPrev2.y = ptAB2.y;
									}
									//cout << "Counter2 = " << nFrameCounter << "; vResultBuffer1 Size = " << vResultBuffer1->GetSize() << "; Length = " << dPredctedLength << "\n";

									//nPrevABReadLen = dPredctedLength;
									/*ptABPrev1.x = ptAB1.x;
									ptABPrev1.y = ptAB1.y;
									ptABPrev2.x = ptAB2.x;
									ptABPrev2.y = ptAB2.y;*/

									//cout << "AB Counter = " << nFrameCounterAB << "; Length = " << dPredctedLength << "; X1 = " << ptABPrev1.x << " Y1 = " << ptABPrev1.y << " X2 = " << ptABPrev2.x << " Y2 = " << ptABPrev2.y << "\n";
									//vLogger->WriteCam1Log("AB Counter = " + to_string(nABFoundCount) + "; Frame = " + to_string(nFrameCounterAB) + "; Length = " + to_string(dPredctedLength) + "; X1 = " + to_string(ptABPrev1.x) + "; Y1 = " + to_string(ptABPrev1.y) + "; X2 = " + to_string(ptABPrev2.x) + "; Y2 = " + to_string(ptABPrev2.y), logtype::severity_level::error);

								}
							}

							if (nPrevABReadLen > 0)
							{
								//if (std::abs(vCurrFrame.nABPrintLength - nPrevABReadLen) <= CAM1_WARN_LEN_DIFF)
								if ((vCurrFrame.nABor18PrintLength >= nPrevABReadLen && vCurrFrame.nABor18PrintLength - nPrevABReadLen <= CAM1_WARN_LEN_DIFF_NEG) || (nPrevABReadLen > vCurrFrame.nABor18PrintLength && nPrevABReadLen - vCurrFrame.nABor18PrintLength <= CAM1_WARN_LEN_DIFF_POS))
								{
									line(vSearchFrame, ptABPrev1, ptABPrev2, Scalar(0, 255, 0), 1, 8);
								}
								else
								{
									line(vSearchFrame, ptABPrev1, ptABPrev2, Scalar(0, 0, 255), 1, 8);
								}
								//cv::rectangle(vSearchFrame, cv::Point(saleRect.x, saleRect.y), cv::Point(saleRect.x + saleRect.width, saleRect.y + saleRect.height), Scalar(0, 255, 0), 1, 8);
								if (nPrevABReadLen > 3000)
								{
									cv::putText(vSearchFrame, to_string(nPrevABReadLen), cv::Point(vSearchFrame.cols - 200, 30), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 255, 0), 2, LINE_AA);//cv::Point(ptABPrev1.x - 150, 50)
								}
								else
								{
									cv::putText(vSearchFrame, to_string(nPrevABReadLen), cv::Point(vSearchFrame.cols - 200, 30), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 0, 255), 2, LINE_AA);
								}
							}

						}

						//cv::namedWindow("BGSubtract-AB", WINDOW_NORMAL);
						//cv::imshow("BGSubtract-AB", vBGFrameAB);
					}
				}
				/*else
				{
					if (nBGFrameCaptured == 0)
					{
						cout << ctime(&timev) << "\nBG frame not captured for AB\n";
						vLogger->WriteCam1Log("BG Frame not captured for AB", logtype::severity_level::error);
					}
				}*/

#pragma endregion BackGroundSubtractionAB

			}

#pragma region SavingImages


#pragma region CreatingDayWiseFolder

			if (sPrevTimeString.length() == 0 || (nPrevABPrintLen > 0 && vCurrFrame.nABor18PrintLength == 0) || (nPrevCDPrintLen > 0 && vCurrFrame.nCDPrintLength == 0))
			{
				timev = time(0);
				std::strftime(timebuff, 100, "%Y_%m_%d", localtime(&timev));

				sCurSavePath1.assign("C:\\Level-3\\ImageLib\\AB\\");
				sCurSavePath1.append(timebuff);

				sCurSavePath2.assign("C:\\Level-3\\ImageLib\\CD\\");
				sCurSavePath2.append(timebuff);

				if (sPrevTimeString.compare(timebuff) != 0)
				{
					if (makePath(sCurSavePath1))
					{
						cout << "Today's folder created for AB" << endl;
						vLogger->WriteERRLog("Today's folder created for Stacker AB", logtype::severity_level::info);
					}


					if (makePath(sCurSavePath2))
					{
						cout << "Today's folder created for CD" << endl;
						vLogger->WriteERRLog("Today's folder created for Stacker CD", logtype::severity_level::info);
					}
				}

				sPrevTimeString.assign(timebuff);
			}

#pragma endregion CreatingDayWiseFolder

			if (nPrevABPrintLen > 0 && vCurrFrame.nABor18PrintLength == 0)
			{
				int nFrameBufferSize = vResultBuffer1->GetSize();

				/*nFrameBufferSize = vProducerBuffer1->GetSize();
				std::cout << "vProducerBuffer1 Size = " << nFrameBufferSize << "\n";
				nFrameBufferSize = vDisplayBuffer->GetSize();
				std::cout << "vDisplayBuffer Size = " << nFrameBufferSize << "\n";*/

				//std::cout << "Save AB - vResultBuffer1 Size = " << nFrameBufferSize << "\n";

				sCurSavePath1.append("\\AB_");
				//sCurSavePath1.assign("C:\\Level-3\\ImageLib\\AB\\AB_");
				timev = time(0);

				std::strftime(timebuff, 100, "%Y%m%d%H%M%S", localtime(&timev));
				sCurSavePath1.append(timebuff);

				if (nFrameBufferSize > 0)
				{
					nResValue = vResultBuffer1->updatePLCCode(0, nABCodePLC);

					MatWithResult vResult = vResultBuffer1->deleteFrame(0);

					if (nResValue > 0)
					{
						cv::putText(vResult.vMat, "Code = " + to_string(nABCodePLC), cv::Point(vResult.vMat.cols - 1700, vResult.vMat.rows - 5), FONT_HERSHEY_COMPLEX, 0.75, Scalar(0, 255, 0), 2, LINE_AA);
					}

					if (vResult.nDBLen > 0 && vResult.nDBLen != vResult.nTrackingLen)
					{
						vPlcClient1->nWarning1 = 2;
						sCurSavePath1.append("_" + std::to_string(vResult.nPlcCode) + "_" + std::to_string(vResult.nDBLen) + "_" + std::to_string(vResult.nTrackingLen) + "_TRK");
						//sCurSavePath1.append("_TRK");
						cv::putText(vResult.vMat, "Length Mismatch. PLC Len = " + to_string(vResult.nTrackingLen), cv::Point(vResult.vMat.cols - 730, vResult.vMat.rows - 5), FONT_HERSHEY_COMPLEX, 0.75, Scalar(0, 0, 255), 2, LINE_AA);
					}
					else
					{
						sCurSavePath1.append("_" + std::to_string(vResult.nPlcCode) + "_" + std::to_string(vResult.nPrintLen) + "_" + std::to_string(vResult.nReadLen));
					}

					if (nPrevABReadLen > 0)
					{
						if (vResult.nReadLen > 0)
						{
							//if (std::abs(vResult.nReadLen - vResult.nPrintLen) > CAM1_WARN_LEN_DIFF)
							//if (((vResult.nReadLen <= vResult.nPrintLen) && (vResult.nPrintLen - vResult.nReadLen) > 100) || ((vResult.nReadLen > vResult.nPrintLen) && (vResult.nReadLen - vResult.nPrintLen) > CAM1_WARN_LEN_DIFF))
							if ((vResult.nPrintLen >= vResult.nReadLen && vResult.nPrintLen - vResult.nReadLen > CAM1_WARN_LEN_DIFF_NEG) || (vResult.nReadLen > vResult.nPrintLen && vResult.nReadLen - vResult.nPrintLen > CAM1_WARN_LEN_DIFF_POS))
							{
								vSavingFrame1 = vResult.vMat.clone();
								UpdateABResults(-1);
								nRefreshScreen = 1;
								sCurSavePath1.append("_WARN");
								if (STKAB_WRITE_TO_PLC == 1)
								{
									vPlcClient1->nWarning1 = 1;
									cout << "AB alarm sent to PLC. Print Len = " << vResult.nPrintLen << "; Read Len =" << vResult.nReadLen << "; Diff = " << std::abs(vResult.nReadLen - vResult.nPrintLen) << "\n";
									vLogger->WriteCam1Log("runConsumer1 : AB alarm sent to PLC. Print Len = " + to_string(vResult.nPrintLen) + "; Read Len = " + to_string(vResult.nReadLen) + "; Diff = " + to_string(std::abs(vResult.nReadLen - vResult.nPrintLen)), logtype::severity_level::warning);
								}
								else
								{
									vPlcClient1->nWarning1 = 1;
									cout << "AB alarm NOT sent to PLC. Print Len = " << vResult.nPrintLen << "; Read Len =" << vResult.nReadLen << "; Diff = " << std::abs(vResult.nReadLen - vResult.nPrintLen) << "\n";
									vLogger->WriteCam1Log("runConsumer1 : AB alarm not sent to PLC. Print Len = " + to_string(vResult.nPrintLen) + "; Read Len = " + to_string(vResult.nReadLen) + "; Diff = " + to_string(std::abs(vResult.nReadLen - vResult.nPrintLen)), logtype::severity_level::warning);
								}

							}
							else
							{
								UpdateABResults(1);
								nRefreshScreen = 1;

								vPlcClient1->nWarning1 = 0;
								cout << "OK image saved for AB. Print Len = " << vResult.nPrintLen << "; Read Len =" << vResult.nReadLen << "; Diff = " << std::abs(vResult.nReadLen - vResult.nPrintLen) << "\n";
								vLogger->WriteCam1Log("runConsumer1 : OK image saved for AB. Print Len = " + to_string(vResult.nPrintLen) + "; Read Len = " + to_string(vResult.nReadLen) + "; Diff = " + to_string(std::abs(vResult.nReadLen - vResult.nPrintLen)), logtype::severity_level::info);
							}
							sCurSavePath1.append(".jpg");

							cv::imwrite(sCurSavePath1, vResult.vMat);


							/*if (nPrevABPrintLen > 15400)
							{
								cv::imwrite(sCurSavePath1, vResult.vMat);
							}
							else
							{
								cv::imwrite(sCurSavePath1, vResult.vMat(Rect(nABLeftEdgeStart, 0, vSearchFrame.cols - nABLeftEdgeStart, vSearchFrame.rows)));
							}*/

						}
					}
					else
					{
						UpdateABResults(0);
						nRefreshScreen = 1;
						vPlcClient1->nWarning1 = 0;
						cout << "Stk AB - no length detected. Saving Error image result. \n";
						vLogger->WriteCam1Log("runConsumer1 : Stk AB - no length detected. Saving Error image result", logtype::severity_level::error);
						sCurSavePath1.append("_NOREAD.jpg");
						cv::imwrite(sCurSavePath1, ErrorFrame1);
					}
				}
				else
				{
					UpdateABResults(0);
					nRefreshScreen = 1;
					vPlcClient1->nWarning1 = 0;
					cout << "Stk AB Buffer empty. Saving Error image result. \n";
					vLogger->WriteCam1Log("runConsumer1 : Stk AB Buffer empty. Saving Error image result", logtype::severity_level::error);

					sCurSavePath1.append("_" + std::to_string(nABCodePLC) + "_" + std::to_string(nPrevABPrintLen) + "_0_NOREAD.jpg");

					//vSavingFrame1 = ErrorFrame1.clone();
					cv::imwrite(sCurSavePath1, ErrorFrame1);
				}

				nABdatabaseLen = 0;
				nABCodePLC = 0;
				ptABPrev1.x = 0;
				ptABPrev1.y = 0;
				ptABPrev2.x = 0;
				ptABPrev2.y = 0;
				nPrevABReadLen = 0;
				nABFoundCount = 0;
				nABLenOkToSave = 0;


			}


			if (nPrevCDPrintLen > 0 && vCurrFrame.nCDPrintLength == 0)
			{
				int nFrameBufferSize = vResultBuffer1->GetSize();
				//std::cout << "Save CD - vResultBuffer1 Size = " << nFrameBufferSize << "\n";

				sCurSavePath2.append("\\CD_");

				//sCurSavePath1.assign("C:\\Level-3\\ImageLib\\CD\\CD_");
				timev = time(0);
				std::strftime(timebuff, 100, "%Y%m%d%H%M%S", localtime(&timev));
				sCurSavePath2.append(timebuff);

				if (nFrameBufferSize > 1 && nPrevCDReadLen > 0)
				{
					nResValue = vResultBuffer1->updatePLCCode(1, nCDCodePLC);
					MatWithResult vResult = vResultBuffer1->deleteFrame(1);

					if (nResValue > 0)
					{
						cv::putText(vResult.vMat, "Code = " + to_string(nCDCodePLC), cv::Point(130, vResult.vMat.rows - 5), FONT_HERSHEY_COMPLEX, 0.75, Scalar(0, 255, 0), 2, LINE_AA);
					}

					if (vResult.nDBLen > 0 && vResult.nTrackingLen > 0 && vResult.nDBLen != vResult.nTrackingLen)
					{
						vPlcClient1->nWarning2 = 2;
						sCurSavePath2.append("_" + std::to_string(vResult.nPlcCode) + "_" + std::to_string(vResult.nDBLen) + "_" + std::to_string(vResult.nTrackingLen) + "_TRK");
						//sCurSavePath2.append("_TRK");
						cv::putText(vResult.vMat, "Length Mismatch. PLC Len = " + to_string(vResult.nTrackingLen), cv::Point(1100, vResult.vMat.rows - 5), FONT_HERSHEY_COMPLEX, 0.75, Scalar(0, 0, 255), 2, LINE_AA);
					}
					else
					{
						sCurSavePath2.append("_" + std::to_string(vResult.nPlcCode) + "_" + std::to_string(vResult.nPrintLen) + "_" + std::to_string(vResult.nReadLen));
					}
					if (nPrevCDReadLen > 0)
					{
						if (vResult.nReadLen > 0)
						{
							//if (std::abs(vResult.nReadLen - vResult.nPrintLen) > CAM1_WARN_LEN_DIFF)
							if ((vResult.nPrintLen >= vResult.nReadLen && vResult.nPrintLen - vResult.nReadLen > CAM1_WARN_LEN_DIFF_NEG) || (vResult.nReadLen > vResult.nPrintLen && vResult.nReadLen - vResult.nPrintLen > CAM1_WARN_LEN_DIFF_POS))
							{
								vSavingFrame2 = vResult.vMat(Rect(0, 0, 2100, vSearchFrame.rows)).clone();
								UpdateCDResults(-1);
								nRefreshScreen = 1;
								sCurSavePath2.append("_WARN");
								if (STKCD_WRITE_TO_PLC == 1)
								{
									vPlcClient1->nWarning2 = 1;
									cout << "CD alarm sent to PLC. Print Len = " << vResult.nPrintLen << "; Read Len =" << vResult.nReadLen << "; Diff = " << std::abs(vResult.nReadLen - vResult.nPrintLen) << "\n";
									vLogger->WriteCam2Log("runConsumer1 : CD alarm sent to PLC. Print Len = " + to_string(vResult.nPrintLen) + "; Read Len = " + to_string(vResult.nReadLen) + "; Diff = " + to_string(std::abs(vResult.nReadLen - vResult.nPrintLen)), logtype::severity_level::warning);
								}
								else
								{
									vPlcClient1->nWarning2 = 1;
									cout << "CD alarm NOT sent to PLC. Print Len = " << vResult.nPrintLen << "; Read Len =" << vResult.nReadLen << "; Diff = " << std::abs(vResult.nReadLen - vResult.nPrintLen) << "\n";
									vLogger->WriteCam2Log("runConsumer1 : CD alarm not sent to PLC. Print Len = " + to_string(vResult.nPrintLen) + "; Read Len = " + to_string(vResult.nReadLen) + "; Diff = " + to_string(std::abs(vResult.nReadLen - vResult.nPrintLen)), logtype::severity_level::warning);
								}
							}
							else
							{
								UpdateCDResults(1);
								nRefreshScreen = 1;
								vPlcClient1->nWarning2 = 0;
								cout << "OK image saved for CD. Print Len = " << vResult.nPrintLen << "; Read Len =" << vResult.nReadLen << "; Diff = " << std::abs(vResult.nReadLen - vResult.nPrintLen) << "\n";
								vLogger->WriteCam2Log("runConsumer1 : OK image saved for CD. Print Len = " + to_string(vResult.nPrintLen) + "; Read Len = " + to_string(vResult.nReadLen) + "; Diff = " + to_string(std::abs(vResult.nReadLen - vResult.nPrintLen)), logtype::severity_level::info);


							}
							sCurSavePath2.append(".jpg");

							cv::imwrite(sCurSavePath2, vResult.vMat(Rect(0, 0, 2100, vSearchFrame.rows)));
						}
					}
					else
					{
						UpdateCDResults(0);
						nRefreshScreen = 1;
						vPlcClient1->nWarning2 = 0;
						cout << "Stk CD - no length detected. Saving Error image result. \n";
						vLogger->WriteCam2Log("runConsumer1 : Stk CD - no length detected. Saving Error image result", logtype::severity_level::error);
						sCurSavePath2.append("_NOREAD.jpg");
						cv::imwrite(sCurSavePath2, ErrorFrame2);

					}
				}
				else
				{
					UpdateCDResults(0);
					nRefreshScreen = 1;
					vPlcClient1->nWarning2 = 0;
					cout << "Stk CD Buffer empty. Saving Error image result. \n";
					vLogger->WriteCam2Log("runConsumer1 : Stk CD Buffer empty. Saving Error image result", logtype::severity_level::error);

					sCurSavePath2.append("_" + std::to_string(nCDCodePLC) + "_" + std::to_string(nPrevCDPrintLen) + "_0_NOREAD.jpg");

					//vSavingFrame2 = ErrorFrame2.clone();
					cv::imwrite(sCurSavePath2, ErrorFrame2);
				}

				nCDCodePLC = 0;
				nCDdatabaseLen = 0;
				ptCDPrev1.x = 0;
				ptCDPrev1.y = 0;
				ptCDPrev2.x = 0;
				ptCDPrev2.y = 0;
				nPrevCDReadLen = 0;
				nCDFoundCount = 0;
				nCDLenOkToSave = 0;


			}

#pragma endregion


			nPrevABPrintLen = vCurrFrame.nABor18PrintLength;
			nPrevCDPrintLen = vCurrFrame.nCDPrintLength;
			nDisplayCount = nDisplayCount + 1;

			if (nDisplayCount == 5 || nRefreshScreen > 0)
			{
				vDisplayBuffer->addDisplayFrames(0, vDisplayFrame, vSearchFrame, vSavingFrame1, vSavingFrame2, nRefreshScreen);
				nDisplayCount = 0;
				nRefreshScreen = 0;
			}

			bGetNextFrame = true;
			//cv::waitKey(1);
			continue;

#pragma	region	BGSubtract

			//cvtColor(vSearchFrame, vGrayFrame, CV_RGB2GRAY);
			//vHistoryFrames.addFrame(vGrayFrame.clone());
			//if (vHistoryFrames.GetSize() < 20)
			//{
			//	continue;
			//}

			//vBackGround = vHistoryFrames.deleteFrame();
			////subtract(vGrayFrame, vBackGround, vResFrame);
			//absdiff(vGrayFrame, vBackGround, vResFrame);
			//cv::threshold(vResFrame, vResFrame, 75, 255, CV_THRESH_BINARY);
#pragma endregion BGSubtract



			////if (!nFirstMap1)
			////{

			////	pt11.x = 0;
			////	pt11.y = (vCurrFrame.rows / 2.0) - 25;

			////	pt12.x = vCurrFrame.cols;
			////	pt12.y = pt11.y;

			////	pt21.x = pt11.x;
			////	pt21.y = pt11.y + 50;

			////	pt22.x = pt12.x;
			////	pt22.y = pt21.y;

			////	// FULL HD		
			////	/*cv::Mat K = (cv::Mat_<float>(3, 3) <<
			////		2.1803169714475343e+03, 0., 1.9523969207050211e+03,
			////		0, 2.1637747750188760e+03, 1.0579767414344151e+03,
			////		0., 0., 1.);

			////	cv::Mat D = (cv::Mat_<float>(5, 1) << -3.5190755491871017e-01, 1.4581210441199241e-01,
			////		-8.7518522721636237e-04, -9.7262557344803438e-05,
			////		-3.1998581727515872e-02);*/


			////	cv::Mat K = (cv::Mat_<float>(3, 3) <<
			////		2.1889849827489820e+03, 0., 1.9450360366919406e+03,
			////		0, 2.1720570942779309e+03, 1.0511788424964975e+03,
			////		0., 0., 1.);

			////	cv::Mat D = (cv::Mat_<float>(5, 1) << -3.8545489103804492e-01, 2.4136599173689030e-01,
			////		-1.1448345517785551e-04, 1.7864997157356698e-04,
			////		-1.0275295487090606e-01);

			////	cv::initUndistortRectifyMap(K, D, cv::Mat::eye(3, 3, CV_32FC1), K, vCurrFrame.size(), CV_16SC2, map11, map21);

			////	nFirstMap1 = 1;
			////}



			////cv::remap(vCurrFrame, vCurrResFrame, map11, map21, cv::INTER_LINEAR);



			//	/*

			//vRightGpuFrame = vGrayGpuFrame.clone();
			//	vLeftGpuFrame = vGrayGpuFrame.clone();
			//	vRightGpuFrame = vRightGpuFrame(cv::Rect(CAM1_RFRAME_X, CAM1_RFRAME_Y - CAM1_SEARCHTOP, CAM1_RFRAME_WIDTH, CAM1_RFRAME_HEIGHT));

			//	//cv::Ptr<cuda::CannyEdgeDetector> canny_eg = cuda::createCannyEdgeDetector(0, 255, 3, 0);
			//	//canny_eg->detect(vGrayFrame, vResFrame);

			//	nABRightThreshold = getAveragePixelValue(vGrayGpuFrame, 3295, 50, 20, 20);
			//	cv::rectangle(vSearchFrame, cv::Point(3295, 50), cv::Point(3315, 70), Scalar(0, 255, 0), 2, 8);

			//	if (nABRightThreshold > 0)
			//	{
			//		cuda::threshold(vGrayGpuFrame, vTreshGpuFrameAB, nABRightThreshold + 30, 255, cv::THRESH_BINARY);
			//	}
			//	else
			//	{
			//		cuda::threshold(vGrayGpuFrame, vTreshGpuFrameAB, 110, 255, cv::THRESH_BINARY);
			//	}


			//	nCDLeftThreshold = getAveragePixelValue(vGrayGpuFrame, 1350, 65, 20, 20);//1833,54
			//	cv::rectangle(vSearchFrame, cv::Point(1350, 65), cv::Point(1370, 85), Scalar(0, 255, 0), 2, 8);
			//	if (nCDLeftThreshold > 0)
			//	{
			//		cuda::threshold(vGrayGpuFrame, vTreshGpuFrameCD, nCDLeftThreshold + 10, 255, cv::THRESH_BINARY);

			//	}
			//	else
			//	{
			//		cuda::threshold(vGrayGpuFrame, vTreshGpuFrameCD, 100, 255, cv::THRESH_BINARY_INV);
			//	}

			//	putText(vSearchFrame, to_string(vCurrFrame.nABPrintLength) + " | " + to_string(nABRightThreshold), cv::Point((vCurrFrame.vMat.cols / 2) + 100, 25), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 255, 0), 2, LINE_AA);
			//	putText(vSearchFrame, to_string(vCurrFrame.nCDPrintLength) + " | " + to_string(nCDLeftThreshold), cv::Point(200, 25), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 255, 0), 2, LINE_AA);

			//	vTreshGpuFrameAB.download(vCurrResFrame);

			//	cv::namedWindow("ABThreshold", WINDOW_NORMAL);
			//	cv::imshow("ABThreshold", vCurrResFrame);
			//	*/
			//	//
			//	//#pragma region	DetectingSaleAB
			//	//
			//	//				if (vCurrFrame.nABPrintLength > 0 && 1 == 2)
			//	//				{
			//	//
			//	//					if (nPrevABPrintLen == 0)
			//	//					{
			//	//						ErrorFrame1 = vSearchFrame.clone();
			//	//					}
			//	//
			//	//					saleRect.x = 0;
			//	//					saleRect.y = 0;
			//	//					saleRect.width = 0;
			//	//					saleRect.height = 0;
			//	//
			//	//					nSaleABDetected = 0;
			//	//					nSaleABDetected = detectABSale(vCurrResFrame, vSearchFrame, saleRect);
			//	//
			//	//
			//	//					if (nSaleABDetected > 0)
			//	//					{
			//	//						////vRightFrame
			//	//						//cv::GaussianBlur(vRightFrame, vRightFrame, cv::Size(3, 3), 0);
			//	//						//cvtColor(vRightFrame, vRightFrame, COLOR_RGB2GRAY);
			//	//						//threshold(vRightFrame, vRightFrame, 100, 255, CV_THRESH_BINARY);
			//	//
			//	//						/*cv::Ptr<cuda::CannyEdgeDetector> canny_eg = cuda::createCannyEdgeDetector(0, 255, 3, 0);
			//	//						canny_eg->detect(vRightGpuFrame, vRightGpuCanny);
			//	//
			//	//						vRightGpuCanny.download(vRightCanny);*/
			//	//
			//	//						vRightGpuFrame.download(vRightFrame);
			//	//
			//	//						nABRightThreshold = getABRightFrameThreshold(vRightFrame);
			//	//						//cout << "nABRightThreshold = " << nABRightThreshold << "\n";
			//	//
			//	//						threshold(vRightFrame, vRightFrame, nABRightThreshold + 10, 255, THRESH_BINARY);
			//	//						/*cuda::threshold(vRightGpuFrame, vRightGpuFrame, 100, 255, cv::THRESH_BINARY);
			//	//						vRightGpuFrame.download(vRightFrame);*/
			//	//
			//	//						/*for (int i = 0; i < vRightFrame.cols; i++)
			//	//						{
			//	//							vRightFrame.at<uchar>(18, i) = 255;
			//	//							vRightFrame.at<uchar>(32, i) = 255;
			//	//						}*/
			//	//
			//	//						for (int i = 0; i < vRightFrame.cols; i++)
			//	//						{
			//	//							vRightFrame.at<uchar>(11, i) = 255;
			//	//							vRightFrame.at<uchar>(32, i) = 255;
			//	//						}
			//	//
			//	//						cv::namedWindow("vRightFrame", WINDOW_NORMAL);
			//	//						cv::imshow("vRightFrame", vRightFrame);
			//	//
			//	//						nABRightEdge = 0;
			//	//						nABRightEdge = detectABSaleRightEdge(vRightFrame);
			//	//
			//	//						if (nABRightEdge > 0)
			//	//						{
			//	//							//cout << "\nLeft Edge = " << saleRect.x << "\t; Right Edge = " << (CAM1_RFRAME_X + nABRightEdge);
			//	//
			//	//							dPredctedLength = 0;
			//	//
			//	//							dPredctedLength = GetPredictedLength(1, 0.65, 0.35, saleRect.x, saleRect.y, (CAM1_RFRAME_X + nABRightEdge), (saleRect.y + saleRect.height));
			//	//							if (std::abs(vCurrFrame.nABPrintLength - nPrevABReadLen) > std::abs(vCurrFrame.nABPrintLength - dPredctedLength))
			//	//							{
			//	//								cv::rectangle(vSearchFrame, cv::Point(saleRect.x, saleRect.y), cv::Point(CAM1_RFRAME_X + nABRightEdge, saleRect.y + saleRect.height), Scalar(0, 255, 0), 1, 8);
			//	//								if (dPredctedLength > 5000)
			//	//								{
			//	//									putText(vSearchFrame, to_string(dPredctedLength), cv::Point(saleRect.x - 100, saleRect.y), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 255, 0), 1, LINE_AA);
			//	//								}
			//	//								else
			//	//								{
			//	//									putText(vSearchFrame, to_string(dPredctedLength), cv::Point(saleRect.x - 100, saleRect.y), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 0, 255), 1, LINE_AA);
			//	//								}
			//	//
			//	//								putText(vSearchFrame, to_string(vCurrFrame.nABPrintLength), cv::Point(saleRect.x - 100, saleRect.y + 25), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 255, 0), 1, LINE_AA);
			//	//
			//	//								vResultBuffer1->addFrameWithResult(vSearchFrame, nFrameCounterAB, saleRect.x, saleRect.y, CAM1_RFRAME_X + nABRightEdge, saleRect.y + saleRect.height, vCurrFrame.nABPrintLength, dPredctedLength, vCurrFrame.nABPlcCode, 0);
			//	//
			//	//								nPrevABReadLen = dPredctedLength;
			//	//								rectABPrev.x = saleRect.x;
			//	//								rectABPrev.y = saleRect.y;
			//	//								rectABPrev.width = (CAM1_RFRAME_X + nABRightEdge) - saleRect.x;
			//	//								rectABPrev.height = saleRect.height;
			//	//
			//	//								cout << "Threshold = " << nABRightThreshold << "; Right Edge at = " << nABRightEdge << "\n";
			//	//								vLogger->WriteCam1Log("AB Right Edge Threshold = " + to_string(nABRightThreshold) + " ; Edge at = " + to_string(nABRightEdge), logtype::severity_level::error);
			//	//								cout << "AB Counter = " << nFrameCounterAB << "; Length = " << dPredctedLength << "; X = " << rectABPrev.x << " Y = " << rectABPrev.y << " Width = " << rectABPrev.width << " Height = " << rectABPrev.height << "\n";
			//	//								vLogger->WriteCam1Log("AB Counter = " + to_string(nFrameCounterAB) + "; Length = " + to_string(dPredctedLength) + "; X = " + to_string(rectABPrev.x) + "; Y = " + to_string(rectABPrev.y) + "; Width = " + to_string(rectABPrev.width) + "; Height = " + to_string(rectABPrev.height), logtype::severity_level::error);
			//	//
			//	//							}
			//	//						}
			//	//					}
			//	//
			//	//					if (nPrevABReadLen > 0)
			//	//					{
			//	//						cv::rectangle(vSearchFrame, cv::Point(rectABPrev.x, rectABPrev.y), cv::Point(rectABPrev.x + rectABPrev.width, rectABPrev.y + rectABPrev.height), Scalar(0, 255, 0), 1, 8);
			//	//						if (nPrevABReadLen > 5000)
			//	//						{
			//	//							putText(vSearchFrame, to_string(nPrevABReadLen), cv::Point(rectABPrev.x - 100, rectABPrev.y), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 255, 0), 1, LINE_AA);
			//	//						}
			//	//						else
			//	//						{
			//	//							putText(vSearchFrame, to_string(nPrevABReadLen), cv::Point(rectABPrev.x - 100, rectABPrev.y), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 0, 255), 1, LINE_AA);
			//	//						}
			//	//					}
			//	//					/*namedWindow("vRightFrame", WINDOW_NORMAL);
			//	//					imshow("vRightFrame", vRightFrame);*/
			//	//				}
			//	//
			//	//#pragma endregion DetectingSaleAB
			//	//
			//	//#pragma region DetectingSaleCD
			//	//				if (vCurrFrame.nCDPrintLength > 0 && 1 == 2)
			//	//				{
			//	//					vTreshGpuFrameCD.download(vCurrResFrame);
			//	//
			//	//					cv::namedWindow("CDThreshold", WINDOW_NORMAL);
			//	//					cv::imshow("CDThreshold", vCurrResFrame);
			//	//
			//	//					if (nPrevCDPrintLen == 0)
			//	//					{
			//	//						ErrorFrame2 = vSearchFrame.clone();
			//	//					}
			//	//
			//	//					saleRect.x = 0;
			//	//					saleRect.y = 0;
			//	//					saleRect.width = 0;
			//	//					saleRect.height = 0;
			//	//
			//	//					nSaleCDDetected = 0;
			//	//					nSaleCDDetected = detectCDSale(vCurrResFrame, vSearchFrame, saleRect);
			//	//
			//	//					if (nSaleCDDetected > 0)
			//	//					{
			//	//						cv::rectangle(vSearchFrame, cv::Point(saleRect.x + 1200, saleRect.y), cv::Point(saleRect.x + 1200 + saleRect.width, saleRect.y + saleRect.height), Scalar(0, 255, 0), 1, 8);
			//	//						//cout << "CD Sale Detected" << "\n";
			//	//						vLeftGpuFrame = vLeftGpuFrame(cv::Rect(200, 40, saleRect.x + 1200 + saleRect.width - 200, 50));
			//	//
			//	//						vLeftGpuFrame.download(vLeftFrame);
			//	//
			//	//						//nCDLeftThreshold = getCDLeftFrameThreshold(vLeftFrame);
			//	//						//cout << "nCDLeftThreshold = " << nCDLeftThreshold << "\n";
			//	//						//Canny(vLeftFrame, vLeftFrame, 0, 255, 3, 1);
			//	//						threshold(vLeftFrame, vLeftFrame, nCDLeftThreshold, 255, THRESH_BINARY);
			//	//
			//	//						nCDLeftEdge = 0;
			//	//						nCDLeftEdge = detectCDSaleLeftEdge(vLeftFrame);
			//	//
			//	//						if (nCDLeftEdge > 0 && 1 == 2)
			//	//						{
			//	//							//cout << "\nLeft Edge = " << saleRect.x << "\t; Right Edge = " << (CAM1_RFRAME_X + nABRightEdge);
			//	//
			//	//
			//	//							dPredctedLength = 0;
			//	//
			//	//							dPredctedLength = GetPredictedLength(2, 0.85, 0.15, nCDLeftEdge + 200, saleRect.y, (saleRect.x + saleRect.width), (saleRect.y + saleRect.height));
			//	//
			//	//							if (std::abs(vCurrFrame.nCDPrintLength - nPrevCDReadLen) > std::abs(vCurrFrame.nCDPrintLength - dPredctedLength))
			//	//							{
			//	//								cv::rectangle(vSearchFrame, cv::Point(nCDLeftEdge + 200, saleRect.y), cv::Point(saleRect.x + saleRect.width, saleRect.y + saleRect.height), Scalar(0, 255, 0), 1, 8);
			//	//								if (dPredctedLength > 9000)
			//	//								{
			//	//
			//	//									putText(vSearchFrame, to_string(dPredctedLength), cv::Point(nCDLeftEdge + 100, saleRect.y), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 255, 0), 1, LINE_AA);
			//	//								}
			//	//								else
			//	//								{
			//	//									putText(vSearchFrame, to_string(dPredctedLength), cv::Point(nCDLeftEdge + 100, saleRect.y), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 0, 255), 1, LINE_AA);
			//	//								}
			//	//
			//	//								putText(vSearchFrame, to_string(vCurrFrame.nCDPrintLength), cv::Point(nCDLeftEdge + 100, saleRect.y + 25), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 255, 0), 1, LINE_AA);
			//	//
			//	//
			//	//								nCDFoundCount = nCDFoundCount + 1;
			//	//
			//	//								if (nCDFoundCount < 5)
			//	//								{
			//	//									vResultBuffer1->addFrameWithResult(vSearchFrame, nFrameCounterCD, nCDLeftEdge + 200, saleRect.y, saleRect.x + saleRect.width, saleRect.y + saleRect.height, vCurrFrame.nCDPrintLength, dPredctedLength,vCurrFrame.nCDPlcCode, 1);
			//	//								}
			//	//
			//	//								//cout << "Counter2 = " << nFrameCounter << "; vResultBuffer1 Size = " << vResultBuffer1->GetSize() << "; Length = " << dPredctedLength << "\n";
			//	//
			//	//								nPrevCDReadLen = dPredctedLength;
			//	//								rectCDPrev.x = nCDLeftEdge + 200;
			//	//								rectCDPrev.y = saleRect.y;
			//	//								rectCDPrev.width = saleRect.width;
			//	//								rectCDPrev.height = saleRect.height;
			//	//
			//	//								cout << "Threshold = " << nCDLeftThreshold << "; Left Edge at = " << nCDLeftEdge << "\n";
			//	//								vLogger->WriteCam1Log("CD Left Edge Threshold = " + to_string(nCDLeftThreshold) + " ; Edge at = " + to_string(nCDLeftEdge), logtype::severity_level::error);
			//	//								cout << "CD Counter = " << nFrameCounterCD << "; Length = " << dPredctedLength << "; X = " << rectCDPrev.x << " Y = " << rectCDPrev.y << " Width = " << rectCDPrev.width << " Height = " << rectCDPrev.height << "\n";
			//	//								vLogger->WriteCam1Log("AB Counter = " + to_string(nFrameCounterCD) + "; Length = " + to_string(dPredctedLength) + "; X = " + to_string(rectCDPrev.x) + "; Y = " + to_string(rectCDPrev.y) + "; Width = " + to_string(rectCDPrev.width) + "; Height = " + to_string(rectCDPrev.height), logtype::severity_level::error);
			//	//
			//	//							}
			//	//						}
			//	//
			//	//						if (nPrevCDReadLen > 0)
			//	//						{
			//	//							cv::rectangle(vSearchFrame, cv::Point(rectCDPrev.x, rectCDPrev.y), cv::Point(rectCDPrev.x + rectCDPrev.width, rectCDPrev.y + rectCDPrev.height), Scalar(0, 255, 0), 1, 8);
			//	//							if (dPredctedLength > 9000)
			//	//							{
			//	//
			//	//								putText(vSearchFrame, to_string(nPrevCDReadLen), cv::Point(rectCDPrev.x - 100, rectCDPrev.y), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 255, 0), 1, LINE_AA);
			//	//							}
			//	//							else
			//	//							{
			//	//								putText(vSearchFrame, to_string(nPrevCDReadLen), cv::Point(rectCDPrev.x - 100, rectCDPrev.y), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 0, 255), 1, LINE_AA);
			//	//							}
			//	//						}
			//	//
			//	//						namedWindow("vLeftFrame", WINDOW_NORMAL);
			//	//						cv::imshow("vLeftFrame", vLeftFrame);
			//	//					}
			//	//				}
			//	//#pragma endregion DetectingSaleCD


		}
	}
	catch (const cv::Exception &e)
	{
		timev = time(0);
		//const char* err_msg = e.what();
		std::cout << ctime(&timev) << " error in runConsumer1." << e.what() << "\n";
	}
	catch (const std::exception &ex)
	{
		timev = time(0);
		std::cout << ctime(&timev) << " error in runConsumer1." << ex.what() << "\n";
	}

}

bool CameraSource::makePath(const std::string & path)
{
	bool bRet = false;
	bRet = std::experimental::filesystem::exists(path);
	if (bRet == false)
	{
		bRet = std::experimental::filesystem::create_directory(path);
	}
	return bRet;
}

void CameraSource::runProducer2()
{
	try
	{
		Mat vFrame1;
		int nFrameCounter1 = 0;
		int n18LenToRead = 0;
		int n18PlcCode = 0;

		int nBufferSize = 0;
		int nIdleCount = 0;

		int n18PrintStatus = 0;
		int nFrameGrabbed = 0;

		while (true)
		{

			vPlcClient1->nNetworkCheck3 = 1;
			//n18PlcCode = vPlcClient1->n18Code;

			if (nFrameCounter1 > 0)
			{
				if (vPlcClient1->n18PrintStart > 0)
				{
					nFrameCounter1 = nFrameCounter1 + 1;

				}
			}
			else
			{
				n18PrintStatus = 0;
				n18LenToRead = 0;
				n18PlcCode = 0;
			}

			if (vPlcClient1->n18PrintStart == 1 && vPlcClient1->n18Length > 0 && n18PrintStatus == 0)
			{
				n18LenToRead = vPlcClient1->n18Length * 10;
				//n18PlcCode = vPlcClient1->n18Code;
				nFrameCounter1 = 1;
				n18PrintStatus = 1;

				timev = time(0);
				cout << "\n" << ctime(&timev) << "Start signal received for reading Stk18 Length = " << n18LenToRead << "\n";
				vLogger->WriteCam3Log("Start signal received for reading Stk18 Length = " + to_string(n18LenToRead), logtype::severity_level::info);

			}

			if (vPlcClient1->n18PrintStart == 1 && vPlcClient1->n18Length > 0 && n18PlcCode == 0 && vPlcClient1->n18Code > 0)
			{
				n18PlcCode = vPlcClient1->n18Code;

				timev = time(0);
				cout << ctime(&timev) << "Stk18 new PLC Code = " << n18PlcCode << endl;
				vLogger->WriteCam3Log("runProducer2 : Stk18 new PLC Code = " + to_string(n18PlcCode) + " ; Frame counter = " + to_string(nFrameCounter1), logtype::severity_level::info);
			}

			if (vPlcClient1->n18PrintStart == 0 && n18PrintStatus == 1)
			{
				nBufferSize = vProducerBuffer2->GetSize();

				timev = time(0);
				cout << ctime(&timev) << "Stop signal received for reading Stk18 Length. Total Frames = " << nFrameCounter1 << " ; vProducerBuffer2 Size = " << nBufferSize << endl;
				vLogger->WriteCam3Log("Stop signal received for reading Stk18 Length. Total Frames = " + to_string(nFrameCounter1) + " ; vProducerBuffer2 Size = " + to_string(nBufferSize), logtype::severity_level::info);

				nFrameCounter1 = 0;
				n18PrintStatus = 0;
				n18LenToRead = 0;
				n18PlcCode = 0;
			}


			if (iDisplayCam2 == 1)
			{
				if (!(vProdCam2Capture->read(vFrame1)))
				{
					cout << "Cam-18 Corrupted Frame \n";
					vPlcClient1->nNetworkCheck3 = 0;
					vLogger->WriteERRLog("Cam-18 corrupted frame", logtype::severity_level::error);
					//throw std::exception();

					cv::waitKey(1);
					break;
				}
			}

			if (nFrameCounter1 > 0)
			{
				/*if (nIdleCount > 150 || (vProducerBuffer2->GetSize() == 400 && nFrameCounter1 > 400))
				{
					vProducerBuffer2->deleteAllFrames(5);
					cout << "Buffer Cleared for 18m stacker cam" << endl;
				}*/
				nIdleCount = 0;

				vGlo18PlcCode = n18PlcCode;

				timev = time(0);
				if (n18PlcCode > 0 && vSkipPlcCode18 == n18PlcCode)
				{
					if ((nFrameCounter1 % 10) == 0)
					{
						vProducerBuffer2->addFrameWithPlc(vFrame1.clone(), nFrameCounter1, 0, n18PrintStatus, n18LenToRead, n18LenToRead, 0, n18PlcCode, 0, 0, 0, 0, 0, timev);
					}
				}
				else
				{
					nBufferSize = vProducerBuffer2->GetSize();

					if (nBufferSize > 50)
					{
						if ((nFrameCounter1 % 2) == 0)
						{
							vProducerBuffer2->addFrameWithPlc(vFrame1.clone(), nFrameCounter1, 0, n18PrintStatus, n18LenToRead, n18LenToRead, 0, n18PlcCode, 0, 0, 0, 0, 0, timev);
						}
					}
					else
					{
						vProducerBuffer2->addFrameWithPlc(vFrame1.clone(), nFrameCounter1, 0, n18PrintStatus, n18LenToRead, n18LenToRead, 0, n18PlcCode, 0, 0, 0, 0, 0, timev);
					}

				}
				//cv::waitKey(1);
			}
			else
			{
				nIdleCount = nIdleCount + 1;
				if ((nIdleCount % 10) == 0)
				{
					timev = time(0);
					vProducerBuffer2->addFrameWithPlc(vFrame1.clone(), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, timev);
				}
				if (nIdleCount > 1000)
				{
					nIdleCount = 0;
					nBufferSize = 0;
					//nBufferSize = vProducerBuffer2->GetSize();
					//std::cout << "vProducerBuffer2 Size = " << nBufferSize << "\n";
					//nBufferSize = vDisplayBuffer->GetSize();
					//std::cout << "vDisplayBuffer Size = " << nBufferSize << "\n";
					vProducerBuffer2->deleteAllFrames(5);
					//std::cout << "Buffer Cleared for 18m stacker cam.. Idle count 1000 \n";
				}
			}

			//cv::waitKey(10);

		}
	}
	catch (const std::exception &ex)
	{
		timev = time(0);
		std::cout << ctime(&timev) << " error in runProducer2." << ex.what() << "\n";
	}
	catch (cv::Exception& e)
	{
		const char* err_msg = e.what();
		std::cout << "\n" << "Opencv Exception caught in runProducer2 :" << err_msg << endl;
	}

	std::exit(0);
}

void CameraSource::runConsumer2()
{
	try
	{
		Mat vSearchFrame;
		Mat vDisplayFrame;

		MatWithPlc vCurrFrame, vMatFrame;
		cuda::GpuMat vCurrGpuFrame;

		Mat vBGFrame18;
		Mat vBGFrameGray;
		cuda::GpuMat vBGGpuFrame18Full;
		cuda::GpuMat vBGGpuFrame18;
		int nBGFrameCaptured = 0;
		int n18FoundCount = 0;

		Mat vRightCanny;

		cuda::GpuMat vGrayGpuFrame;
		cuda::GpuMat vTreshGpuFrame18;
		cuda::GpuMat vTreshFrame1;

		Mat vCurrResFrame;
		cuda::GpuMat hsvFrame;
		cuda::GpuMat hsvChannels[3];
		VideoBuffer vHistoryFrames;

		Rect saleRect;

		int nFirstMap1 = 0;
		Mat map11, map21;

		Point pt11, pt12;
		Point pt21, pt22;
		Point pt1, pt2;
		int nAlt = 0;

		Rect rect18Prev;

		cv::Point pt18Prev1, pt18Prev2;
		cv::Point pt18_1, pt18_2;

		int nFrameCounter18 = 0, nExtraFrameCnt18 = 0;
		int nIsReadFromPLC = 0;
		int nSaleDetected = 0, nNoSaleDetectCount = 0;
		int dPredctedLength = 0;
		bool bResult = false;
		string sCurSavePath1;
		char timebuff[100];

		int nSale18Detected = 0;
		int n18RightEdge = 0;
		int n18RightThreshold = 0;
		int n18LeftEdgeStart = 0;

		int nPrev18PrintLen = 0;
		int nPrev18ReadLen = 0;
		int nStopperReadCount = -1;
		int n18LeftEdgeBlock = 0;
		int n18LenOkToSave = 0;

		Mat ErrorFrame1;
		Mat ErrorFrame2;
		Mat vFirstFrame1;
		Mat vSavingFrame1;
		int nRefreshScreen = 0, nSkip18Frames = 0;
		int n18CodePLC = 0;
		int n18databaseLen = 0;
		int nDisplayCount = 0;
		int nResValue = 0;
		int nBufSize = 0;

		while (true)
		{
			if (vPlcClient1->nWarnAck3 == 1)
			{
				vLogger->WriteCam3Log("runConsumer2 : Stk18 Warning Alarm acknowledgement", logtype::severity_level::info);
				vPlcClient1->nWarnAck3 = 0;
			}
			nBufSize = vConsumerBuffer2->GetSize();

			if (nBufSize <= 0)
			{
				cv::waitKey(1);
				continue;
			}

			//if (nBufSize == 100)
			//{
			//	cout << "Consuemer Buffer-2 Size = " << nBufSize << endl;
			//	//cout << "Result Buffer-2 Size = " << vResultBuffer2->GetSize() << endl;
			//}
			vMatFrame = vConsumerBuffer2->deleteFrame();
			if (vMatFrame.vMat.empty())
			{
				continue;
			}

			vCurrFrame.vMat = vMatFrame.vMat.clone();
			vDisplayFrame = vMatFrame.vMat.clone();

			vCurrFrame.nFrameNumberABor18 = vMatFrame.nFrameNumberABor18;
			vCurrFrame.nFrameNumberCD = vMatFrame.nFrameNumberCD;
			vCurrFrame.nABor18PrintStart = vMatFrame.nABor18PrintStart;
			vCurrFrame.nABor18PrintLength = vMatFrame.nABor18PrintLength;
			vCurrFrame.nABor18TrackingLen = vMatFrame.nABor18TrackingLen;
			vCurrFrame.nABor18DBLen = vMatFrame.nABor18DBLen;
			vCurrFrame.nABor18PlcCode = vMatFrame.nABor18PlcCode;
			vCurrFrame.nCDPrintStart = 0;
			vCurrFrame.nCDPrintLength = 0;
			vCurrFrame.nCDTrackingLen = 0;
			vCurrFrame.nCDDBLen = 0;
			vCurrFrame.nCDPlcCode = 0;
			vCurrFrame.eventTime = vMatFrame.eventTime;

#pragma region SkippingFrames
			if (vCurrFrame.nFrameNumberABor18 <= 1)
			{
				nSkip18Frames = 0;
			}

			if (nSkip18Frames == 2)
			{
				if (vCurrFrame.nABor18PrintLength > 0 && n18CodePLC == vCurrFrame.nABor18PlcCode)
				{
					if (vCurrFrame.nFrameNumberABor18 % 5 > 0)
					{
						//cout << "Stk18 Frame = " + std::to_string(vCurrFrame.nFrameNumberABor18) + " skipped" << endl;
						vLogger->WriteCam3Log("runConsumer2 : Stk18 Frame = " + to_string(vCurrFrame.nFrameNumberABor18) + " skipped", logtype::severity_level::info);
						continue;
					}
					else
					{
						vLogger->WriteCam3Log("runConsumer2 : Stk18 Frame = " + to_string(vCurrFrame.nFrameNumberABor18) + " displayed. No length processing.", logtype::severity_level::info);
					}
				}
			}
#pragma endregion SkippingFrames

			if (n18CodePLC == 0 && vCurrFrame.nABor18PrintLength > 0)
			{
				n18CodePLC = vCurrFrame.nABor18PlcCode;
				if (n18CodePLC > 0 && nFrameCounter18 > 0)
				{
					if (iDisplayCam2 == 1)
					{
						putText(ErrorFrame1, "Code = " + to_string(n18CodePLC), cv::Point(ErrorFrame1.cols - 1700, ErrorFrame1.rows - 5), FONT_HERSHEY_COMPLEX, 0.75, Scalar(0, 255, 0), 2, LINE_AA);
						//vResultBuffer1->updatePLCCode(0, n18CodePLC);
					}
				}
			}
			else
			{
				if (n18CodePLC > 0 && vCurrFrame.nABor18PrintLength == 0)
				{
					n18databaseLen = 0;
					n18CodePLC = 0;
				}
			}
#pragma region	CheckingDBLength

			if (nUseL2DB == 1 && n18CodePLC > 0 && vCurrFrame.nABor18TrackingLen > 0)
			{
				if (n18databaseLen == 0)
				{
					//n18databaseLen = getDatabasePrintLen(n18CodePLC);
					n18databaseLen = vGlo18DBLen;

					if (n18databaseLen > 0)
					{
						//vGlo18DBLen = 0;
						if (vCurrFrame.nABor18TrackingLen != n18databaseLen)
						{
							vPlcClient1->nWarning3 = 2;

							cout << "Stk 18 Length Mismatch. Alarm Sent to PLC. Frame = " << nFrameCounter18 << "; PLC Code = " << n18CodePLC << "; PLC Len = " << vCurrFrame.nABor18TrackingLen << "; Sticker Len = " << n18databaseLen << "\n";
							vLogger->WriteCam3Log("runConsumer2 : Stk 18 Length Mismatch. Alarm Sent to PLC. Frame= " + to_string(nFrameCounter18) + " ; PLC Code = = " + to_string(n18CodePLC) + " ; PLC Len = " + to_string(vCurrFrame.nABor18TrackingLen) + "; Sticker Len = " + to_string(n18databaseLen), logtype::severity_level::warning);
							n18FoundCount = 0;

							if (nFrameCounter18 > 0)
							{
								vResultBuffer2->updatePLCLenWithDBLen(0, n18databaseLen);
							}
						}
						else
						{
							cout << "Stk 18 PLC length and Database length are matching. Frame = " << nFrameCounter18 << "; PLC Code = " << n18CodePLC << "; PLC Len = " << vCurrFrame.nABor18TrackingLen << "\n";
							vLogger->WriteCam3Log("runConsumer2 : Stk 18 PLC length and Database length are matching. Frame= " + to_string(nFrameCounter18) + " ; PLC Code = = " + to_string(n18CodePLC) + " ; PLC Len = " + to_string(vCurrFrame.nABor18TrackingLen), logtype::severity_level::info);
						}


					}
					else
					{
						cout << "Stk 18 database length not found. Frame = " << nFrameCounter18 << "; PLC Code = " << n18CodePLC << "; PLC Len = " << vCurrFrame.nABor18TrackingLen << "\n";
						vLogger->WriteCam3Log("runConsumer2 : Stk 18 database length not found. Frame= " + to_string(nFrameCounter18) + " ; PLC Code = " + to_string(n18CodePLC) + " ; PLC Len = " + to_string(vCurrFrame.nABor18TrackingLen), logtype::severity_level::warning);
					}
				}
			}
			else
			{
				n18databaseLen = 0;
				//vGlo18DBLen = 0;
			}
			if (n18databaseLen > 0)
			{
				vCurrFrame.nABor18PrintLength = n18databaseLen;
				vCurrFrame.nABor18DBLen = n18databaseLen;
			}
			else
			{
				vCurrFrame.nABor18PrintLength = vCurrFrame.nABor18TrackingLen;
				vCurrFrame.nABor18DBLen = 0;
			}

#pragma endregion	CheckingDBLength

			if (iDisplayCam2 == 0)
			{
				continue;
			}

			vSearchFrame = vCurrFrame.vMat(Rect(0, CAM2_SEARCHTOP, vCurrFrame.vMat.cols, CAM2_SEARCH_HEIGHT)).clone();
			nFrameCounter18 = vCurrFrame.nFrameNumberABor18;


			if (vCurrFrame.nABor18PrintStart > 0 || 1 == 1)
			{
				vCurrGpuFrame.upload(vSearchFrame);

				cv::Ptr<cuda::Filter> filter = cuda::createGaussianFilter(vCurrGpuFrame.type(), vCurrGpuFrame.type(), cv::Size(5, 5), 0);
				filter->apply(vCurrGpuFrame, vGrayGpuFrame);

				cuda::cvtColor(vGrayGpuFrame, vGrayGpuFrame, COLOR_RGB2GRAY);

				nBGFrameCaptured = 0;
				if (vHistoryFrames.GetGpuBufferSize() < 40)
				{
					vHistoryFrames.addGpuFrame(vGrayGpuFrame.clone());
				}

				if (vHistoryFrames.GetGpuBufferSize() >= 40)//&& (vCurrFrame.nCDPrintLength > 0 || vCurrFrame.nABPrintLength > 0)
				{
					vBGGpuFrame18Full = vHistoryFrames.deleteGpuFrame();
					nBGFrameCaptured = 1;
				}

				cv::rectangle(vSearchFrame, cv::Point(5, vSearchFrame.rows - 20), cv::Point(vCurrFrame.vMat.cols - 5, vSearchFrame.rows), Scalar(30, 30, 30), cv::FILLED);

				if (vCurrFrame.nABor18PlcCode > 0)
				{
					cv::putText(vSearchFrame, "Code = " + to_string(vCurrFrame.nABor18PlcCode), cv::Point(vCurrFrame.vMat.cols - 1700, vSearchFrame.rows - 5), FONT_HERSHEY_COMPLEX, 0.75, Scalar(0, 255, 0), 2, LINE_AA);
				}
				cv::putText(vSearchFrame, "Len = " + to_string(vCurrFrame.nABor18PrintLength), cv::Point(vCurrFrame.vMat.cols - 1430, vSearchFrame.rows - 5), FONT_HERSHEY_COMPLEX, 0.75, Scalar(0, 255, 0), 2, LINE_AA);

				//timev = time(0);
				timev = vCurrFrame.eventTime;
				std::strftime(timebuff, 100, "%d-%m-%y %H:%M:%S", localtime(&timev));
				cv::putText(vSearchFrame, timebuff, cv::Point(vCurrFrame.vMat.cols - 1210, vSearchFrame.rows - 5), FONT_HERSHEY_COMPLEX, 0.75, Scalar(0, 255, 0), 2, LINE_AA);

				if (vCurrFrame.nABor18DBLen > 0 && vCurrFrame.nABor18DBLen != vCurrFrame.nABor18TrackingLen)
				{
					cv::putText(vSearchFrame, "Length Mismatch. PLC Len = " + to_string(vCurrFrame.nABor18TrackingLen), cv::Point(vCurrFrame.vMat.cols - 850, vSearchFrame.rows - 5), FONT_HERSHEY_COMPLEX, 0.75, Scalar(0, 0, 255), 2, LINE_AA);
				}

#pragma region BackGroundSubtraction18

				if (vCurrFrame.nABor18PrintLength > 0) //|| 1 == 1
				{

					if (nPrev18PrintLen == 0 && vCurrFrame.nABor18PrintLength > 0)
					{
						ErrorFrame1 = vSearchFrame.clone();
						vResultBuffer2->addFrameWithResult(ErrorFrame1, nFrameCounter18, 0, 0, 0, 0, vCurrFrame.nABor18PrintLength, vCurrFrame.nABor18TrackingLen, vCurrFrame.nABor18DBLen, 0, vCurrFrame.nABor18PlcCode, 0);
					}

					if (nBGFrameCaptured == 1)
					{
						vBGGpuFrame18 = vBGGpuFrame18Full.clone();

						cuda::absdiff(vGrayGpuFrame, vBGGpuFrame18, vBGGpuFrame18);

						cuda::threshold(vBGGpuFrame18, vBGGpuFrame18, 8, 255, THRESH_BINARY);//8
						vBGGpuFrame18.download(vBGFrame18);

						if (vCurrFrame.nABor18PrintLength > 0)
						{
							pt18_1.x = 0;
							pt18_1.y = 0;
							pt18_2.x = 0;
							pt18_2.y = 0;
							dPredctedLength = 0;

							if (std::abs(vCurrFrame.nABor18PrintLength - nPrev18ReadLen) > 15)
							{
								vSkipPlcCode18 = 0;
								dPredctedLength = detect18SaleLeftEdge_BG(nFrameCounter18, n18FoundCount, vCurrFrame.nABor18PrintLength, nPrev18ReadLen, vBGFrame18, pt18_1, pt18_2);
							}
							else
							{
								if (nSkip18Frames == 0)
								{
									cout << "Stk18 Skip start Frame = " + std::to_string(nFrameCounter18) + "; PrintLen = " + std::to_string(vCurrFrame.nABor18PrintLength) + "; nPrev18ReadLen = " + std::to_string(nPrev18ReadLen) << endl;
									vLogger->WriteCam3Log("runConsumer2 : Stk18 Skip start Frame = " + to_string(nFrameCounter18) + "; PrintLen = " + std::to_string(vCurrFrame.nABor18PrintLength) + "; nPrev18ReadLen = " + std::to_string(nPrev18ReadLen), logtype::severity_level::info);
									nSkip18Frames = 1;
									vSkipPlcCode18 = vCurrFrame.nABor18PlcCode;
								}
								else
								{
									nSkip18Frames = nSkip18Frames + 1;
								}
							}


							if (dPredctedLength > 0)
							{
								if (std::abs(vCurrFrame.nABor18PrintLength - nPrev18ReadLen) > std::abs(vCurrFrame.nABor18PrintLength - dPredctedLength))
								{
									vFirstFrame1 = ErrorFrame1.clone();
									n18LenOkToSave = 0;

									if ((vCurrFrame.nABor18PrintLength >= dPredctedLength && vCurrFrame.nABor18PrintLength - dPredctedLength <= CAM2_WARN_LEN_DIFF_NEG) || (dPredctedLength > vCurrFrame.nABor18PrintLength && dPredctedLength - vCurrFrame.nABor18PrintLength <= CAM2_WARN_LEN_DIFF_POS))
									{
										//Checking for order lengths
										if (compareLenWithLeftEdge(3, vCurrFrame.nABor18PrintLength, pt18_1.x, false) > 0)
										{
											n18LenOkToSave = 1;
										}
										else
										{
											if (n18FoundCount == 0)
											{
												dPredctedLength = 4000;//some dummy length as the pred len is with in the range but
											}
										}
										line(vSearchFrame, pt18_1, pt18_2, Scalar(0, 255, 0), 1, 8);
										line(vFirstFrame1, pt18_1, pt18_2, Scalar(0, 255, 0), 1, 8);

										n18FoundCount = n18FoundCount + 1;
										if (n18FoundCount == 1)//allowing first finding
										{
											n18LenOkToSave = 1;
										}
									}
									else
									{
										line(vSearchFrame, pt18_1, pt18_2, Scalar(0, 0, 255), 1, 8);
										line(vFirstFrame1, pt18_1, pt18_2, Scalar(0, 0, 255), 1, 8);

									}

									if (dPredctedLength > 3000)
									{
										cv::putText(vSearchFrame, to_string(dPredctedLength), cv::Point(pt18_1.x - 150, 50), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 255, 0), 2, LINE_AA);
										cv::putText(vFirstFrame1, to_string(dPredctedLength), cv::Point(pt18_1.x - 150, 50), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 255, 0), 2, LINE_AA);//pt18_1.y + 25
									}
									else
									{
										cv::putText(vSearchFrame, to_string(dPredctedLength), cv::Point(pt18_1.x - 150, 50), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 0, 255), 2, LINE_AA);
										cv::putText(vFirstFrame1, to_string(dPredctedLength), cv::Point(pt18_1.x - 150, 50), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 0, 255), 2, LINE_AA);
									}

									if (n18FoundCount < 1 || (n18FoundCount >= 1 && n18LenOkToSave == 1))
									{
										vResultBuffer2->addFrameWithResult(vFirstFrame1.clone(), nFrameCounter18, pt18_1.x, pt18_1.y, pt18_2.x, pt18_2.y, vCurrFrame.nABor18PrintLength, vCurrFrame.nABor18TrackingLen, vCurrFrame.nABor18DBLen, dPredctedLength, vCurrFrame.nABor18PlcCode, 0);
										cout << "Stk18 Counter = " << n18FoundCount << "; Frame = " << nFrameCounter18 << "; Length = " << dPredctedLength << "; X1 = " << pt18_1.x << " Y1 = " << pt18_1.y << " X2 = " << pt18_2.x << " Y2 = " << pt18_2.y << "\n";
										vLogger->WriteCam3Log("runConsumer2 : Stk18 Counter = " + to_string(n18FoundCount) + "; Frame = " + to_string(nFrameCounter18) + "; Length = " + to_string(dPredctedLength) + " -- added to result", logtype::severity_level::info);

										n18FoundCount = n18FoundCount + 1;

										nPrev18ReadLen = dPredctedLength;
										pt18Prev1.x = pt18_1.x;
										pt18Prev1.y = pt18_1.y;
										pt18Prev2.x = pt18_2.x;
										pt18Prev2.y = pt18_2.y;
									}
								}
							}

							if (nPrev18ReadLen > 0)
							{
								if ((vCurrFrame.nABor18PrintLength >= nPrev18ReadLen && vCurrFrame.nABor18PrintLength - nPrev18ReadLen <= CAM2_WARN_LEN_DIFF_NEG) || (nPrev18ReadLen > vCurrFrame.nABor18PrintLength && nPrev18ReadLen - vCurrFrame.nABor18PrintLength <= CAM2_WARN_LEN_DIFF_POS))
								{
									line(vSearchFrame, pt18Prev1, pt18Prev2, Scalar(0, 255, 0), 1, 8);
								}
								else
								{
									line(vSearchFrame, pt18Prev1, pt18Prev2, Scalar(0, 0, 255), 1, 8);
								}

								if (nPrev18ReadLen > 3000)
								{
									cv::putText(vSearchFrame, to_string(nPrev18ReadLen), cv::Point(pt18Prev1.x - 150, 50), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 255, 0), 2, LINE_AA);
								}
								else
								{
									cv::putText(vSearchFrame, to_string(nPrev18ReadLen), cv::Point(pt18Prev1.x - 150, 50), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 0, 255), 2, LINE_AA);
								}
							}

						}

						//cv::namedWindow("BGSubtract-18", WINDOW_NORMAL);
						//cv::imshow("BGSubtract-18", vBGFrame18);
					}
				}

#pragma endregion BackGroundSubtraction18

			}

#pragma region SavingImages


#pragma region CreatingDayWiseFolder

			if (sPrevTimeString2.length() == 0 || (nPrev18PrintLen > 0 && vCurrFrame.nABor18PrintLength == 0))
			{
				timev = time(0);
				std::strftime(timebuff, 100, "%Y_%m_%d", localtime(&timev));

				sCurSavePath1.assign("C:\\Level-3\\ImageLib\\Stk18\\");
				sCurSavePath1.append(timebuff);

				if (sPrevTimeString2.compare(timebuff) != 0)
				{
					if (makePath(sCurSavePath1))
					{
						cout << "Today's folder created for Stk18" << endl;
						vLogger->WriteERRLog("Today's folder created for Stacker 18", logtype::severity_level::info);
					}
				}

				sPrevTimeString2.assign(timebuff);
			}

#pragma endregion CreatingDayWiseFolder

			if (nPrev18PrintLen > 0 && vCurrFrame.nABor18PrintLength == 0)
			{
				int nFrameBufferSize = vResultBuffer2->GetSize();



				//nFrameBufferSize = vProducerBuffer2->GetSize();
				//std::cout << "vProducerBuffer2 Size = " << nFrameBufferSize << "\n";
				//nFrameBufferSize = vDisplayBuffer->GetSize();
				//std::cout << "vDisplayBuffer Size = " << nFrameBufferSize << "\n";

				//std::cout << "Save Stk18 - vResultBuffer2 Size = " << nFrameBufferSize << "\n";

				sCurSavePath1.append("\\Stk18_");

				timev = time(0);

				std::strftime(timebuff, 100, "%Y%m%d%H%M%S", localtime(&timev));
				sCurSavePath1.append(timebuff);

				if (nFrameBufferSize > 0)
				{
					nResValue = vResultBuffer2->updatePLCCode(0, n18CodePLC);

					MatWithResult vResult = vResultBuffer2->deleteFrame(0);

					if (nResValue > 0)
					{
						cv::putText(vResult.vMat, "Code = " + to_string(n18CodePLC), cv::Point(vResult.vMat.cols - 1800, vResult.vMat.rows - 5), FONT_HERSHEY_COMPLEX, 0.75, Scalar(0, 255, 0), 2, LINE_AA);
					}

					if (vResult.nDBLen > 0 && vResult.nDBLen != vResult.nTrackingLen)
					{
						vPlcClient1->nWarning3 = 2;
						sCurSavePath1.append("_" + std::to_string(vResult.nPlcCode) + "_" + std::to_string(vResult.nDBLen) + "_" + std::to_string(vResult.nTrackingLen) + "_TRK");
						//sCurSavePath1.append("_TRK");
						cv::putText(vResult.vMat, "Length Mismatch. PLC Len = " + to_string(vResult.nTrackingLen), cv::Point(vResult.vMat.cols - 850, vResult.vMat.rows - 5), FONT_HERSHEY_COMPLEX, 0.75, Scalar(0, 0, 255), 2, LINE_AA);
					}
					else
					{
						sCurSavePath1.append("_" + std::to_string(vResult.nPlcCode) + "_" + std::to_string(vResult.nPrintLen) + "_" + std::to_string(vResult.nReadLen));
					}

					if (nPrev18ReadLen > 0)
					{
						if (vResult.nReadLen > 0)
						{
							if ((vResult.nPrintLen >= vResult.nReadLen && vResult.nPrintLen - vResult.nReadLen > CAM2_WARN_LEN_DIFF_NEG) || (vResult.nReadLen > vResult.nPrintLen && vResult.nReadLen - vResult.nPrintLen > CAM2_WARN_LEN_DIFF_POS))
							{
								vSavingFrame1 = vResult.vMat.clone();
								Update18Results(-1);
								nRefreshScreen = 1;
								sCurSavePath1.append("_WARN");
								if (STK18_WRITE_TO_PLC == 1)
								{
									vPlcClient1->nWarning3 = 1;
									cout << "Stk18 alarm sent to PLC. Print Len = " << vResult.nPrintLen << "; Read Len =" << vResult.nReadLen << "; Diff = " << std::abs(vResult.nReadLen - vResult.nPrintLen) << "\n";
									vLogger->WriteCam3Log("runConsumer2 : Stk18 alarm sent to PLC. Print Len = " + to_string(vResult.nPrintLen) + "; Read Len = " + to_string(vResult.nReadLen) + "; Diff = " + to_string(std::abs(vResult.nReadLen - vResult.nPrintLen)), logtype::severity_level::warning);
								}
								else
								{
									vPlcClient1->nWarning3 = 1;
									cout << "Stk18 alarm NOT sent to PLC. Print Len = " << vResult.nPrintLen << "; Read Len =" << vResult.nReadLen << "; Diff = " << std::abs(vResult.nReadLen - vResult.nPrintLen) << "\n";
									vLogger->WriteCam3Log("runConsumer2 : Stk18 alarm not sent to PLC. Print Len = " + to_string(vResult.nPrintLen) + "; Read Len = " + to_string(vResult.nReadLen) + "; Diff = " + to_string(std::abs(vResult.nReadLen - vResult.nPrintLen)), logtype::severity_level::warning);
								}
							}
							else
							{
								vPlcClient1->nWarning3 = 0;
								cout << "OK image saved for Stk18. Print Len = " << vResult.nPrintLen << "; Read Len =" << vResult.nReadLen << "; Diff = " << std::abs(vResult.nReadLen - vResult.nPrintLen) << "\n";
								vLogger->WriteCam3Log("runConsumer2 : OK image saved for Stk18. Print Len = " + to_string(vResult.nPrintLen) + "; Read Len = " + to_string(vResult.nReadLen) + "; Diff = " + to_string(std::abs(vResult.nReadLen - vResult.nPrintLen)), logtype::severity_level::info);
								Update18Results(1);
								nRefreshScreen = 1;
							}
							sCurSavePath1.append(".jpg");

							cv::imwrite(sCurSavePath1, vResult.vMat);

						}
					}
					else
					{
						Update18Results(0);
						nRefreshScreen = 1;

						vPlcClient1->nWarning3 = 0;
						cout << "Stk 18 - no length detected. Saving Error image result. \n";
						vLogger->WriteCam3Log("runConsumer2 : Stk 18 - no length detected. Saving Error image result", logtype::severity_level::error);
						sCurSavePath1.append("_NOREAD.jpg");
						cv::imwrite(sCurSavePath1, ErrorFrame1);
					}
				}
				else
				{
					Update18Results(0);
					nRefreshScreen = 1;

					vPlcClient1->nWarning3 = 0;
					cout << "Stk 18 Buffer empty. Saving Error image result. \n";
					vLogger->WriteCam3Log("runConsumer2 : Stk 18 Buffer empty. Saving Error image result", logtype::severity_level::error);

					sCurSavePath1.append("_" + std::to_string(n18CodePLC) + "_" + std::to_string(nPrev18PrintLen) + "_0_NOREAD.jpg");

					cv::imwrite(sCurSavePath1, ErrorFrame1);
				}

				n18databaseLen = 0;
				n18CodePLC = 0;
				pt18Prev1.x = 0;
				pt18Prev1.y = 0;
				pt18Prev2.x = 0;
				pt18Prev2.y = 0;
				nPrev18ReadLen = 0;
				n18FoundCount = 0;
				n18LenOkToSave = 0;
			}
#pragma endregion


			nPrev18PrintLen = vCurrFrame.nABor18PrintLength;
			nDisplayCount = nDisplayCount + 1;

			if (nDisplayCount == 5 || nRefreshScreen > 0)
			{
				vDisplayBuffer->addDisplayFrames(1, vDisplayFrame, vSearchFrame, vSavingFrame1, ErrorFrame2, nRefreshScreen);
				nDisplayCount = 0;
				nRefreshScreen = 0;
			}

			//cv::waitKey(1);
			continue;
		}

	}
	catch (const cv::Exception &e)
	{
		timev = time(0);
		//const char* err_msg = e.what();
		std::cout << ctime(&timev) << " error in runConsumer2." << e.what() << "\n";
	}
	catch (const std::exception &ex)
	{
		timev = time(0);
		std::cout << ctime(&timev) << " error in runConsumer2." << ex.what() << "\n";
	}
}

void CameraSource::ReadRulerPoints()
{
	Point vTempPoint;
	string sName;

	CIniReader iniReader1(".\\LengthMap.ini");

	nADPointCount = iniReader1.ReadInteger("StackerABCD", "PointCount", 0);
	for (int i = 1; i <= nADPointCount; i++)
	{
		sName = "Point" + to_string(i);
		char* key = &sName[0u];
		vTempPoint.x = iniReader1.ReadInteger("X1_AD", key, 0);
		vTempPoint.y = iniReader1.ReadInteger("Y1_AD", key, 0);
		lst30Point1.push_back(vTempPoint);

		lst30Lengths.push_back(iniReader1.ReadString("Lengths_AD", key, 0));

		vTempPoint.x = iniReader1.ReadInteger("X2_AD", key, 0);
		vTempPoint.y = iniReader1.ReadInteger("Y2_AD", key, 0);
		lst30Point2.push_back(vTempPoint);
	}

	n18PointCount = iniReader1.ReadInteger("Stacker18", "PointCount", 0);

	for (int i = 1; i <= n18PointCount; i++)
	{
		sName = "Point" + to_string(i);
		char* key = &sName[0u];
		vTempPoint.x = iniReader1.ReadInteger("X1_18", key, 0);
		vTempPoint.y = 0;
		lst18Point.push_back(vTempPoint);
	}
}

void CameraSource::ReadStopperPixelValues(const cuda::GpuMat & searchframe)
{
	for (int i = 1; i <= lstStpPoint.size(); i++)
	{
		lstStpPixelVal[i - 1] = to_string(getAveragePixelValue(searchframe, lstStpPoint[i - 1].x, lstStpPoint[i - 1].y, 4, 4));
	}
}

void CameraSource::FillStopperPrevPixelValues(int nPrintLen)
{
	if (nPrintLen == 1)
	{
		for (int i = 0; i < lstStpPixelVal.size(); i++)
		{
			lstStpPrevPixelVal[i] = lstStpPixelVal[i];
		}
	}
	else
	{
		if (nPrintLen == 0)
		{
			int  nCopy = 0;
			for (int i = 0; i < 3; i++)
			{
				if (std::abs(stof(lstStpPixelVal[i]) - stof(lstStpPrevPixelVal[i])) > 10)
				{
					nCopy = nCopy + 1;
				}
			}
			if (nCopy < 3)
			{
				for (int i = 0; i < lstStpPixelVal.size(); i++)
				{
					lstStpPrevPixelVal[i] = lstStpPixelVal[i];
				}
			}
		}
	}

}

int CameraSource::GetABLeftEdgeBlock()
{
	cout << "GetABLeftEdgeBlock \n";
	for (int i = 0; i < lstStpPixelVal.size(); i++)
	{
		cout << lstStpPixelVal[i] << "\t";
	}
	cout << endl;

	/*for (int i = 2; i < lstStpPixelVal.size(); i++)
	{
		if (std::abs(stof(lstStpPixelVal[i]) - stof(lstStpPrevPixelVal[i])) < 10)
		{
			cout << "GetABLeftEdgeBlock Result =" << i + 1 << "\n";
			return i + 1;
		}
	}*/

	for (int i = 3; i < lstStpPixelVal.size(); i++)
	{
		if (std::abs(stof(lstStpPixelVal[i]) - stof(lstStpPixelVal[i - 1])) > 15)
		{
			cout << "GetABLeftEdgeBlock Result =" << i + 1 << "\n";
			return i + 1;
		}
	}
	return 0;
}

int CameraSource::GetCDLeftEdgeBlock()
{
	cout << "GetCDLeftEdgeBlock \n";
	for (int i = 0; i < lstStpPixelVal.size(); i++)
	{
		cout << lstStpPixelVal[i] << "\t";
	}
	cout << endl;

	for (int i = 9; i < lstStpPixelVal.size(); i++)
	{
		if (std::abs(stof(lstStpPixelVal[i]) - stof(lstStpPixelVal[i - 1])) > 15)
		{
			cout << "GetCDLeftEdgeBlock Result =" << i + 1 << "\n";
			return i + 1;
		}
	}
	return 0;
}

int CameraSource::detectABSale(const Mat & searchframe, const Mat & srcFrame, Rect & rect)
{
	vector<vector<Point>> contours;
	Rect bounding_rect, final_rect;
	int contours_Count = 0;
	int nMinY = 200;
	findContours(searchframe(Rect(0, 0, 3300, searchframe.rows)), contours, cv::RETR_TREE, cv::CHAIN_APPROX_SIMPLE);

	//cout << contours.size() << "\n";
	if (contours.size() <= 0)
	{
		return 0;
	}


	contours_Count = 0;

	for (int i = 0; i < contours.size(); i++)
	{
		double a = contourArea(contours[i], false);

		bounding_rect = boundingRect(contours[i]);

		if (bounding_rect.width < 400)
		{
			continue;
		}

		if (bounding_rect.y > 35 || bounding_rect.y < 20)
		{
			continue;
		}

		if (bounding_rect.x == 0)
		{
			continue;
		}

		if (bounding_rect.height > 45)
		{
			continue;
		}

		if (bounding_rect.x + bounding_rect.width < 2500)
		{
			continue;
		}

		if (bounding_rect.y + bounding_rect.height > searchframe.rows - 5)
		{
			continue;
		}

		if (bounding_rect.y < nMinY)
		{
			final_rect.x = bounding_rect.x;
			final_rect.y = bounding_rect.y;
			final_rect.width = bounding_rect.width;
			final_rect.height = bounding_rect.height;

			nMinY = bounding_rect.y;
		}

	}

	if (nMinY < 200)
	{
		//std::cout << "\n AB Sale Contour = " << final_rect.area() << "\t" << final_rect.x << "\t" << final_rect.y << "\t" << final_rect.width << "\t" << final_rect.height << "\n";
		//cv::rectangle(srcFrame, cv::Point(final_rect.x, final_rect.y), cv::Point(final_rect.x + final_rect.width, final_rect.y + final_rect.height), Scalar(0, 0, 255), 1, 8);

		rect.x = final_rect.x;
		rect.y = final_rect.y;
		rect.width = final_rect.width;
		rect.height = final_rect.height;

		return 1;
	}
	return 0;
}

int CameraSource::detectCDSale(const Mat & searchframe, const Mat & srcFrame, Rect & rect)
{
	vector<vector<Point>> contours;
	Rect bounding_rect, final_rect;
	int contours_Count = 0;
	int nMinY = 200;
	findContours(searchframe(Rect(1200, 0, 800, searchframe.rows)), contours, cv::RETR_TREE, cv::CHAIN_APPROX_SIMPLE);

	//cout << contours.size() << "\n";
	if (contours.size() <= 0)
	{
		return 0;
	}


	contours_Count = 0;

	for (int i = 0; i < contours.size(); i++)
	{
		double a = contourArea(contours[i], false);

		if (a == 0)
		{
			continue;
		}

		bounding_rect = boundingRect(contours[i]);

		if (bounding_rect.width < 50)
		{
			continue;
		}

		if (bounding_rect.y == 0)
		{
			continue;
		}

		//std::cout << "\n CD Sale Contour = " << bounding_rect.area() << "\t" << bounding_rect.x << "\t" << bounding_rect.y << "\t" << bounding_rect.width << "\t" << bounding_rect.height << "\n";

		if (bounding_rect.y < 5)//bounding_rect.y > 70 || 
		{
			continue;
		}

		/*if (bounding_rect.height > 75)
		{
			continue;
		}*/

		if (bounding_rect.y + bounding_rect.height > searchframe.rows - 5)
		{
			continue;
		}

		if (bounding_rect.x + 1200 + bounding_rect.width > 2030)
		{
			continue;
		}

		if (bounding_rect.x + 1200 + bounding_rect.width < 1850)
		{
			continue;
		}

		if (bounding_rect.y < nMinY)
		{
			final_rect.x = bounding_rect.x;
			final_rect.y = bounding_rect.y;
			final_rect.width = bounding_rect.width;
			final_rect.height = bounding_rect.height;

			nMinY = bounding_rect.y;
		}

	}

	if (nMinY < 200)
	{
		//std::cout << "\n CD Sale Contour = " << final_rect.area() << "\t" << final_rect.x << "\t" << final_rect.y << "\t" << final_rect.width << "\t" << final_rect.height << "\n";
		//cv::rectangle(srcFrame, cv::Point(final_rect.x, final_rect.y), cv::Point(final_rect.x + final_rect.width, final_rect.y + final_rect.height), Scalar(0, 0, 255), 1, 8);

		rect.x = final_rect.x;
		rect.y = final_rect.y;
		rect.width = final_rect.width;
		rect.height = final_rect.height;

		return 1;
	}
	return 0;
}

int CameraSource::detectABSaleRightEdge(const Mat & searchframe)
{
	bool bFound = false;

	for (int i = 30; i > 10; i--)//searchframe.cols
	{
		for (int j = 50; j < 90; j++)
		{
			if (static_cast<int>(searchframe.at<uchar>(i, j)) == 255)
			{
				bFound = true;
				for (int k = i; k > i - 5; k--)
				{
					if (static_cast<int>(searchframe.at<uchar>(k, j)) != 255)
					{
						bFound = false;
						break;
					}
				}
				if (bFound)
				{
					return j;
				}
			}
		}

	}


	return 0;
}

int CameraSource::detectCDSaleLeftEdge(const Mat & searchframe)
{
	bool bFound = false;

	for (int i = searchframe.rows - 1; i > searchframe.rows / 2; i--)//searchframe.cols
	{
		for (int j = searchframe.cols - 1; j > 0; j--)
		{
			//cout << i << " ; " << j << " ; " << static_cast<int>(searchframe.at<uchar>(i, j)) << "\n";

			if (static_cast<int>(searchframe.at<uchar>(i, j)) == 255)
			{

				bFound = true;
				for (int k = i; k > i - 3; k--)
				{
					if (static_cast<int>(searchframe.at<uchar>(k, j)) != 255)
					{
						bFound = false;
						break;
					}
				}
				if (bFound)
				{
					return j;
				}
			}
		}

	}


	return 0;
}

int CameraSource::detectCDSaleLeftEdge_BG(int nFrameCnt, int nLenDetectCount, int nLenRef, int nPrevLenDetected, const Mat & searchframe, cv::Point & ptLeft, cv::Point & ptRight)
{
	bool bFound = false;
	int nMinVal = 0, nMaxVal = 0;
	int nSearchStart = 0, nSearchEnd = 0;
	int nFoundCount = 0;
	int nReverseCount = 0;
	int nLoopCount = 0;
	int nPrevMinY = 0;
	int nPredLen = 0;
	int nPrevPredLen = 0;
	cv::Point ptLeftPrev;

	bFound = false;

	//right edge
	ptRight.x = 0;
	ptRight.y = 0;
	while (nLoopCount < 2 && bFound == false)
	{
		nSearchStart = 1940;
		nSearchEnd = 1960;
		nLoopCount = nLoopCount + 1;
		if (nLoopCount == 1)
		{
			nMinVal = 30;
			nMaxVal = 65;
		}
		else
		{
			nMinVal = 15;
			nMaxVal = 30;
		}

		for (int i = nMinVal; i < nMaxVal && bFound == false; i++)
		{
			for (int j = nSearchEnd; j > nSearchStart && bFound == false; j--)
			{
				if (static_cast<int>(searchframe.at<uchar>(i, j)) == 255)
				{
					nFoundCount = 0;
					try
					{
						for (int k = i; k <= i + 2; k++)
						{
							for (int m = j; m > j - 40; m--)
							{
								if (static_cast<int>(searchframe.at<uchar>(k, m)) == 255)
								{
									nFoundCount = nFoundCount + 1;
								}
							}
						}
					}

					catch (const std::exception&)
					{
						cout << i << " " << j << endl;
					}
					catch (cv::Exception& e)
					{
						const char* err_msg = e.what();
						cout << i << " " << j << endl;
					}

					if (nFoundCount > 100)//bFound
					{
						ptRight.x = j;
						ptRight.y = i;
						bFound = true;

						//break;

						nReverseCount = 0;
						if (nPrevLenDetected > 0)
						{
							ptRight.x = 1947;

							for (int k = i - 3; k <= i + 3; k++)
							{
								for (int m = j; m <= j + 40; m++)
								{
									if (static_cast<int>(searchframe.at<uchar>(k, m)) == 255)
									{
										nReverseCount = nReverseCount + 1;
									}
								}
							}
						}

						if (nReverseCount >= 50)
						{
							bFound = false;
						}
					}
				}
			}
		}
	}

	if (bFound == false)
	{
		ptRight.x = 1947;
		ptRight.y = 50;
		bFound = true;
	}
	//left edge
	if (bFound == true)
	{
		//fixing the right edge

		//ptRight.x = 1947;

		//cout << "CD Frame = " << nFrameCnt << " ; Right Edge found at " << ptRight.x << " ; " << ptRight.y << endl;
		nPrevPredLen = 0;
		ptLeftPrev.x = 0;
		ptLeftPrev.y = 0;
		nLoopCount = 0;
		nSearchStart = 280;
		nSearchEnd = 1400;

		if (nLenRef <= 7000)
		{
			nSearchStart = 980;
		}
		else if (nLenRef <= 8000)
		{
			nSearchStart = 920;
		}
		else if (nLenRef <= 9700)
		{
			nSearchStart = 760;
		}
		else if (nLenRef <= 12000)
		{
			nSearchStart = 575;
		}
		else if (nLenRef <= 12300)
		{
			nSearchStart = 550;
		}
		else if (nLenRef <= 13900)
		{
			nSearchStart = 360;
		}
		else
		{
			nSearchStart = 280;
		}
		while (nLoopCount < 3)
		{
			nLoopCount = nLoopCount + 1;
			//cout << "CD Loop Count = " << nLoopCount << " ; nPrevMinY = " << nPrevMinY << endl;
			vLogger->WriteCam2Log("Stacker = CD; Frame = " + to_string(nFrameCnt) + "; LoopCount = " + to_string(nLoopCount) + "; X1 = " + to_string(ptLeft.x) + "; Y1 = " + to_string(ptLeft.y) + "; X2 = " + to_string(ptRight.x) + "; Y2 = " + to_string(ptRight.y) + "; HCnt = " + to_string(nFoundCount) + "; RCnt = " + to_string(nReverseCount), logtype::severity_level::info);
			bFound = false;
			ptLeft.x = 0;
			ptLeft.y = 0;
			nFoundCount = 0;
			nReverseCount = 0;
			//left edge
			for (int j = nSearchStart; j < nSearchEnd && bFound == false; j++)
			{
				if (j < 500)
				{
					nMinVal = 20;
					nMaxVal = 95;
				}
				else if (j < 700)
				{
					nMinVal = 15;
					nMaxVal = 85;
				}
				else if (j < 935)
				{
					nMinVal = 12;
					nMaxVal = 70;
				}
				else if (j < 1250)
				{
					nMinVal = 10;
					nMaxVal = 70;
				}
				else
				{
					nMinVal = 10;
					nMaxVal = 70;
				}

				nMinVal = ptRight.y;
				if (nLenRef >= 12000)
				{
					nMinVal = ptRight.y + 10;
				}

				if (ptRight.y < 45)
				{
					nMaxVal = ptRight.y + 35;
				}

				if (nLoopCount > 1 && nPrevMinY > 0)
				{
					nMinVal = nPrevMinY + 2;
				}

				for (int i = nMinVal; i < nMaxVal && bFound == false; i++)//&& i>ptRight.x
				{
					//cout << i << " ; " << j << " ; " << static_cast<int>(searchframe.at<uchar>(i, j)) << "\n";

					if (static_cast<int>(searchframe.at<uchar>(i, j)) == 255)
					{
						nFoundCount = 0;
						for (int k = i - 3; k <= i + 4 && k < nMaxVal; k++)
						{
							for (int m = j; m < j + 40; m++)
							{
								if (static_cast<int>(searchframe.at<uchar>(k, m)) == 255)
								{
									nFoundCount = nFoundCount + 1;
								}
							}
						}

						//cout << "CD Frame = " << nFrameCnt << " ; nFoundCount = " << nFoundCount << "\n";
						if (nFoundCount >= 140)//80
						{
							//cout << "CD Frame = " << nFrameCnt << " ; nFoundCount = " << nFoundCount << "\n";

							ptLeft.x = j;
							ptLeft.y = i;
							bFound = true;
							//cout << "nFoundCount = " << nFoundCount << endl;

							nReverseCount = 0;
							for (int k = i - 1; k <= i + 5; k++)
							{
								for (int m = j; m > j - 40; m--)
								{
									if (static_cast<int>(searchframe.at<uchar>(k, m)) == 255)
									{
										nReverseCount = nReverseCount + 1;
									}
								}
							}

							if (nPrevLenDetected > 0)//nLenDetectCount > 0
							{
								if (nLenRef != 10670 && nLenRef != 8000 && nLenRef != 8300)
								{
									if (nLenRef > 13700 && nReverseCount > 25)
									{
										bFound = false;
									}
									else
									{
										if (nReverseCount > 15)
										{
											bFound = false;
										}
									}
								}
							}
							//std::cout << "CD nFrameCnt = " << nFrameCnt << "; nReverseCount. = " << nReverseCount << endl;
							//vLogger->WriteCam2Log("CD nFrameCnt = " + to_string(nFrameCnt) + "; nReverseCount = " + to_string(nReverseCount), logtype::severity_level::info);
						}
					}
				}


				if (bFound)
				{
					nPredLen = 0;

					if (ptLeft.x <= 450)
					{
						if (ptLeft.x > 300 && ptLeft.x <= 350)
						{
							nPredLen = GetPredictedLength(2, 1045, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
						}
						else
						{
							if (ptLeft.x > 350 && ptLeft.x <= 400)
							{
								nPredLen = GetPredictedLength(2, 1064, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
							}
							else
							{
								if (ptLeft.x > 400 && ptLeft.x <= 450)
								{
									nPredLen = GetPredictedLength(2, 1068, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
								}
								else
								{
									if (ptLeft.y > 60 && ptLeft.y <= 72 && ptRight.y <= 30 && ptRight.y >= 15 && ptLeft.y < 450)
									{
										nPredLen = GetPredictedLength(2, 1019, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
									}
									else
									{
										if (ptLeft.y > 50 && ptLeft.y <= 65 && ptRight.y <= 30 && ptRight.y >= 10 && ptLeft.y < 350)
										{
											nPredLen = GetPredictedLength(2, 1057, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
										}
										else
										{
											if (ptLeft.y > 45 && ptLeft.y <= 75 && ptRight.y <= 60 && ptRight.y >= 30 && ptLeft.y < 400 && ptLeft.y > 350)
											{
												nPredLen = GetPredictedLength(2, 1044, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
											}
											else
											{
												if (ptLeft.y > 70 && ptLeft.y <= 85 && ptRight.y <= 35 && ptRight.y >= 20 && ptLeft.y < 400 && ptLeft.y > 350)
												{
													nPredLen = GetPredictedLength(2, 1060, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
												}
												else
												{
													if (ptLeft.y >= 20 && ptLeft.y <= 55 && ptRight.y <= 60 && ptRight.y >= 10 && ptLeft.y > 350)
													{
														nPredLen = GetPredictedLength(2, 1044, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
													}
													else
													{
														if (ptLeft.y >= 30 && ptLeft.y <= 70 && ptRight.y <= 50 && ptRight.y >= 10 && ptLeft.y > 350)
														{
															nPredLen = GetPredictedLength(2, 1045, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
														}
														else
														{
															if (ptLeft.y >= 70 && ptLeft.y <= 83 && ptRight.y <= 26 && ptRight.y >= 25 && ptLeft.y > 350)
															{
																nPredLen = GetPredictedLength(2, 1031, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
															}
															else
															{
																if (ptLeft.y >= 60 && ptLeft.y <= 65 && ptRight.y <= 20 && ptRight.y >= 18)
																{
																	nPredLen = GetPredictedLength(2, 1046, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
																}
																else
																{
																	if (ptRight.y < 25)//65
																	{
																		if (ptLeft.y >= 69)
																		{
																			nPredLen = GetPredictedLength(2, 1095, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
																		}
																		else
																		{
																			nPredLen = GetPredictedLength(2, 1084, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
																		}
																	}
																	else
																	{
																		if (ptRight.y >= 26 && ptRight.y <= 36 && ptLeft.y >= 80 && ptLeft.y <= 85)
																		{
																			nPredLen = GetPredictedLength(2, 1056, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
																		}
																		else
																		{
																			if (ptRight.y >= 35 && ptLeft.y >= 85)
																			{
																				nPredLen = GetPredictedLength(2, 1053, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
																			}
																			else
																			{
																				if (ptRight.y >= 25 && ptLeft.y >= 80)
																				{
																					nPredLen = GetPredictedLength(2, 1040, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
																				}
																				else
																				{
																					nPredLen = GetPredictedLength(2, 1064, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					else
					{
						if (ptLeft.x <= 500)
						{
							if (ptLeft.x > 450 && ptLeft.x <= 500)
							{
								nPredLen = GetPredictedLength(2, 1069, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);//1047
							}
							else
							{
								if (ptRight.y > 30 && ptRight.y < 55 && ptLeft.y >= 90 && ptLeft.y <= 105 && ptLeft.x > 450)
								{
									nPredLen = GetPredictedLength(2, 1031, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
								}
								else
								{
									if (ptRight.y > 15 && ptRight.y < 30 && ptLeft.y >= 60 && ptLeft.y <= 74 && ptLeft.x > 450 && ptLeft.x < 500)
									{
										nPredLen = GetPredictedLength(2, 1078, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);//1047
									}
									else
									{
										if (ptRight.y > 25 && ptRight.y < 45 && ptLeft.y >= 80 && ptLeft.y <= 95 && ptLeft.x > 450 && ptLeft.x < 500)
										{
											nPredLen = GetPredictedLength(2, 1033, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
										}
										else
										{
											nPredLen = GetPredictedLength(2, 1078, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
										}
									}

								}
							}
						}
						else
						{
							if (ptLeft.x <= 612)
							{
								if (ptLeft.x > 582 && ptLeft.x <= 612)
								{
									nPredLen = GetPredictedLength(2, 1056, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
								}
								else
								{
									if (ptLeft.x > 500 && ptLeft.x <= 582)
									{
										nPredLen = GetPredictedLength(2, 1052, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
									}
									else
									{
										if (ptLeft.y >= 15 && ptLeft.y <= 45 && ptRight.y >= 8 && ptRight.y <= 50 && ptLeft.x > 550)
										{
											nPredLen = GetPredictedLength(2, 1042, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
										}
										else
										{
											if (ptLeft.y >= 30 && ptLeft.y <= 60 && ptRight.y >= 10 && ptRight.y <= 40 && ptLeft.x > 550)
											{
												nPredLen = GetPredictedLength(2, 1046, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
											}
											else
											{
												if (ptLeft.y >= 85 && ptLeft.y <= 100 && ptRight.y >= 35 && ptRight.y <= 55 && ptLeft.x > 550)
												{
													nPredLen = GetPredictedLength(2, 1031, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
												}
												else
												{
													if (ptLeft.y >= 70 && ptLeft.y <= 85 && ptRight.y >= 40 && ptRight.y <= 60 && ptLeft.x > 550)
													{
														nPredLen = GetPredictedLength(2, 1056, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
													}
													else
													{
														if (ptLeft.y >= 60 && ptLeft.y <= 72 && ptRight.y >= 28 && ptRight.y <= 38 && ptLeft.x > 550)
														{
															nPredLen = GetPredictedLength(2, 1062, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
														}
														else
														{
															if (ptLeft.y >= 50 && ptLeft.y <= 72 && ptRight.y >= 10 && ptRight.y <= 30 && ptLeft.x > 550)
															{
																nPredLen = GetPredictedLength(2, 1020, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
															}
															else
															{
																if (ptLeft.y >= 50 && ptLeft.y <= 60 && ptRight.y >= 12 && ptRight.y <= 25 && ptLeft.x > 550)
																{
																	nPredLen = GetPredictedLength(2, 1040, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
																}
																else
																{
																	if (ptLeft.y >= 60 && ptLeft.y <= 70 && ptRight.y >= 16 && ptRight.y <= 23 && ptLeft.x < 500)
																	{
																		nPredLen = GetPredictedLength(2, 1058, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
																	}
																	else
																	{
																		if (ptLeft.y >= 75 && ptLeft.y <= 83 && ptRight.y >= 25 && ptRight.y <= 35 && ptLeft.x < 500)
																		{
																			nPredLen = GetPredictedLength(2, 1031, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
																		}
																		else
																		{
																			if (ptLeft.y >= 78 && ptLeft.y <= 85 && ptRight.y <= 40 && ptRight.y >= 35)
																			{
																				nPredLen = GetPredictedLength(2, 1054, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
																			}
																			else
																			{
																				if (ptLeft.y >= 50 && ptLeft.y <= 63 && ptRight.y >= 16 && ptRight.y <= 26)
																				{
																					nPredLen = GetPredictedLength(2, 1075, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
																				}
																				else
																				{
																					if (ptLeft.y >= 68 && ptLeft.y <= 83 && ptRight.y >= 18 && ptRight.y <= 30)
																					{
																						nPredLen = GetPredictedLength(2, 1033, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
																					}
																					else
																					{
																						if (ptLeft.y >= 70)
																						{
																							nPredLen = GetPredictedLength(2, 1062, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
																						}
																						else
																						{
																							if (ptRight.y < 23 && ptLeft.y >= 60 && ptLeft.y <= 68)
																							{
																								nPredLen = GetPredictedLength(2, 1025, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
																							}
																							else
																							{
																								if (ptRight.y == 20 && ptLeft.y >= 60 && ptLeft.y <= 65)
																								{
																									if (nLenRef == 12000 && ptLeft.x >= 568 && ptLeft.x <= 571)
																									{
																										nPredLen = GetPredictedLength(2, 1020, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
																									}
																									else
																									{
																										nPredLen = GetPredictedLength(2, 1050, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
																									}
																								}
																								else
																								{
																									nPredLen = GetPredictedLength(2, 1050, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}

															}
														}

													}

												}
											}
										}
									}
								}
							}
							else
							{
								if (ptLeft.x >= 600 && ptLeft.x < 700)
								{
									nPredLen = GetPredictedLength(2, 1048, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
								}
								else
								{
									if (ptLeft.x >= 700 && ptLeft.x < 800)
									{
										nPredLen = GetPredictedLength(2, 1043, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
									}
									else
									{
										if (ptLeft.x >= 800 && ptLeft.x < 900)
										{
											nPredLen = GetPredictedLength(2, 1050, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
										}
										else
										{
											if (ptLeft.x >= 900 && ptLeft.x < 1000)
											{
												nPredLen = GetPredictedLength(2, 1049, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
											}
											else
											{
												if (ptLeft.x >= 1000 && ptLeft.x < 1100)
												{
													nPredLen = GetPredictedLength(2, 1047, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
												}
												else
												{
													if (ptLeft.x >= 1100 && ptLeft.x < 1200)
													{
														nPredLen = GetPredictedLength(2, 1051, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
													}
													else
													{
														if (ptLeft.y > 45 && ptLeft.y < 70 && ptRight.y >= 25 && ptRight.y <= 60 && ptLeft.x >= 800 && ptLeft.x < 900)
														{
															nPredLen = GetPredictedLength(2, 1022, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
														}
														else
														{
															if (ptRight.y > 15 && ptRight.y < 30 && ptLeft.y >= 40 && ptLeft.y <= 70 && ptLeft.x >= 800 && ptLeft.x < 900)
															{
																nPredLen = GetPredictedLength(2, 1062, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
															}
															else
															{
																if (ptLeft.y > 15 && ptLeft.y < 55 && ptRight.y >= 15 && ptRight.y <= 60 && ptLeft.x >= 900 && ptLeft.x < 1000)
																{
																	nPredLen = GetPredictedLength(2, 1037, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
																}
																else
																{
																	if (ptRight.y > 12 && ptRight.y < 30 && ptLeft.y >= 35 && ptLeft.y <= 65 && ptLeft.x < 1000 && ptLeft.x >= 900)
																	{
																		nPredLen = GetPredictedLength(2, 1067, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
																	}
																	else
																	{
																		if (ptRight.y > 26 && ptRight.y < 32 && ptLeft.y >= 60 && ptLeft.y <= 65)
																		{
																			nPredLen = GetPredictedLength(2, 1030, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
																		}
																		else
																		{
																			if (ptRight.y >= 30 && ptRight.y <= 36 && ptLeft.y >= 60 && ptLeft.y <= 66)
																			{
																				nPredLen = GetPredictedLength(2, 1052, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
																			}
																			else
																			{
																				if (ptRight.y > 25 && ptLeft.y >= 55 && ptLeft.y <= 65)
																				{
																					nPredLen = GetPredictedLength(2, 1090, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
																				}
																				else
																				{
																					if (ptRight.y <= 22 && ptLeft.y >= 30 && ptLeft.y < 45)
																					{
																						nPredLen = GetPredictedLength(2, 1053, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
																					}
																					else
																					{
																						if (ptRight.y <= 26 && ptLeft.y >= 50 && ptLeft.y <= 60)
																						{
																							nPredLen = GetPredictedLength(2, 1010, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
																						}
																						else
																						{
																							if (ptRight.y <= 25 && ptLeft.y < 65)
																							{
																								nPredLen = GetPredictedLength(2, 1053, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
																							}
																							else
																							{
																								if (ptRight.y < 23 && ptLeft.y >= 65 && ptLeft.y < 68)
																								{
																									nPredLen = GetPredictedLength(2, 1022, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
																								}
																								else
																								{
																									if (ptRight.y < 25)
																									{
																										nPredLen = GetPredictedLength(2, 1066, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);
																									}
																									else
																									{
																										nPredLen = GetPredictedLength(2, 1048, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nFoundCount, nReverseCount);//1050
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}

					//std::cout << "\n BG Sale = " << ptLeft.x << "\t" << ptLeft.y << "\t" << ptRight.x << "\t" << ptRight.y << "\t" << nPredLen << "\n";
					//cout << "nFoundCount = " << nFoundCount << "; Left = " << ptLeft.x << " ; Right = " << ptRight.x << " ; Length = " << nPredLen << endl;
					if (nPredLen > 0)
					{
						if (nPrevLenDetected == 0)//std::abs(nLenRef - nPredLen) <= CAM1_WARN_LEN_DIFF || 
						{
							vLogger->WriteCam2Log("Stacker = CD; (1) ReadLen = " + to_string(nPredLen) + "; PrevLen = " + to_string(nPrevLenDetected) + "; Frame = " + to_string(nFrameCnt) + "; X1 = " + to_string(ptLeft.x) + "; Y1 = " + to_string(ptLeft.y) + "; X2 = " + to_string(ptRight.x) + "; Y2 = " + to_string(ptRight.y) + "; HCnt = " + to_string(nFoundCount) + "; RCnt = " + to_string(nReverseCount), logtype::severity_level::info);
							return nPredLen;
						}
						else
						{
							if (std::abs(nLenRef - nPredLen) < std::abs(nLenRef - nPrevPredLen))
							{
								nPrevPredLen = nPredLen;
								ptLeftPrev.x = ptLeft.x;
								ptLeftPrev.y = ptLeft.y;
							}

							nPrevMinY = ptLeft.y;
							bFound = false;
							break;
						}
					}

				}
				/*else
				{
					cout << "CD Frame = " << nFrameCnt << " ; Left Edge not found " << endl;
				}*/
			}
		}
	}
	/*else
	{
		cout << "CD Frame = " << nFrameCnt << " ; Right Edge not found " << endl;
	}*/


	ptLeft.x = ptLeftPrev.x;
	ptLeft.y = ptLeftPrev.y;
	vLogger->WriteCam2Log("Stacker = CD; (2) ReadLen = " + to_string(nPrevPredLen) + "; PrevLen = " + to_string(nPrevLenDetected) + "; Frame = " + to_string(nFrameCnt) + "; X1 = " + to_string(ptLeft.x) + "; Y1 = " + to_string(ptLeft.y) + "; X2 = " + to_string(ptRight.x) + "; Y2 = " + to_string(ptRight.y) + "; HCnt = " + to_string(nFoundCount) + "; RCnt = " + to_string(nReverseCount), logtype::severity_level::info);
	return nPrevPredLen;// nPredLen;
}
/*
int CameraSource::detectABSaleLeftEdge_BG(int nLeftEdgeStart, int nABLeftEdgeBlock, const Mat & searchframe, cv::Point & ptLeft, cv::Point & ptRight)
{
	//cout << searchframe.cols << "\n";
	bool bFound = false;
	int nMinVal = 0, nMaxVal = 0;
	int nSearchStart = 0, nSearchEnd = 0;

	if (nLeftEdgeStart == 0)
	{
		nSearchStart = 200;
		nSearchEnd = 2300;

		if (nABLeftEdgeBlock > 5)
		{
			nSearchStart = stoi(lstStpPixelVal[nABLeftEdgeBlock - 1]);
		}
	}
	else
	{
		nSearchStart = 10;
		nSearchEnd = 1130;

		if (nABLeftEdgeBlock > 3 && nABLeftEdgeBlock < 7)
		{
			nSearchStart = lstStpPoint[nABLeftEdgeBlock - 1].x - nLeftEdgeStart + 5;
		}
	}

	//cout << "Search start = " << nSearchStart << "; bFound = " << bFound << "\n";
	//left edge
	for (int j = nSearchStart; j < nSearchEnd && bFound == false; j++)
	{
		if (j + nLeftEdgeStart < 500)
		{
			nMinVal = 65;
			nMaxVal = 85;
		}
		else if (j + nLeftEdgeStart < 700)
		{
			nMinVal = 55;
			nMaxVal = 75;
		}
		else if (j + nLeftEdgeStart < 935)
		{
			nMinVal = 45;
			nMaxVal = 65;
		}
		else if (j + nLeftEdgeStart < 1255)
		{
			nMinVal = 35;
			nMaxVal = 55;
		}
		else if (j + nLeftEdgeStart < 1560)
		{
			nMinVal = 25;
			nMaxVal = 45;
		}
		else if (j + nLeftEdgeStart < 1890)
		{
			nMinVal = 15;
			nMaxVal = 35;
		}
		else
		{
			nMinVal = 5;
			nMaxVal = 35;
		}

		//cout << "Search start = " << nSearchStart << "; Min-Max = " << nMinVal << "\t" << nMaxVal << "\n";

		for (int i = nMaxVal; i > nMinVal && bFound == false; i--)
		{

			//cout << i << " ; " << j << " ; " << static_cast<int>(searchframe.at<uchar>(i, j)) << "\n";

			if (static_cast<int>(searchframe.at<uchar>(i, j)) == 255)
			{

				bFound = true;
				for (int k = i - 1; k > i - 3; k--)
				{
					if (static_cast<int>(searchframe.at<uchar>(k, j)) != 255)
					{
						bFound = false;
						break;
					}
				}
				if (bFound)
				{
					ptLeft.x = j + nLeftEdgeStart;
					ptLeft.y = i;

					//return j;
				}
			}
		}
	}
	//cout << "Left = " << ptLeft.x << "\n";

	if (bFound)
	{
		//cout << "Left edge found at " << ptLeft.x ;
		bFound = false;

		nSearchStart = 3650 - nLeftEdgeStart;
		nSearchEnd = 3700 - nLeftEdgeStart;

		//right edge
		for (int i = 50; i > 15 && bFound == false; i--)
		{
			for (int j = nSearchEnd; j > nSearchStart && bFound == false; j--)
			{
				//cout << i << " ; " << j << " ; " << static_cast<int>(searchframe.at<uchar>(i, j)) << "\n";

				if (static_cast<int>(searchframe.at<uchar>(i, j)) == 255)
				{

					bFound = true;
					for (int k = i + 1; k < i + 1; k++)
					{
						if (static_cast<int>(searchframe.at<uchar>(k, j)) != 255)
						{
							bFound = false;
							break;
						}
					}
					if (bFound)
					{
						ptRight.x = j + nLeftEdgeStart;
						ptRight.y = i;
						//return j;
					}
				}
			}

		}
	}

	if (bFound)
	{
		//cout << "Search start = " << nSearchStart << "; End = " << nSearchEnd << "; nABLeftEdgeBlock = " << nABLeftEdgeBlock << " ; Left = " << ptLeft.x << "\n";

		int nPredLen = GetPredictedLength(0.65,0.35, ptLeft.x, ptRight.x);
		//cout << "Left edge found at " << ptLeft.x << "; Right edge found at " << ptRight.x << "; Pred Len = " << nPredLen << "; nABLeftEdgeBlock = " << nABLeftEdgeBlock << "\n";
		//std::cout << "\n BG Sale = " << rectLeft.x << "\t" << rectLeft.y << "\t" << rectLeft.width << "\t" << rectLeft.height << "\t" << nPredLen << "\n";

		return nPredLen;
	}
	return 0;
}
*/
int CameraSource::detectABSaleLeftEdge_BG(int nLeftEdgeStart, int nFrameCnt, int nLenDetectCount, int nLenRef, int nPrevLenDetected, const Mat & searchframe, cv::Point & ptLeft, cv::Point & ptRight)
{
	//cout << searchframe.cols << "\n";
	bool bFound = false;
	int nMinVal = 0, nMaxVal = 0;
	int nSearchStart = 0, nSearchEnd = 0;
	int nVerticalStart = 0, nVerticalEnd = 0;
	int nCurrTryCount = 0, nTargetTryCount = 2;
	int nHFoundCount = 0, nReverseCount = 0;
	int nPrevFoundCount = 0;
	int nLoopCount = 0;
	int nStartLoopCnt = 0;
	int nPrevMinY = 0;
	int nPredLen = 0;
	int nPrevPredLen = 0;
	cv::Point ptLeftPrev;

	//right edge
	bFound = false;

	nSearchStart = 3630 - nLeftEdgeStart;
	nSearchEnd = 3690 - nLeftEdgeStart;

	ptRight.x = 0;
	ptRight.y = 0;
	ptLeft.x = 0;
	ptLeft.y = 0;
	nCurrTryCount = 0;
	while (nCurrTryCount < nTargetTryCount && bFound == false)
	{
		nCurrTryCount = nCurrTryCount + 1;
		if (nCurrTryCount == 1)
		{
			nVerticalStart = 48;
			nVerticalEnd = 95;
		}
		else
		{
			nVerticalStart = 20;
			nVerticalEnd = 48;
		}

		for (int i = nVerticalStart; i <= nVerticalEnd && bFound == false; i++)
		{
			for (int j = nSearchEnd; j > nSearchStart && bFound == false; j--)
			{

				//cout << i << " ; " << j << " ; " << static_cast<int>(searchframe.at<uchar>(i, j)) << "\n";

				if (static_cast<int>(searchframe.at<uchar>(i, j)) == 255)
				{

					//bFound = true;
					nHFoundCount = 0;
					try
					{
						for (int k = i; k <= i + 2; k++)
						{
							for (int m = j; m > j - 40; m--)
							{
								if (static_cast<int>(searchframe.at<uchar>(k, m)) == 255)
								{
									nHFoundCount = nHFoundCount + 1;
								}
							}
						}
					}

					catch (const std::exception&)
					{
						cout << i << " " << j << endl;
					}
					catch (cv::Exception& e)
					{
						const char* err_msg = e.what();
						cout << i << " " << j << endl;
					}

					if (nHFoundCount > 60)//bFound//30
					{
						ptRight.x = j + nLeftEdgeStart;
						if (ptRight.x < 3655)
						{
							//vLogger->WriteCam1Log("AB nFrameCnt = " + to_string(nFrameCnt) + "; Right Edge modified to 3645. Actual found at = " + to_string(ptRight.x), logtype::severity_level::info);
							ptRight.x = 3655;
						}
						ptRight.y = i;
						bFound = true;
					}
				}
			}
		}
	}

	if (bFound == false)
	{
		ptRight.x = 3655;
		ptRight.y = 65;
		bFound = true;
	}
	//cout << "Search start = " << nSearchStart << "; bFound = " << bFound << "\n";
	//left edge
	if (bFound)
	{
		//fixing the right edge
		ptRight.x = 3655;

		bFound = false;
		nSearchStart = 0;
		nStartLoopCnt = 0;

		if (nLeftEdgeStart == 0)
		{
			nSearchEnd = 2200;
		}
		else
		{
			nSearchEnd = 1500;
		}

		//nSearchStart = compareLenWithLeftEdge(1, nLenRef, 0, true) - 20;

		if (nSearchStart <= 0)
		{
			if (nLeftEdgeStart == 0)
			{
				nSearchStart = 280;

				if (nLenRef <= 16000)
				{
					nSearchStart = 1850;
				}
				else if (nLenRef <= 17500)
				{
					nSearchStart = 1700;
				}
				else if (nLenRef <= 18000)
				{
					nSearchStart = 1600;
				}
				else if (nLenRef <= 18900)
				{
					nSearchStart = 1515;
				}
				else if (nLenRef <= 19820)
				{
					nSearchStart = 1350;
				}
				else if (nLenRef <= 23800)
				{
					nSearchStart = 960;
				}
				else if (nLenRef <= 25000)
				{
					nSearchStart = 830;
				}
				else if (nLenRef <= 28000)
				{
					nSearchStart = 560;
				}
			}
			else
			{
				nSearchStart = 100;

				if (nStartLoopCnt < 2)
				{
					if (nLenRef < 6100)
					{
						nSearchStart = 1150;
					}
					else if (nLenRef <= 8500)
					{
						nSearchStart = 950;
					}
					else if (nLenRef < 10000)
					{
						nSearchStart = 800;
					}
					else if (nLenRef <= 11200)
					{
						nSearchStart = 650;
					}
					else if (nLenRef <= 12500)
					{
						nSearchStart = 435;
					}
					else if (nLenRef <= 13750)
					{
						nSearchStart = 315;
					}
					else if (nLenRef <= 14500)
					{
						nSearchStart = 200;
					}
				}
			}
		}
		while (nStartLoopCnt < 1 && bFound == false)
		{
			nStartLoopCnt = nStartLoopCnt + 1;
			if (nStartLoopCnt > 1)
			{
				if (nLeftEdgeStart == 0 || nSearchStart == 100)
				{
					break;
				}

			}
			nLoopCount = 0;
			nPrevPredLen = 0;
			ptLeftPrev.x = 0;
			ptLeftPrev.y = 0;
			while (nLoopCount < 3)
			{
				nLoopCount = nLoopCount + 1;

				vLogger->WriteCam1Log("Stacker = AB; Frame = " + to_string(nFrameCnt) + "; LoopCount = " + to_string(nLoopCount) + "; X1 = " + to_string(ptLeft.x) + "; Y1 = " + to_string(ptLeft.y) + "; X2 = " + to_string(ptRight.x) + "; Y2 = " + to_string(ptRight.y), logtype::severity_level::info);

				bFound = false;
				nPredLen = 0;
				nHFoundCount = 0;
				nReverseCount = 0;
				for (int j = nSearchStart; j < nSearchEnd && bFound == false; j++)
				{
					if (j + nLeftEdgeStart < 500)
					{
						nMinVal = 35;//65
						nMaxVal = 75;
					}
					else if (j + nLeftEdgeStart < 720)
					{
						nMinVal = 30;//55
						nMaxVal = 75;
					}
					else if (j + nLeftEdgeStart < 935)
					{
						nMinVal = 25;//40
						nMaxVal = 70;//65
					}
					else if (j + nLeftEdgeStart < 1255)
					{
						nMinVal = 20;//27
						nMaxVal = 70;//55
					}
					else if (j + nLeftEdgeStart < 1560)
					{
						nMinVal = 20;//25
						nMaxVal = 70;//45
					}
					else if (j + nLeftEdgeStart < 1890)
					{
						nMinVal = 15;//25
						nMaxVal = 60;//40
					}
					else if (j + nLeftEdgeStart < 2290)
					{
						nMinVal = 12;
						nMaxVal = 60;//40
					}
					else if (j + nLeftEdgeStart < 2610)
					{
						nMinVal = 12;
						nMaxVal = 60;
					}
					else if (j + nLeftEdgeStart < 2910)
					{
						nMinVal = 12;
						nMaxVal = 50;
					}
					else if (j + nLeftEdgeStart < 3215)
					{
						nMinVal = 12;
						nMaxVal = 50;
					}
					else
					{
						nMinVal = 15;
						nMaxVal = 45;
					}

					if (nLeftEdgeStart > 0)
					{
						if (ptRight.y >= 35)
						{
							nMinVal = ptRight.y - 25;
						}
						else
						{
							nMinVal = 10;
						}
						//nMinVal = ptRight.y - 10;wa

						if (ptRight.y >= 65)
						{
							//nMinVal = ptRight.y - 30;// 25;
							nMaxVal = ptRight.y - 3;
						}
						else
						{
							//nMinVal = 10;
							if (ptRight.y >= 27)
							{
								nMaxVal = ptRight.y - 3;
							}
							else
							{
								if (nMaxVal > ptRight.y + 12)
								{
									nMaxVal = ptRight.y + 12;
								}
							}
						}

					}

					if (nLoopCount > 1 && nPrevMinY > 0)
					{
						nMinVal = nPrevMinY + 1;
					}

					for (int i = nMinVal; i < nMaxVal && bFound == false; i++)
					{

						//cout << i << " ; " << j << " ; " << static_cast<int>(searchframe.at<uchar>(i, j)) << "\n";

						if (static_cast<int>(searchframe.at<uchar>(i, j)) == 255)
						{

							nHFoundCount = 0;
							for (int k = i; k <= i + 3; k++)
							{
								for (int m = j; m < j + 40; m++)
								{
									if (static_cast<int>(searchframe.at<uchar>(k, m)) == 255)
									{
										nHFoundCount = nHFoundCount + 1;
									}
								}
							}

							/*if (nLenRef < 7000)
							{
								vLogger->WriteCam1Log("AB nFrameCnt = " + to_string(nFrameCnt) + "; nHFoundCount = " + to_string(nHFoundCount) + "; J = " + to_string(j), logtype::severity_level::info);
							}*/
							//
							if (nHFoundCount >= 130)// && nVFoundCount < 30
							{
								//cout << "AB Frame = " << nFrameCnt << " ; nHFoundCount = " << nHFoundCount << " ; nVFoundCount = " << nVFoundCount << "\n";
								ptLeft.x = j + nLeftEdgeStart;
								ptLeft.y = i;
								bFound = true;
								//

								nReverseCount = 0;
								for (int k = i - 2; k <= i + 4; k++)
								{
									for (int m = j; m > j - 60; m--)
									{
										if (static_cast<int>(searchframe.at<uchar>(k, m)) == 255)
										{
											nReverseCount = nReverseCount + 1;
										}
									}
								}

								/*if (nLenRef < 7000)
								{
									vLogger->WriteCam1Log("AB nFrameCnt = " + to_string(nFrameCnt) + "; nReverseCount = " + to_string(nReverseCount) + "; J = " + to_string(j), logtype::severity_level::info);
								}*/
								if (nPrevLenDetected > 0)//nLenDetectCount > 0
								{
									//vLogger->WriteCam1Log("AB nFrameCnt = " + to_string(nFrameCnt) + "; nReverseCount = " + to_string(nReverseCount) + "; J = " + to_string(j), logtype::severity_level::info);
									if (nLenRef == 27000 || nLenRef == 11500 || nLenRef == 9000)
									{
										if (nReverseCount > 100)//11.5 100
										{
											bFound = false;
										}
									}
									else
									{
										if (nReverseCount > 35)//11.5 100
										{
											bFound = false;
										}
									}

									/*if (j > 110)
									{
										if (nReverseCount > 100)
										{
											bFound = false;
										}
									}*/
								}
							}
						}
					}
				}
				//cout << "Left = " << ptLeft.x << "\n";

				if (bFound)
				{
					//cout << "nHFoundCount = " << nHFoundCount << " ; nVFoundCount = " << nVFoundCount << " ; Left = " << ptLeft.x << "\n";

					//cout << "Search start = " << nSearchStart << "; End = " << nSearchEnd << "; nABLeftEdgeBlock = " << nABLeftEdgeBlock << " ; Left = " << ptLeft.x << "\n";
					nPredLen = 0;
					if (nLeftEdgeStart == 0)
					{
						if (ptLeft.x >= 1900 && ptLeft.x < 2000)
						{
							nPredLen = GetPredictedLength(1, 1052, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
						}
						else
						{
							if (ptLeft.x >= 1800 && ptLeft.x < 1900)
							{
								nPredLen = GetPredictedLength(1, 1051, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
							}
							else
							{
								if (ptLeft.x >= 1700 && ptLeft.x < 1800)
								{
									nPredLen = GetPredictedLength(1, 1047, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
								}
								else
								{
									if (ptLeft.y >= 30 && ptLeft.y <= 60 && ptRight.y >= 70 && ptRight.y <= 95 && ptLeft.x > 1800)
									{
										nPredLen = GetPredictedLength(1, 1050, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
									}
									else
									{
										if (ptLeft.y >= 20 && ptLeft.y <= 38 && ptRight.y >= 40 && ptRight.y <= 48 && ptLeft.x > 1800)
										{
											nPredLen = GetPredictedLength(1, 1032, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
										}
										else
										{
											if (ptRight.y > 40 && ptLeft.y <= 35 && ptLeft.x > 1800)
											{
												nPredLen = GetPredictedLength(1, 1037, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
											}
											else
											{
												if (ptLeft.x > 1300)
												{
													if (ptLeft.x >= 1300 && ptLeft.x < 1400)
													{
														nPredLen = GetPredictedLength(1, 1054, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
													}
													else
													{
														if (ptLeft.x >= 1400 && ptLeft.x < 1500)
														{
															nPredLen = GetPredictedLength(1, 1051, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
														}
														else
														{
															if (ptLeft.x >= 1500 && ptLeft.x < 1550)
															{
																nPredLen = GetPredictedLength(1, 1050, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
															}
															else
															{
																if (ptLeft.x >= 1550 && ptLeft.x < 1600)
																{
																	nPredLen = GetPredictedLength(1, 1051, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																}
																else
																{
																	if (ptLeft.x >= 1600 && ptLeft.x < 1700)
																	{
																		nPredLen = GetPredictedLength(1, 1051, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																	}
																	else
																	{
																		if (ptLeft.x > 1400 && ptLeft.x <= 1500 && ptLeft.y >= 15 && ptLeft.y <= 50 && ptRight.y >= 40 && ptRight.y <= 85)
																		{
																			nPredLen = GetPredictedLength(1, 1041, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																		}
																		else
																		{
																			if (ptLeft.x > 1600 && ptLeft.y >= 15 && ptLeft.y <= 50 && ptRight.y >= 20 && ptRight.y <= 50)
																			{
																				nPredLen = GetPredictedLength(1, 1055, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																			}
																			else
																			{
																				if (ptLeft.x > 1600 && ptLeft.x < 1700 && ptLeft.y >= 15 && ptLeft.y <= 50 && ptRight.y >= 55 && ptRight.y <= 80)
																				{
																					nPredLen = GetPredictedLength(1, 1053, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																				}
																				else
																				{
																					if (ptLeft.x > 1600 && ptLeft.x < 1700 && ptLeft.y >= 50 && ptLeft.y <= 70 && ptRight.y >= 75 && ptRight.y <= 95)
																					{
																						nPredLen = GetPredictedLength(1, 1051, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																					}
																					else
																					{
																						if (ptLeft.x > 1600 && ptLeft.x < 1700 && ptLeft.y >= 30 && ptLeft.y <= 50 && ptRight.y >= 75 && ptRight.y <= 95)
																						{
																							nPredLen = GetPredictedLength(1, 1055, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																						}
																						else
																						{
																							if (ptLeft.x >= 1700 && ptLeft.x < 1800 && ptLeft.y >= 15 && ptLeft.y <= 55 && ptRight.y >= 60 && ptRight.y <= 90)
																							{
																								nPredLen = GetPredictedLength(1, 1049, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																							}
																							else
																							{
																								if (ptLeft.x < 1500 && ptLeft.y >= 30 && ptLeft.y <= 55 && ptRight.y >= 75 && ptRight.y <= 95)
																								{
																									nPredLen = GetPredictedLength(1, 1056, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																								}
																								else
																								{
																									if (ptLeft.y >= 15 && ptLeft.y <= 40 && ptRight.y >= 20 && ptRight.y <= 38)
																									{
																										nPredLen = GetPredictedLength(1, 1045, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																									}
																									else
																									{
																										if (ptLeft.y >= 40 && ptLeft.y <= 60 && ptRight.y >= 40 && ptRight.y <= 60)
																										{
																											nPredLen = GetPredictedLength(1, 1057, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																										}
																										else
																										{
																											if (ptLeft.y >= 50 && ptLeft.y <= 70 && ptRight.y >= 30 && ptRight.y <= 55)
																											{
																												nPredLen = GetPredictedLength(1, 1049, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																											}
																											else
																											{
																												if (ptRight.y <= 30)
																												{
																													if (ptLeft.y >= 20 && ptLeft.y <= 40)
																													{
																														nPredLen = GetPredictedLength(1, 1054, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																													}
																													else
																													{
																														nPredLen = GetPredictedLength(1, 1066, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																													}
																												}
																												else
																												{
																													if (ptLeft.y <= 43)
																													{
																														nPredLen = GetPredictedLength(1, 1060, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																													}
																													else
																													{
																														nPredLen = GetPredictedLength(1, 1038, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
												else
												{
													if (ptLeft.x < 650)
													{
														if (ptLeft.x >= 600 && ptLeft.x < 700)
														{
															nPredLen = GetPredictedLength(1, 1061, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
														}
														else
														{
															if (ptLeft.y >= 30 && ptLeft.y <= 70 && ptRight.y >= 60 && ptRight.y <= 90)
															{
																nPredLen = GetPredictedLength(1, 1058, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
															}
															else
															{
																if (ptLeft.y >= 60 && ptLeft.y <= 75 && ptRight.y >= 32 && ptRight.y <= 46)
																{
																	nPredLen = GetPredictedLength(1, 1020, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																}
																else
																{
																	if (ptLeft.y >= 40 && ptLeft.y <= 60 && ptRight.y >= 30 && ptRight.y <= 50)
																	{
																		nPredLen = GetPredictedLength(1, 1066, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																	}
																	else
																	{
																		nPredLen = GetPredictedLength(1, 1065, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																	}
																}
															}
														}
													}
													else
													{
														if (ptLeft.x >= 900 && ptLeft.x < 1010)
														{
															nPredLen = GetPredictedLength(1, 1056, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
														}
														else
														{
															if (ptLeft.x >= 1010 && ptLeft.x < 1100)
															{
																nPredLen = GetPredictedLength(1, 1057, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
															}
															else
															{
																if (ptLeft.x >= 680 && ptLeft.x < 800)
																{
																	nPredLen = GetPredictedLength(1, 1055, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																}
																else
																{
																	if (ptLeft.y >= 60 && ptLeft.y <= 78 && ptRight.y >= 35 && ptRight.y <= 50 && ptLeft.x < 750)
																	{
																		nPredLen = GetPredictedLength(1, 1050, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																	}
																	else
																	{
																		if (ptLeft.y >= 30 && ptLeft.y <= 60 && ptRight.y >= 40 && ptRight.y <= 95 && ptLeft.x > 900 && ptLeft.x < 1010)
																		{
																			nPredLen = GetPredictedLength(1, 1059, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																		}
																		else
																		{
																			if (ptLeft.y >= 50 && ptLeft.y <= 70 && ptRight.y >= 40 && ptRight.y <= 60 && ptLeft.x < 1010)
																			{
																				nPredLen = GetPredictedLength(1, 1063, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																			}
																			else
																			{
																				if (ptLeft.y >= 50 && ptLeft.y <= 70 && ptRight.y >= 28 && ptRight.y <= 50 && ptLeft.x < 1010)
																				{
																					nPredLen = GetPredictedLength(1, 1052, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																				}
																				else
																				{
																					if (ptLeft.y >= 30 && ptLeft.y <= 44 && ptRight.y >= 25 && ptRight.y <= 50 && ptLeft.x < 1000)
																					{
																						nPredLen = GetPredictedLength(1, 1051, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																					}
																					else
																					{
																						if (ptLeft.y >= 20 && ptLeft.y <= 40 && ptRight.y >= 20 && ptRight.y <= 44 && ptLeft.x < 1200)
																						{
																							nPredLen = GetPredictedLength(1, 1058, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																						}
																						else
																						{
																							if (ptLeft.y >= 55 && ptLeft.y <= 65 && ptRight.y >= 40 && ptRight.y <= 50 && ptLeft.x < 1200)
																							{
																								nPredLen = GetPredictedLength(1, 1051, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																							}
																							else
																							{
																								if (ptLeft.y >= 65 && ptLeft.y <= 75 && ptRight.y >= 32 && ptRight.y <= 46 && ptLeft.x < 1200)
																								{
																									nPredLen = GetPredictedLength(1, 1017, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																								}
																								else
																								{
																									if (ptLeft.y >= 40 && ptLeft.y <= 50 && ptRight.y >= 30 && ptRight.y <= 40 && ptLeft.x < 1300)
																									{
																										nPredLen = GetPredictedLength(1, 1055, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																									}
																									else
																									{
																										if (ptLeft.y >= 55 && ptLeft.y <= 75 && ptRight.y >= 75 && ptRight.y <= 95 && ptLeft.x > 1300)
																										{
																											nPredLen = GetPredictedLength(1, 1046, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																										}
																										else
																										{
																											if (ptLeft.y >= 35 && ptLeft.y <= 50 && ptRight.y >= 20 && ptRight.y <= 40 && ptLeft.x < 1400)
																											{
																												nPredLen = GetPredictedLength(1, 1031, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																											}
																											else
																											{
																												if (ptLeft.y >= 50 && ptLeft.y <= 60 && ptRight.y >= 30 && ptRight.y <= 45 && ptLeft.x <= 1400)
																												{
																													nPredLen = GetPredictedLength(1, 1049, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																												}
																												else
																												{
																													if (ptLeft.y >= 40 && ptLeft.y <= 64 && ptRight.y >= 28 && ptRight.y <= 46 && ptLeft.x < 1400)
																													{
																														nPredLen = GetPredictedLength(1, 1032, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																													}
																													else
																													{
																														if (ptLeft.y >= 50 && ptLeft.y >= 43)
																														{
																															nPredLen = GetPredictedLength(1, 1051, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);//1046
																														}
																														else
																														{
																															nPredLen = GetPredictedLength(1, 1066, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					else
					{
						if (ptLeft.x >= 2000 && ptLeft.x < 2100)
						{
							nPredLen = GetPredictedLength(1, 1050, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);//14100
						}
						else
						{
							if (ptLeft.x < 2100 && ptLeft.y >= 30 && ptLeft.y <= 50 && ptRight.y >= 75 && ptRight.y <= 95)
							{
								nPredLen = GetPredictedLength(1, 1049, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
							}
							else
							{
								if (ptLeft.x < 2100 && ptLeft.y >= 15 && ptLeft.y <= 40 && ptRight.y >= 50 && ptRight.y <= 80)
								{
									nPredLen = GetPredictedLength(1, 1054, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
								}
								else
								{
									if (ptLeft.x < 2100 && ptLeft.y >= 30 && ptLeft.y <= 42 && ptRight.y >= 40 && ptRight.y <= 49)
									{
										nPredLen = GetPredictedLength(1, 1057, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
									}
									else
									{
										if (ptLeft.x < 2100 && ptLeft.y >= 12 && ptLeft.y <= 32 && ptRight.y >= 20 && ptRight.y <= 45)
										{
											nPredLen = GetPredictedLength(1, 1024, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
										}
										else
										{
											if (ptLeft.x >= 2100 && ptLeft.x < 2200)
											{
												nPredLen = GetPredictedLength(1, 1049, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);//14100
											}
											else
											{
												if (ptLeft.x >= 2200 && ptLeft.x < 2300)
												{
													nPredLen = GetPredictedLength(1, 1049, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
												}
												else
												{
													if (ptLeft.x >= 2300 && ptLeft.x < 2400)
													{
														nPredLen = GetPredictedLength(1, 1045, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
													}
													else
													{
														if (ptLeft.x >= 2400 && ptLeft.x < 2500)
														{
															nPredLen = GetPredictedLength(1, 1045, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
														}
														else
														{
															if (ptLeft.x >= 2500 && ptLeft.x < 2600)
															{
																nPredLen = GetPredictedLength(1, 1044, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
															}
															else
															{
																if (ptLeft.x >= 2600 && ptLeft.x < 2700)
																{
																	nPredLen = GetPredictedLength(1, 1044, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																}
																else
																{
																	if (ptLeft.x >= 2700 && ptLeft.x < 2800)
																	{
																		nPredLen = GetPredictedLength(1, 1040, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																	}
																	else
																	{
																		if (ptLeft.x >= 2800 && ptLeft.x < 2900)
																		{
																			nPredLen = GetPredictedLength(1, 1034, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																		}
																		else
																		{
																			if (ptLeft.x >= 2900 && ptLeft.x < 3000)
																			{
																				nPredLen = GetPredictedLength(1, 1032, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																			}
																			else
																			{
																				if (ptLeft.x >= 3000 && ptLeft.x < 3100)
																				{
																					nPredLen = GetPredictedLength(1, 1030, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																				}
																				else
																				{
																					if (ptLeft.x >= 3100 && ptLeft.x < 3200)
																					{
																						nPredLen = GetPredictedLength(1, 1038, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}

												if (nPredLen == 0)
												{
													if (ptLeft.x < 2200 && ptLeft.y >= 30 && ptLeft.y <= 50 && ptRight.y >= 80 && ptRight.y <= 95)
													{
														nPredLen = GetPredictedLength(1, 1054, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
													}
													else
													{
														if (ptLeft.x < 2200 && ptLeft.y >= 28 && ptLeft.y <= 44 && ptRight.y >= 40 && ptRight.y <= 49)
														{
															nPredLen = GetPredictedLength(1, 1032, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
														}
														else
														{
															if (ptLeft.x < 2200 && ptLeft.y >= 15 && ptLeft.y <= 30 && ptRight.y >= 20 && ptRight.y <= 44)
															{
																nPredLen = GetPredictedLength(1, 1054, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
															}
															else
															{
																if (ptLeft.x < 2200 && ptLeft.y >= 15 && ptLeft.y <= 33 && ptRight.y >= 20 && ptRight.y <= 55)
																{
																	nPredLen = GetPredictedLength(1, 1023, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																}
																else
																{
																	if (ptLeft.x >= 2200 && ptLeft.x < 2300 && ptLeft.y >= 25 && ptLeft.y <= 50 && ptRight.y >= 60 && ptRight.y <= 80)
																	{
																		nPredLen = GetPredictedLength(1, 1053, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																	}
																	else
																	{
																		if (ptLeft.x < 2300 && ptLeft.y >= 15 && ptLeft.y <= 45 && ptRight.y >= 20 && ptRight.y <= 50)
																		{
																			nPredLen = GetPredictedLength(1, 1057, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																		}
																		else
																		{
																			if (ptLeft.x > 2300 && ptLeft.x < 2400 && ptLeft.y >= 12 && ptLeft.y <= 30 && ptRight.y >= 40 && ptRight.y <= 50)
																			{
																				nPredLen = GetPredictedLength(1, 1045, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																			}
																			else
																			{
																				if (ptLeft.x > 2400 && ptLeft.x < 2500 && ptLeft.y >= 25 && ptLeft.y <= 45 && ptRight.y >= 40 && ptRight.y <= 60)
																				{
																					nPredLen = GetPredictedLength(1, 1053, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);//right edge 3650
																				}
																				else
																				{
																					if (ptLeft.x > 2400 && ptLeft.x < 2500 && ptLeft.y >= 20 && ptLeft.y <= 55 && ptRight.y >= 60 && ptRight.y <= 90)
																					{
																						nPredLen = GetPredictedLength(1, 1043, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);//right edge 3650
																					}
																					else
																					{
																						if (ptLeft.x > 2300 && ptLeft.x < 2500 && ptLeft.y >= 12 && ptLeft.y <= 15 && ptRight.y >= 20 && ptRight.y <= 30)//nLenRef == 12000
																						{
																							nPredLen = GetPredictedLength(1, 1042, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																						}
																						else
																						{
																							if (ptLeft.x > 2300 && ptLeft.x < 2500 && ptLeft.y >= 15 && ptLeft.y <= 48 && ptRight.y >= 20 && ptRight.y <= 50)
																							{
																								nPredLen = GetPredictedLength(1, 1052, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																							}
																							else
																							{
																								if (ptLeft.x < 2500 && ptLeft.y >= 12 && ptLeft.y <= 30 && ptRight.y >= 20 && ptRight.y <= 42)
																								{
																									nPredLen = GetPredictedLength(1, 1022, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																								}
																								else
																								{
																									if (ptLeft.x >= 2500 && ptLeft.x < 2600 && ptLeft.y >= 12 && ptLeft.y <= 40 && ptRight.y >= 20 && ptRight.y <= 50)
																									{
																										nPredLen = GetPredictedLength(1, 1019, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																									}
																									else
																									{
																										if (ptLeft.x >= 2500 && ptLeft.x < 2600 && ptLeft.y >= 30 && ptLeft.y <= 55 && ptRight.y >= 55 && ptRight.y <= 80)
																										{
																											nPredLen = GetPredictedLength(1, 1047, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																										}
																										else
																										{
																											if (ptLeft.x >= 2600 && ptLeft.x < 2700 && ptLeft.y >= 15 && ptLeft.y <= 55 && ptRight.y >= 40 && ptRight.y <= 85)
																											{
																												nPredLen = GetPredictedLength(1, 1031, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																											}
																											else
																											{
																												if (ptLeft.x < 2600 && ptLeft.y >= 15 && ptLeft.y <= 40 && ptRight.y >= 40 && ptRight.y <= 50)
																												{
																													nPredLen = GetPredictedLength(1, 1001, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																												}
																												else
																												{
																													if (ptLeft.x < 2200 && ptLeft.y >= 25 && ptLeft.y <= 42 && ptRight.y >= 35 && ptRight.y <= 50)
																													{
																														nPredLen = GetPredictedLength(1, 1054, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																													}
																													else
																													{
																														if (ptLeft.x < 2200 && ptLeft.y >= 12 && ptLeft.y <= 30 && ptRight.y >= 30 && ptRight.y <= 55)
																														{
																															nPredLen = GetPredictedLength(1, 1045, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																														}
																														else
																														{
																															if (ptLeft.x < 2800 && ptLeft.y >= 35 && ptLeft.y <= 70 && ptRight.y >= 75 && ptRight.y <= 95)
																															{
																																nPredLen = GetPredictedLength(1, 1040, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																															}
																															else
																															{
																																if (ptLeft.x < 2800 && ptLeft.x > 2200 && ptLeft.y >= 12 && ptLeft.y <= 50 && ptRight.y >= 70 && ptRight.y <= 95)
																																{
																																	nPredLen = GetPredictedLength(1, 1000, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																																}
																																else
																																{
																																	if (ptLeft.x < 2800 && ptLeft.y >= 12 && ptLeft.y <= 40 && ptRight.y >= 35 && ptRight.y <= 50)
																																	{
																																		nPredLen = GetPredictedLength(1, 1042, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																																	}
																																	else
																																	{
																																		if (ptLeft.x < 2800 && ptLeft.y >= 12 && ptLeft.y <= 23 && ptRight.y >= 20 && ptRight.y <= 28)
																																		{
																																			nPredLen = GetPredictedLength(1, 1056, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																																		}
																																		else
																																		{
																																			if (ptLeft.x < 2900 && ptLeft.y >= 35 && ptLeft.y <= 65 && ptRight.y >= 75 && ptRight.y <= 95)
																																			{
																																				nPredLen = GetPredictedLength(1, 1033, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																																			}
																																			else
																																			{
																																				if (ptLeft.x < 2900 && ptLeft.x > 2800 && ptLeft.y >= 35 && ptLeft.y <= 65 && ptRight.y >= 60 && ptRight.y <= 75)
																																				{
																																					nPredLen = GetPredictedLength(1, 1047, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																																				}
																																				else
																																				{
																																					if (ptLeft.x < 2900 && ptLeft.y >= 30 && ptLeft.y <= 37 && ptRight.y >= 20 && ptRight.y <= 28)
																																					{
																																						nPredLen = GetPredictedLength(1, 1050, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																																					}
																																					else
																																					{
																																						if (ptLeft.x < 2900 && ptLeft.x > 2800 && ptLeft.y >= 15 && ptLeft.y <= 30 && ptRight.y >= 20 && ptRight.y <= 45)
																																						{
																																							nPredLen = GetPredictedLength(1, 1049, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																																						}
																																						else
																																						{
																																							if (ptLeft.x < 2900 && ptLeft.x > 2800 && ptLeft.y >= 15 && ptLeft.y <= 30 && ptRight.y >= 40 && ptRight.y <= 55)
																																							{
																																								nPredLen = GetPredictedLength(1, 1025, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																																							}
																																							else
																																							{
																																								if (ptLeft.x < 3000 && ptLeft.x > 2900 && ptLeft.y >= 35 && ptLeft.y <= 65 && ptRight.y >= 75 && ptRight.y <= 90)
																																								{
																																									nPredLen = GetPredictedLength(1, 1035, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																																								}
																																								else
																																								{
																																									if (ptLeft.x < 3000 && ptLeft.x > 2900 && ptLeft.y >= 15 && ptLeft.y <= 27 && ptRight.y >= 35 && ptRight.y <= 50)
																																									{
																																										nPredLen = GetPredictedLength(1, 1014, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																																									}
																																									else
																																									{
																																										if (ptLeft.x > 3100 && ptLeft.y >= 30 && ptLeft.y <= 47 && ptRight.y >= 40 && ptRight.y <= 50)
																																										{
																																											nPredLen = GetPredictedLength(1, 1000, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																																										}
																																										else
																																										{
																																											if (ptLeft.x > 3000 && ptLeft.y >= 25 && ptLeft.y <= 40 && ptRight.y >= 30 && ptRight.y <= 42)
																																											{
																																												nPredLen = GetPredictedLength(1, 1052, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																																											}
																																											else
																																											{
																																												if (ptLeft.y >= 38 && ptLeft.y <= 44 && ptRight.y >= 40 && ptRight.y <= 49)
																																												{
																																													nPredLen = GetPredictedLength(1, 1022, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																																												}
																																												else
																																												{
																																													if (ptLeft.y >= 28 && ptLeft.y <= 44 && ptRight.y >= 40 && ptRight.y <= 49)
																																													{
																																														nPredLen = GetPredictedLength(1, 1016, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																																													}
																																													else
																																													{
																																														if (ptLeft.y >= 25 && ptLeft.y <= 33 && ptRight.y >= 30 && ptRight.y <= 35)
																																														{
																																															nPredLen = GetPredictedLength(1, 1022, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																																														}
																																														else
																																														{
																																															if (ptLeft.y >= 21 && ptLeft.y <= 28 && ptRight.y >= 36 && ptRight.y <= 43)
																																															{
																																																nPredLen = GetPredictedLength(1, 1019, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																																															}
																																															else
																																															{
																																																if (ptLeft.y >= 20 && ptLeft.y <= 25 && ptRight.y >= 34 && ptRight.y <= 41)
																																																{
																																																	nPredLen = GetPredictedLength(1, 1038, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);//1056
																																																}
																																																else
																																																{
																																																	if (ptLeft.y <= 21 && ptLeft.y >= 19 && ptRight.y >= 45 && ptRight.y <= 50)
																																																	{
																																																		nPredLen = GetPredictedLength(1, 1005, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																																																	}
																																																	else
																																																	{
																																																		if (ptLeft.x > 2600 && ptLeft.y <= 25 && ptLeft.y >= 15 && ptRight.y >= 20 && ptRight.y <= 28)
																																																		{
																																																			nPredLen = GetPredictedLength(1, 1007, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																																																		}
																																																		else
																																																		{
																																																			if (ptLeft.y <= 19 && ptRight.y >= 23 && ptRight.y <= 30)
																																																			{
																																																				nPredLen = GetPredictedLength(1, 1050, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																																																			}
																																																			else
																																																			{
																																																				if (ptLeft.y >= 19 && ptLeft.y <= 23 && ptRight.y >= 22 && ptRight.y <= 26)
																																																				{
																																																					nPredLen = GetPredictedLength(1, 1054, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																																																				}
																																																				else
																																																				{
																																																					if (ptLeft.x > 3000 && ptLeft.y >= 28 && ptLeft.y <= 33 && ptRight.y >= 43 && ptRight.y <= 48)
																																																					{
																																																						nPredLen = GetPredictedLength(1, 1013, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																																																					}
																																																					else
																																																					{
																																																						if (ptRight.y > 25 && ptLeft.y > 25)
																																																						{
																																																							nPredLen = GetPredictedLength(1, 1058, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																																																						}
																																																						else
																																																						{
																																																							if (ptLeft.y < 20 && ptRight.y < 28)
																																																							{
																																																								nPredLen = GetPredictedLength(1, 1036, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);//1058
																																																							}
																																																							else
																																																							{
																																																								if (ptRight.y <= 25 && ptLeft.y <= 25)
																																																								{
																																																									nPredLen = GetPredictedLength(1, 1036, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);//1058
																																																								}
																																																								else
																																																								{
																																																									if (ptRight.y < 22)
																																																									{
																																																										nPredLen = GetPredictedLength(1, 1030, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																																																									}
																																																									else
																																																									{
																																																										if (ptRight.y < 43)
																																																										{
																																																											nPredLen = GetPredictedLength(1, 1035, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																																																										}
																																																										else
																																																										{
																																																											nPredLen = GetPredictedLength(1, 1063, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}

																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					//int nPredLen = GetPredictedLength(1, 0.60, 0.40, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y);
					//cout << "nFoundCount = " << nFoundCount << "; Left = " << ptLeft.x << " ; Right = " << ptRight.x << " ; Length = " << nPredLen << endl;
					//cout << "Left edge found at " << ptLeft.x << "; Right edge found at " << ptRight.x << "; Pred Len = " << nPredLen << "; nABLeftEdgeBlock = " << nABLeftEdgeBlock << "\n";
					//std::cout << "\n BG Sale = " << rectLeft.x << "\t" << rectLeft.y << "\t" << rectLeft.width << "\t" << rectLeft.height << "\t" << nPredLen << "\n";

					if (nPrevLenDetected == 0)//std::abs(nLenRef - nPredLen) <= CAM1_WARN_LEN_DIFF ||
					{
						//vLogger->WriteCam1Log("AB nFrameCnt = " + to_string(nFrameCnt) + "; nReverseCount = " + to_string(nReverseCount) + "; Len = " + to_string(nPredLen) + "; X1 = " + to_string(ptLeft.x) + "; Y1 = " + to_string(ptLeft.y) + "; X2 = " + to_string(ptRight.x) + "; Y2 = " + to_string(ptRight.y), logtype::severity_level::info);
						vLogger->WriteCam1Log("Stacker = AB; (1) ReadLen = " + to_string(nPredLen) + "; PrevLen = " + to_string(nPrevLenDetected) + "; Frame = " + to_string(nFrameCnt) + "; X1 = " + to_string(ptLeft.x) + "; Y1 = " + to_string(ptLeft.y) + "; X2 = " + to_string(ptRight.x) + "; Y2 = " + to_string(ptRight.y) + "; HCnt = " + to_string(nHFoundCount) + "; RCnt = " + to_string(nReverseCount), logtype::severity_level::info);
						return nPredLen;
					}
					else
					{


						if (std::abs(nLenRef - nPredLen) < std::abs(nLenRef - nPrevPredLen))
						{
							nPrevPredLen = nPredLen;
							ptLeftPrev.x = ptLeft.x;
							ptLeftPrev.y = ptLeft.y;
						}
						else
						{
							if (nLenRef > 20000 && std::abs(ptLeft.y - ptRight.y) <= 10)
							{
								cout << "Calc Length discarded. Y values mismatch." << "; X1 = " << ptLeft.x << " Y1 = " << ptLeft.y << " X2 = " << ptRight.x << " Y2 = " << ptRight.y << "\n";;
								nPredLen = 0;
							}
						}
						nPrevMinY = ptLeft.y;
						bFound = false;
					}
				}

			}
		}
	}

	//cout << "nFoundCount = " << nFoundCount << "; Left = " << ptLeft.x << " ; Right = " << ptRight.x << endl;
	//vLogger->WriteCam1Log("AB nFrameCnt.. = " + to_string(nFrameCnt) + "; nReverseCount = " + to_string(nReverseCount) + "; Len = " + to_string(nPredLen) + "; X1 = " + to_string(ptLeft.x) + "; Y1 = " + to_string(ptLeft.y) + "; X2 = " + to_string(ptRight.x) + "; Y2 = " + to_string(ptRight.y), logtype::severity_level::info);
	ptLeft.x = ptLeftPrev.x;
	ptLeft.y = ptLeftPrev.y;
	vLogger->WriteCam1Log("Stacker = AB; (2) ReadLen = " + to_string(nPrevPredLen) + "; PrevLen = " + to_string(nPrevLenDetected) + "; Frame = " + to_string(nFrameCnt) + "; X1 = " + to_string(ptLeft.x) + "; Y1 = " + to_string(ptLeft.y) + "; X2 = " + to_string(ptRight.x) + "; Y2 = " + to_string(ptRight.y) + "; HCnt = " + to_string(nHFoundCount) + "; RCnt = " + to_string(nReverseCount), logtype::severity_level::info);
	return nPrevPredLen;// nPredLen;
}

int CameraSource::detectABSale(const Mat & searchframe, int nMinSize, Rect & rectLeft, Rect & rectRight)
{
	try
	{
		vector<vector<Point>> contours;

		Rect bounding_rect;
		double a = 0, maxArea = 0;
		int contours_Count = 0;
		int nPrevLeft = 0, nPrevRight = 0;
		int nMaxRight = 3775;
		int nMinLeft = 1900;

		findContours(searchframe, contours, cv::RETR_TREE, cv::CHAIN_APPROX_SIMPLE);

		if (contours.size() < nMinSize)
		{
			return 0;
		}
		cout << contours.size() << "\n";
		//findContours(searchframe, contours, hierarchy, CV_RETR_TREE, CV_CHAIN_APPROX_SIMPLE);
		//std::cout << " Contours size = " << contours.size() << "\n";
		contours_Count = 0;

		rectLeft.x = 0;
		rectLeft.y = 0;

		rectRight.x = 0;
		rectRight.y = 0;

		//std::cout << "\n Detecting Contours... \n";
		maxArea = 0;
		nPrevLeft = searchframe.cols;
		nPrevRight = 0;

		for (int i = 0; i < contours.size(); i++)
		{
			/*if (a<10 || a>300)
			{
				continue;
			}*/
			bounding_rect = boundingRect(contours[i]);

			if (bounding_rect.x > nMaxRight)
			{
				continue;
			}

			if (bounding_rect.x < nMinLeft)
			{
				continue;
			}

			if (bounding_rect.y < searchframe.rows / 3 || bounding_rect.y > 100)//
			{
				continue;
			}

			if (bounding_rect.width < 10)
			{
				continue;
			}

			if (bounding_rect.x > 3600 && bounding_rect.width < 200)
			{
				continue;
			}

			if (bounding_rect.x < 3100 && bounding_rect.width < 500)
			{
				continue;
			}

			if (bounding_rect.height > 25)
			{
				continue;
			}

			contours_Count = contours_Count + 1;

			if (bounding_rect.x < nPrevLeft)
			{
				nPrevLeft = bounding_rect.x;

				rectLeft.x = bounding_rect.x;
				rectLeft.y = bounding_rect.y;
				rectLeft.width = bounding_rect.width;
				rectLeft.height = bounding_rect.height;

				maxArea = a;
			}
			else
			{
				if (bounding_rect.x + bounding_rect.width > nPrevRight)
				{
					nPrevRight = bounding_rect.x + bounding_rect.width;

					rectRight.x = bounding_rect.x;
					rectRight.y = bounding_rect.y;
					rectRight.width = bounding_rect.width;
					rectRight.height = bounding_rect.height;
				}
			}

		}
		if (contours_Count > 0)
		{
			if (rectRight.x == 0)
			{
				if (rectLeft.width < 100)
				{
					return 0;
				}
				rectRight.x = rectLeft.x;
				rectRight.y = rectLeft.y;
				rectRight.width = rectLeft.width;
				rectRight.height = rectLeft.height;
			}
			else
			{
				if (rectLeft.x == 0)
				{
					if (rectRight.width < 100)
					{
						return 0;
					}

					rectLeft.x = rectRight.x;
					rectLeft.y = rectRight.y;
					rectLeft.width = rectRight.width;
					rectLeft.height = rectRight.height;
				}
				else
				{
					if (rectRight.x + rectRight.width - rectLeft.x < 100)
					{
						return 0;
					}

					if (rectRight.x + rectRight.width < 3700)
					{
						return 0;
					}
				}
			}


			//std::cout << "\n Cam-1 Sticker Contour = " << contours_Count << "\t" << maxArea << "\t" << rectLeft.x << "\t" << rectLeft.y << "\t" << rectLeft.width << "\t" << rectLeft.height;
			std::cout << "\n Cam-1 Sticker Contour = " << contours_Count << "\t" << rectLeft.x << "\t" << rectLeft.y << "\t" << rectLeft.width << "\t" << rectLeft.height << "\t" << rectRight.x << "\t" << rectRight.width << "\n";

			//std::cout << "\n";
			//Scalar color(0, 255, 0);
			//drawContours(searchframe, contours, largest_area_index, color, 2, CV_FILLED);
			//cv::rectangle(searchframe, bounding_rect, color, 2, 8, 0);
			return contours_Count;
		}
		else
		{
			return 0;
		}
	}
	catch (const std::exception &ex)
	{
		timev = time(0);
		std::cout << ctime(&timev) << "\n" << " error in detectCam1Sticker." << ex.what() << "\n";
	}
	return 0;
}

int CameraSource::detect18SaleLeftEdge_BG(int nFrameCnt, int nLenDetectCount, int nLenRef, int nPrevLenDetected, const Mat & searchframe, cv::Point & ptLeft, cv::Point & ptRight)
{
	bool bFound = false;
	int nMinVal = 0, nMaxVal = 0;
	int nSearchStart = 0, nSearchEnd = 0;
	int nVerticalStart = 0, nVerticalEnd = 0;
	int nCurrTryCount = 0, nTargetTryCount = 2;
	int nHFoundCount = 0, nReverseCount = 0;
	int nPrevFoundCount = 0;
	int nLoopCount = 0;
	int nStartLoopCnt = 0;
	int nPrevMinY = 0;
	int nPredLen = 0;
	int nPrevPredLen = 0;
	cv::Point ptLeftPrev;

	bFound = false;
	nSearchStart = 2920;
	nSearchEnd = 2960;

	ptRight.x = 0;
	ptRight.y = 0;
	ptLeft.x = 0;
	ptLeft.y = 0;
	nCurrTryCount = 0;
	//right edge
	while (nCurrTryCount < nTargetTryCount && bFound == false)
	{
		nCurrTryCount = nCurrTryCount + 1;
		if (nCurrTryCount == 1)
		{
			nVerticalStart = 55;
			nVerticalEnd = 95;
		}
		else
		{
			nVerticalStart = 30;
			nVerticalEnd = 55;
		}

		for (int i = nVerticalStart; i <= nVerticalEnd && bFound == false; i++)
		{
			for (int j = nSearchEnd; j > nSearchStart && bFound == false; j--)
			{

				//cout << i << " ; " << j << " ; " << static_cast<int>(searchframe.at<uchar>(i, j)) << "\n";

				if (static_cast<int>(searchframe.at<uchar>(i, j)) == 255)
				{

					//bFound = true;
					nHFoundCount = 0;
					try
					{
						for (int k = i; k <= i + 2; k++)
						{
							for (int m = j; m > j - 40; m--)
							{
								if (static_cast<int>(searchframe.at<uchar>(k, m)) == 255)
								{
									nHFoundCount = nHFoundCount + 1;
								}
							}
						}
					}

					catch (const std::exception&)
					{
						cout << i << " " << j << endl;
					}
					catch (cv::Exception& e)
					{
						const char* err_msg = e.what();
						cout << i << " " << j << endl;
					}

					if (nHFoundCount > 60)//bFound//30
					{
						ptRight.x = j;
						if (ptRight.x < 2932)
						{
							//vLogger->WriteCam3Log("Stk18 nFrameCnt = " + to_string(nFrameCnt) + "; Right Edge modified to 2930. Actual found at = " + to_string(ptRight.x), logtype::severity_level::info);
							ptRight.x = 2932;
						}
						ptRight.y = i;
						bFound = true;
					}
				}
			}
		}
	}
	//cout << "Search start = " << nSearchStart << "; bFound = " << bFound << "\n";
	//left edge
	if (bFound == true)
	{
		//fixing the right edge
		ptRight.x = 2932;

		//cout << "Stk18 Frame = " << nFrameCnt << " ; Right Edge found at " << ptRight.x << " ; " << ptRight.y << endl;
		nPrevPredLen = 0;
		ptLeftPrev.x = 0;
		ptLeftPrev.y = 0;
		nLoopCount = 0;
		nSearchStart = 400;
		nSearchEnd = 2200;

		if (nLenRef <= 7500)
		{
			nSearchStart = 1900;
		}
		else if (nLenRef <= 8600)
		{
			nSearchStart = 1465;
		}
		else if (nLenRef <= 12200)
		{
			nSearchStart = 1220;
		}
		else if (nLenRef <= 14000)
		{
			nSearchStart = 935;
		}
		/*else if (nLenRef <= 12000)
		{
			nSearchStart = 510;
		}
		else
		{
			nSearchStart = 280;
		}*/
		while (nLoopCount < 3)
		{
			nLoopCount = nLoopCount + 1;
			vLogger->WriteCam3Log("Stacker = 18; Frame = " + to_string(nFrameCnt) + "; LoopCount = " + to_string(nLoopCount) + "; X1 = " + to_string(ptLeft.x) + "; Y1 = " + to_string(ptLeft.y) + "; X2 = " + to_string(ptRight.x) + "; Y2 = " + to_string(ptRight.y), logtype::severity_level::info);
			//cout << "CD Loop Count = " << nLoopCount << " ; nPrevMinY = " << nPrevMinY << endl;
			bFound = false;
			ptLeft.x = 0;
			ptLeft.y = 0;
			nHFoundCount = 0;
			nReverseCount = 0;
			//left edge
			for (int j = nSearchStart; j < nSearchEnd && bFound == false; j++)
			{
				if (j < 750)
				{
					nMinVal = 15;
					nMaxVal = 55;
				}
				else if (j < 1000)
				{
					nMinVal = 13;
					nMaxVal = 55;
				}
				else if (j < 1325)
				{
					nMinVal = 12;
					nMaxVal = 65;
				}
				else if (j < 1760)
				{
					nMinVal = 12;
					nMaxVal = 65;
				}
				else
				{
					nMinVal = 12;
					nMaxVal = 65;
				}

				if (ptRight.y >= 40)
				{
					nMaxVal = ptRight.y - 20;
				}
				if (nLoopCount > 1 && nPrevMinY > 0)
				{
					nMinVal = nPrevMinY + 2;
				}

				for (int i = nMinVal; i < nMaxVal && bFound == false; i++)//&& i>ptRight.x
				{
					//cout << i << " ; " << j << " ; " << static_cast<int>(searchframe.at<uchar>(i, j)) << "\n";

					if (static_cast<int>(searchframe.at<uchar>(i, j)) == 255)
					{
						nHFoundCount = 0;
						for (int k = i - 1; k <= i + 2 && k < nMaxVal; k++)
						{
							for (int m = j; m < j + 40; m++)
							{
								if (static_cast<int>(searchframe.at<uchar>(k, m)) == 255)
								{
									nHFoundCount = nHFoundCount + 1;
								}
							}
						}

						//cout << "Stk18 Frame = " << nFrameCnt << " ; nHFoundCount = " << nHFoundCount << "\n";
						if (nHFoundCount > 100)//80
						{
							//cout << "Sj18 Frame = " << nFrameCnt << " ; nHFoundCount = " << nHFoundCount << "\n";

							ptLeft.x = j;
							ptLeft.y = i;
							bFound = true;
							//cout << "nHFoundCount = " << nHFoundCount << endl;

							nReverseCount = 0;
							for (int k = i - 3; k <= i + 1; k++)
							{
								for (int m = j; m > j - 40; m--)
								{
									if (static_cast<int>(searchframe.at<uchar>(k, m)) == 255)
									{
										nReverseCount = nReverseCount + 1;
									}
								}
							}

							if (nPrevLenDetected > 0)//nLenDetectCount > 0
							{
								if (nLenRef <= 17500 && nReverseCount > 20 && nLenRef != 15500)
								{
									bFound = false;
								}
							}
							//std::cout << "Stk18 nFrameCnt = " << nFrameCnt << "; nReverseCount. = " << nReverseCount << endl;
							//vLogger->WriteCam3Log("Stk18 nFrameCnt = " + to_string(nFrameCnt) + "; nReverseCount = " + to_string(nReverseCount), logtype::severity_level::info);
						}
					}
				}


				if (bFound)
				{
					nPredLen = 0;

					if (ptLeft.x >= 400 && ptLeft.x < 500)
					{
						nPredLen = GetPredictedLength(3, 1084, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
					}
					else
					{
						if (ptLeft.x >= 500 && ptLeft.x < 600)
						{
							nPredLen = GetPredictedLength(3, 1081, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
						}
						else
						{
							if (ptLeft.x >= 600 && ptLeft.x < 700)
							{
								/*if (ptLeft.y > 15 && ptLeft.y <= 40)
								{
									nPredLen = GetPredictedLength(3, 1034, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
								}
								else
								{*/
								nPredLen = GetPredictedLength(3, 1094, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
								/*}*/
							}
							else
							{
								if (ptLeft.x >= 700 && ptLeft.x < 800)
								{
									nPredLen = GetPredictedLength(3, 1087, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
								}
								else
								{
									if (ptLeft.x >= 800 && ptLeft.x < 900)
									{
										nPredLen = GetPredictedLength(3, 1086, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
									}
									else
									{
										if (ptLeft.x >= 900 && ptLeft.x < 1000)//15500
										{
											nPredLen = GetPredictedLength(3, 1087, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
										}
										else
										{
											if (ptLeft.x >= 1000 && ptLeft.x < 1200)
											{
												nPredLen = GetPredictedLength(3, 1056, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
											}
											else
											{
												if (ptLeft.x >= 1200 && ptLeft.x < 1300)
												{
													nPredLen = GetPredictedLength(3, 1032, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
												}
												else
												{
													if (ptLeft.x >= 1300 && ptLeft.x < 1400)//1011
													{
														nPredLen = GetPredictedLength(3, 1068, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
													}
													else
													{
														if (ptLeft.x >= 1400 && ptLeft.x < 1500)
														{
															nPredLen = GetPredictedLength(3, 1030, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
														}
														else
														{
															if (ptLeft.x >= 1500 && ptLeft.x < 1600)
															{
																nPredLen = GetPredictedLength(3, 1048, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
															}
															else
															{
																if (ptLeft.x >= 1600 && ptLeft.x < 1800)
																{
																	nPredLen = GetPredictedLength(3, 1035, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																}
																else
																{
																	if (ptLeft.x >= 1800 && ptLeft.x < 1900)
																	{
																		nPredLen = GetPredictedLength(3, 1037, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																	}
																	else
																	{
																		if (ptLeft.x >= 1900 && ptLeft.x < 2000)
																		{
																			nPredLen = GetPredictedLength(3, 1033, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																		}
																		else
																		{
																			if (ptLeft.x >= 2000 && ptLeft.x < 2100)
																			{
																				nPredLen = GetPredictedLength(3, 1041, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																			}
																			else
																			{
																				nPredLen = GetPredictedLength(3, 1000, 0, nFrameCnt, ptLeft.x, ptLeft.y, ptRight.x, ptRight.y, nHFoundCount, nReverseCount);
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}

					//std::cout << "\n BG Sale = " << ptLeft.x << "\t" << ptLeft.y << "\t" << ptRight.x << "\t" << ptRight.y << "\t" << nPredLen << "\n";
					//cout << "nHFoundCount = " << nHFoundCount << "; Left = " << ptLeft.x << " ; Right = " << ptRight.x << " ; Length = " << nPredLen << endl;
					if (nPredLen > 0)
					{
						if (nPrevLenDetected == 0)//std::abs(nLenRef - nPredLen) <= CAM1_WARN_LEN_DIFF || 
						{
							vLogger->WriteCam3Log("Stacker = 18; (1) ReadLen = " + to_string(nPredLen) + "; PrevLen = " + to_string(nPrevLenDetected) + "; Frame = " + to_string(nFrameCnt) + "; X1 = " + to_string(ptLeft.x) + "; Y1 = " + to_string(ptLeft.y) + "; X2 = " + to_string(ptRight.x) + "; Y2 = " + to_string(ptRight.y) + "; HCnt = " + to_string(nHFoundCount) + "; RCnt = " + to_string(nReverseCount), logtype::severity_level::info);
							return nPredLen;
						}
						else
						{
							if (std::abs(nLenRef - nPredLen) < std::abs(nLenRef - nPrevPredLen))
							{
								nPrevPredLen = nPredLen;
								ptLeftPrev.x = ptLeft.x;
								ptLeftPrev.y = ptLeft.y;
							}

							nPrevMinY = ptLeft.y;
							bFound = false;
							break;
						}
					}

				}
				/*else
				{
					cout << "Stk18 Frame = " << nFrameCnt << " ; Left Edge not found " << endl;
				}*/
			}
		}
	}

	//cout << "nHFoundCount = " << nHFoundCount << "; Left = " << ptLeft.x << " ; Right = " << ptRight.x << endl;
	//vLogger->WriteCam3Log("Stk18 nFrameCnt.. = " + to_string(nFrameCnt) + "; nReverseCount = " + to_string(nReverseCount) + "; Len = " + to_string(nPredLen) + "; X1 = " + to_string(ptLeft.x) + "; Y1 = " + to_string(ptLeft.y) + "; X2 = " + to_string(ptRight.x) + "; Y2 = " + to_string(ptRight.y), logtype::severity_level::info);
	ptLeft.x = ptLeftPrev.x;
	ptLeft.y = ptLeftPrev.y;
	vLogger->WriteCam3Log("Stacker = 18; (2) ReadLen = " + to_string(nPrevPredLen) + "; PrevLen = " + to_string(nPrevLenDetected) + "; Frame = " + to_string(nFrameCnt) + "; X1 = " + to_string(ptLeft.x) + "; Y1 = " + to_string(ptLeft.y) + "; X2 = " + to_string(ptRight.x) + "; Y2 = " + to_string(ptRight.y) + "; HCnt = " + to_string(nHFoundCount) + "; RCnt = " + to_string(nReverseCount), logtype::severity_level::info);
	return nPrevPredLen;// nPredLen;
}

void CameraSource::readPlcData()
{
	int nResult = 0;
	while (true)
	{
		nResult = vPlcClient1->ReadPLCData(sPlcIpAddress, nPlcRack, nPlcSlot_30, nPlcSlot_18, nDBNumber_read, nDBStart_read, nDBSize_read_30, nDBSize_read_18, nDBNumber_write, nDBStart_write, nDBSize_write_30, nDBSize_write_18, STKAB_READ_FROM_PLC, STKAB_WRITE_TO_PLC, STKCD_READ_FROM_PLC, STKCD_WRITE_TO_PLC, STK18_READ_FROM_PLC, STK18_WRITE_TO_PLC, nPLCReadOnly, nUsePLC);
		Sleep(50);

		if (nResult == 0)
		{
			vLogger->WriteERRLog("No read from PLC. Throwing exception to main", logtype::severity_level::error);
			return;
		}
	}

}

double CameraSource::GetPredictedLength(int stacker, int pcent1, int pcent2, int nFrameCnt, int nLeftX, int nLeftY, int nRightX, int nRightY, int nHCnt, int nRCnt)
{
	double nPredctedLength1 = 0, nRightLength1 = 0, nLeftLength1 = 0;
	double nPredctedLength = 0;

	if (stacker == 1 || stacker == 2)
	{
		if (nRightX >= lst30Point1.front().x)
		{
			nRightLength1 = 0;
		}
		else
		{

			for (int i = 1; i < lst30Point1.size(); i++)
			{
				if (lst30Point1[i - 1].x >= nRightX && nRightX > lst30Point1[i].x)
				{
					//nRightLength1 = ((nRightX - lst30Point1[i - 1].x)*(stof(lst30Lengths[i]) - stof(lst30Lengths[i - 1])) * (1000 / (double)(lst30Point1[i].x - lst30Point1[i - 1].x))) + (stof(lst30Lengths[i - 1]) * 1000);
					nRightLength1 = (((nRightX - lst30Point1[i - 1].x)*((stof(lst30Lengths[i]) - stof(lst30Lengths[i - 1])) * 1000)) / (double)(lst30Point1[i].x - lst30Point1[i - 1].x)) + (stof(lst30Lengths[i - 1]) * 1000);
					break;
				}
			}
		}
		//vLogger->WriteCam1Log("nRightLength1 = " + to_string(nRightLength1), logtype::severity_level::info);
		if (nLeftX <= lst30Point1.back().x)
		{
			nLeftLength1 = stof(lst30Lengths.back()) * 1000;
		}
		else
		{
			for (int i = 1; i < lst30Point1.size(); i++)
			{
				if (lst30Point1[i - 1].x >= nLeftX && nLeftX > lst30Point1[i].x)
				{
					//nLeftLength1 = ((nLeftX - lst30Point1[i - 1].x)*(stof(lst30Lengths[i]) - stof(lst30Lengths[i - 1])) * (1000 / (double)(lst30Point1[i].x - lst30Point1[i - 1].x))) + (stof(lst30Lengths[i - 1]) * 1000);
					nLeftLength1 = (((nLeftX - lst30Point1[i - 1].x)*((stof(lst30Lengths[i]) - stof(lst30Lengths[i - 1])) * 1000)) / (double)(lst30Point1[i].x - lst30Point1[i - 1].x)) + (stof(lst30Lengths[i - 1]) * 1000);
					break;
				}
			}
		}
		//vLogger->WriteCam1Log("nLeftLength1 = " + to_string(nLeftLength1), logtype::severity_level::info);
		nPredctedLength1 = nLeftLength1 - nRightLength1;

		double nPredctedLength2 = 0, nRightLength2 = 0, nLeftLength2 = 0;
		if (nRightX >= lst30Point2.front().x)
		{
			nRightLength2 = 0;
		}
		else
		{

			for (int i = 1; i < lst30Point2.size(); i++)
			{
				if (lst30Point2[i - 1].x >= nRightX && nRightX > lst30Point2[i].x)
				{
					//nRightLength2 = ((nRightX - lst30Point2[i - 1].x)*(stof(lst30Lengths[i]) - stof(lst30Lengths[i - 1])) * (1000 / (double)(lst30Point2[i].x - lst30Point2[i - 1].x))) + (stof(lst30Lengths[i - 1]) * 1000);
					nRightLength2 = (((nRightX - lst30Point2[i - 1].x)*((stof(lst30Lengths[i]) - stof(lst30Lengths[i - 1])) * 1000)) / (double)(lst30Point2[i].x - lst30Point2[i - 1].x)) + (stof(lst30Lengths[i - 1]) * 1000);
					break;
				}
			}
		}

		if (nLeftX <= lst30Point2.back().x)
		{
			nLeftLength2 = stof(lst30Lengths.back()) * 1000;
		}
		else
		{
			for (int i = 1; i < lst30Point2.size(); i++)
			{
				if (lst30Point2[i - 1].x >= nLeftX && nLeftX > lst30Point2[i].x)
				{
					//nLeftLength2 = ((nLeftX - lst30Point2[i - 1].x)*(stof(lst30Lengths[i]) - stof(lst30Lengths[i - 1])) * (1000 / (double)(lst30Point2[i].x - lst30Point2[i - 1].x))) + (stof(lst30Lengths[i - 1]) * 1000);
					nLeftLength2 = (((nLeftX - lst30Point2[i - 1].x)*((stof(lst30Lengths[i]) - stof(lst30Lengths[i - 1])) * 1000)) / (double)(lst30Point2[i].x - lst30Point2[i - 1].x)) + (stof(lst30Lengths[i - 1]) * 1000);
					break;
				}
			}
		}

		nPredctedLength2 = nLeftLength2 - nRightLength2;



		nPredctedLength = ((nPredctedLength1 * pcent1) + (nPredctedLength2 * pcent2)) / 1000.0;

		//cout << "nPredctedLength1 = " << nPredctedLength1 << " ; nPredctedLength2 = " << nPredctedLength2 << " ; Final Len = " << nPredctedLength << endl;
		if (stacker == 1)
		{
			vLogger->WriteCam1Log("Stacker = AB; Len1 = " + to_string(nPredctedLength1) + "; Frame = " + to_string(nFrameCnt) + "; Pcent1 = " + to_string(pcent1) + "; FinalLen = " + to_string(nPredctedLength) + "; X1 = " + to_string(nLeftX) + "; Y1 = " + to_string(nLeftY) + "; X2 = " + to_string(nRightX) + "; Y2 = " + to_string(nRightY) + "; HCnt = " + to_string(nHCnt) + "; RCnt = " + to_string(nRCnt), logtype::severity_level::info);
		}
		else
		{
			if (stacker == 2)
			{
				vLogger->WriteCam2Log("Stacker = CD; Len1 = " + to_string(nPredctedLength1) + "; Frame = " + to_string(nFrameCnt) + "; pcent1 = " + to_string(pcent1) + "; FinalLen = " + to_string(nPredctedLength) + "; X1 = " + to_string(nLeftX) + "; Y1 = " + to_string(nLeftY) + "; X2 = " + to_string(nRightX) + "; Y2 = " + to_string(nRightY) + "; HCnt = " + to_string(nHCnt) + "; RCnt = " + to_string(nRCnt), logtype::severity_level::info);
			}
			else
			{
				vLogger->WriteCam3Log("Stacker = 18; Len1 = " + to_string(nPredctedLength1) + "; Frame = " + to_string(nFrameCnt) + "; pcent1 = " + to_string(pcent1) + "; FinalLen = " + to_string(nPredctedLength) + "; X1 = " + to_string(nLeftX) + "; Y1 = " + to_string(nLeftY) + "; X2 = " + to_string(nRightX) + "; Y2 = " + to_string(nRightY) + "; HCnt = " + to_string(nHCnt) + "; RCnt = " + to_string(nRCnt), logtype::severity_level::info);
			}
		}
	}
	else
	{
		if (nRightX >= lst18Point.front().x)
		{
			nRightLength1 = 0;
		}
		else
		{

			for (int i = 1; i < lst18Point.size(); i++)
			{
				if (lst18Point[i - 1].x >= nRightX && nRightX > lst18Point[i].x)
				{
					nRightLength1 = (((nRightX - lst18Point[i - 1].x)*((stof(lst30Lengths[i]) - stof(lst30Lengths[i - 1])) * 1000)) / (double)(lst18Point[i].x - lst18Point[i - 1].x)) + (stof(lst30Lengths[i - 1]) * 1000);
					break;
				}
			}
		}
		//vLogger->WriteCam1Log("nRightLength1 = " + to_string(nRightLength1), logtype::severity_level::info);
		if (nLeftX <= lst18Point.back().x)
		{
			nLeftLength1 = stof(lst30Lengths.back()) * 1000;
		}
		else
		{
			for (int i = 1; i < lst18Point.size(); i++)
			{
				if (lst18Point[i - 1].x >= nLeftX && nLeftX > lst18Point[i].x)
				{
					nLeftLength1 = (((nLeftX - lst18Point[i - 1].x)*((stof(lst30Lengths[i]) - stof(lst30Lengths[i - 1])) * 1000)) / (double)(lst18Point[i].x - lst18Point[i - 1].x)) + (stof(lst30Lengths[i - 1]) * 1000);
					break;
				}
			}
		}
		//vLogger->WriteCam1Log("nLeftLength1 = " + to_string(nLeftLength1), logtype::severity_level::info);
		nPredctedLength1 = nLeftLength1 - nRightLength1;

		nPredctedLength = (nPredctedLength1 * pcent1) / 1000.0;

		vLogger->WriteCam3Log("Stacker = 18; Len1 = " + to_string(nPredctedLength1) + "; Frame = " + to_string(nFrameCnt) + "; pcent1 = " + to_string(pcent1) + "; FinalLen = " + to_string(nPredctedLength) + "; X1 = " + to_string(nLeftX) + "; Y1 = " + to_string(nLeftY) + "; X2 = " + to_string(nRightX) + "; Y2 = " + to_string(nRightY) + "; HCnt = " + to_string(nHCnt) + "; RCnt = " + to_string(nRCnt), logtype::severity_level::info);
	}


	return nPredctedLength;
}

int CameraSource::getABRightFrameThreshold(const Mat & searchframe)
{
	int nCount = 0;
	int nAvg = 0;
	int nPixelValue = 0;

	for (int i = 1; i < 6; i++)
	{
		for (int j = 50; j < 55; j++)
		{
			nPixelValue = static_cast<int>(searchframe.at<uchar>(i, j));

			if (nPixelValue > 0)
			{
				nCount = nCount + 1;
				nAvg = nAvg + nPixelValue;
			}

		}
	}

	if (nCount > 0)
	{
		nAvg = nAvg / nCount;
	}

	return nAvg;
}

int CameraSource::getAveragePixelValue(const cuda::GpuMat & searchframe, int x, int y, int width, int height)
{

	cv::Scalar mean, stddev;

	cuda::meanStdDev(searchframe(Rect(x, y, width, height)), mean, stddev);

	int avg = sum(mean)[0];

	return avg;
}

int CameraSource::getCDLeftFrameThreshold(const Mat & searchframe)
{
	int nCount = 0;
	int nAvg = 0;
	int nPixelValue = 0;

	for (int i = 2; i < 7; i++)
	{
		for (int j = 2; j < 7; j++)
		{
			nPixelValue = static_cast<int>(searchframe.at<uchar>(searchframe.rows - i, searchframe.cols - j));

			if (nPixelValue > 0)
			{
				nCount = nCount + 1;
				nAvg = nAvg + nPixelValue;
			}

		}
	}

	if (nCount > 0)
	{
		nAvg = nAvg / nCount;
	}

	/*if (nAvg > 75)
	{
		return nAvg - 20;
	}*/
	return nAvg;
}

int CameraSource::compareLenWithLeftEdge(int nStacker, int nLenRef, int nLeftEdge, bool bReturnMinValue)
{
	bool bResult = true;
	int nRefLeftEdgeMax = 0;
	int nRefLeftEdgeMin = 0;
	if (nStacker == 1)
	{
		switch (nLenRef)
		{
		case 6000:
			nRefLeftEdgeMax = 3190;
			nRefLeftEdgeMin = 3110;
			break;
		case 6100:
			nRefLeftEdgeMax = 3160;
			nRefLeftEdgeMin = 3135;
			break;
		case 6400:
			nRefLeftEdgeMax = 3109;
			nRefLeftEdgeMin = 3095;
			break;
		case 6500:
			nRefLeftEdgeMax = 3127;
			nRefLeftEdgeMin = 3107;
			break;
		case 6600:
			nRefLeftEdgeMax = 3112;
			nRefLeftEdgeMin = 3089;
			break;
		case 6800:
			nRefLeftEdgeMax = 3095;
			nRefLeftEdgeMin = 3065;
			break;
		case 6850:
			nRefLeftEdgeMax = 3095;
			nRefLeftEdgeMin = 3065;
			break;
		case 6900:
			nRefLeftEdgeMax = 3080;
			nRefLeftEdgeMin = 3065;
			break;
		case 7000:
			nRefLeftEdgeMax = 3060;
			nRefLeftEdgeMin = 3040;
			break;
		case 7200:
			nRefLeftEdgeMax = 3048;
			nRefLeftEdgeMin = 3033;
			break;
		case 7500:
			nRefLeftEdgeMax = 3030;
			nRefLeftEdgeMin = 2980;
			break;
		case 7600:
			nRefLeftEdgeMax = 3015;
			nRefLeftEdgeMin = 2975;
			break;
		case 7700:
			nRefLeftEdgeMax = 3000;
			nRefLeftEdgeMin = 2960;
			break;
		case 8000:
			nRefLeftEdgeMax = 2967;
			nRefLeftEdgeMin = 2950;
			break;
		case 8200:
			nRefLeftEdgeMax = 2933;
			nRefLeftEdgeMin = 2918;
			break;
		case 8300:
			nRefLeftEdgeMax = 2915;
			nRefLeftEdgeMin = 2918;
			break;
		case 8500:
			nRefLeftEdgeMax = 2920;
			nRefLeftEdgeMin = 2855;
			break;
		case 8600:
			nRefLeftEdgeMax = 2900;
			nRefLeftEdgeMin = 2850;
			break;
		case 8900:
			nRefLeftEdgeMax = 2870;
			nRefLeftEdgeMin = 2830;
			break;
		case 9000:
			nRefLeftEdgeMax = 2845;
			nRefLeftEdgeMin = 2823;
			break;
		case 9140:
			nRefLeftEdgeMax = 2855;
			nRefLeftEdgeMin = 2800;
			break;
		case 9200:
			nRefLeftEdgeMax = 2825;
			nRefLeftEdgeMin = 2802;
			break;
		case 9300:
			nRefLeftEdgeMax = 2815;
			break;
		case 9500:
			nRefLeftEdgeMax = 2793;
			nRefLeftEdgeMin = 2780;
			break;
		case 9600:
			nRefLeftEdgeMax = 2777;
			nRefLeftEdgeMin = 2764;
			break;
		case 9700:
			nRefLeftEdgeMax = 2763;
			nRefLeftEdgeMin = 2750;
			break;
		case 9900:
			nRefLeftEdgeMax = 2755;
			break;
		case 10000:
			nRefLeftEdgeMax = 2747;
			nRefLeftEdgeMin = 2200;
			break;
		case 10100:
			nRefLeftEdgeMax = 2720;
			nRefLeftEdgeMin = 2705;
			break;
		case 10200:
			nRefLeftEdgeMax = 2705;
			nRefLeftEdgeMin = 2675;
			break;
		case 10300:
			nRefLeftEdgeMax = 2702;
			nRefLeftEdgeMin = 2673;
			break;
		case 10500:
			nRefLeftEdgeMax = 2675;
			nRefLeftEdgeMin = 2658;
			break;
		case 10600:
			nRefLeftEdgeMax = 2657;
			nRefLeftEdgeMin = 2635;
			break;
		case 10670:
			nRefLeftEdgeMax = 2650;
			nRefLeftEdgeMin = 2625;
			break;
		case 10700:
			nRefLeftEdgeMax = 2645;
			nRefLeftEdgeMin = 2630;
			break;
		case 10900:
			nRefLeftEdgeMax = 2610;
			nRefLeftEdgeMin = 2590;
			break;
		case 11000:
			nRefLeftEdgeMax = 2608;
			nRefLeftEdgeMin = 2585;
			break;
		case 11100:
			nRefLeftEdgeMax = 2605;
			nRefLeftEdgeMin = 2580;
			break;
		case 11200:
			nRefLeftEdgeMax = 2590;
			nRefLeftEdgeMin = 2557;
			break;
		case 11300:
			nRefLeftEdgeMax = 2575;
			nRefLeftEdgeMin = 2555;
			break;
		case 11350:
			nRefLeftEdgeMax = 2555;
			nRefLeftEdgeMin = 2535;
			break;
		case 11400:
			nRefLeftEdgeMax = 2540;
			nRefLeftEdgeMin = 2557;
			break;
		case 11500:
			nRefLeftEdgeMax = 2555;
			nRefLeftEdgeMin = 2520;
			break;
		case 11600:
			nRefLeftEdgeMax = 2542;
			nRefLeftEdgeMin = 2505;
			break;
		case 11700:
			nRefLeftEdgeMax = 2520;
			nRefLeftEdgeMin = 2495;
			break;
		case 11800:
			nRefLeftEdgeMax = 2500;
			nRefLeftEdgeMin = 2480;
			break;
		case 11900:
			nRefLeftEdgeMax = 2492;
			nRefLeftEdgeMin = 2476;
			break;
		case 12000:
			nRefLeftEdgeMax = 2480;
			nRefLeftEdgeMin = 2462;
			break;
		case 12100:
			nRefLeftEdgeMax = 2465;
			nRefLeftEdgeMin = 2445;
			break;
		case 12190:
			nRefLeftEdgeMax = 2450;
			nRefLeftEdgeMin = 2430;
			break;
		case 12200:
			nRefLeftEdgeMax = 2455;
			nRefLeftEdgeMin = 2435;
			break;
		case 12300:
			nRefLeftEdgeMax = 2444;
			nRefLeftEdgeMin = 2424;
			break;
		case 12400:
			nRefLeftEdgeMax = 2420;
			nRefLeftEdgeMin = 2380;
			break;
		case 12500:
			nRefLeftEdgeMax = 2410;
			nRefLeftEdgeMin = 2390;
			break;
		case 12600:
			nRefLeftEdgeMax = 2405;
			nRefLeftEdgeMin = 2377;
			break;
		case 12700:
			nRefLeftEdgeMax = 2395;
			nRefLeftEdgeMin = 2370;
			break;
		case 12800:
			nRefLeftEdgeMax = 2380;
			nRefLeftEdgeMin = 2355;
			break;
		case 12900:
			nRefLeftEdgeMax = 2355;
			nRefLeftEdgeMin = 2340;
			break;
		case 13000:
			nRefLeftEdgeMax = 2360;
			nRefLeftEdgeMin = 2330;
			break;
		case 13100:
			nRefLeftEdgeMax = 2337;
			nRefLeftEdgeMin = 2310;
			break;
		case 13500:
			nRefLeftEdgeMax = 2290;
			nRefLeftEdgeMin = 2255;
			break;
		case 13600:
			nRefLeftEdgeMax = 2275;
			nRefLeftEdgeMin = 2245;
			break;
		case 13720:
			nRefLeftEdgeMax = 2252;
			nRefLeftEdgeMin = 2220;
			break;
		case 13730:
			nRefLeftEdgeMax = 2250;
			nRefLeftEdgeMin = 2220;
			break;
		case 13800:
			nRefLeftEdgeMax = 2240;
			nRefLeftEdgeMin = 2225;
			break;
		case 13900:
			nRefLeftEdgeMax = 2230;
			nRefLeftEdgeMin = 2205;
			break;
		case 14000:
			nRefLeftEdgeMax = 2215;
			nRefLeftEdgeMin = 2190;
			break;
		case 14100:
			nRefLeftEdgeMax = 2205;
			nRefLeftEdgeMin = 2187;
			break;
		case 14200:
			nRefLeftEdgeMax = 2202;
			nRefLeftEdgeMin = 2177;
			break;
		case 14300:
			nRefLeftEdgeMax = 2177;
			nRefLeftEdgeMin = 2155;
			break;
		case 14400:
			nRefLeftEdgeMax = 2160;
			nRefLeftEdgeMin = 2140;
			break;
		case 14500:
			nRefLeftEdgeMax = 2145;
			nRefLeftEdgeMin = 2130;
			break;
		case 14600:
			nRefLeftEdgeMax = 2142;
			nRefLeftEdgeMin = 2122;
			break;
		case 14630:
			nRefLeftEdgeMax = 2130;
			nRefLeftEdgeMin = 2115;
			break;
		case 14700:
			nRefLeftEdgeMax = 2125;
			nRefLeftEdgeMin = 2100;
			break;
		case 14800:
			nRefLeftEdgeMax = 2105;
			nRefLeftEdgeMin = 2090;
			break;
		case 14900:
			nRefLeftEdgeMax = 2097;
			nRefLeftEdgeMin = 2077;
			break;
		case 15000:
			nRefLeftEdgeMax = 2080;
			nRefLeftEdgeMin = 2065;
			break;
		case 15100:
			nRefLeftEdgeMax = 2061;
			nRefLeftEdgeMin = 2050;
			break;
		case 15200:
			nRefLeftEdgeMax = 2050;
			break;
		case 15240:
			nRefLeftEdgeMax = 2046;
			nRefLeftEdgeMin = 2030;
			break;
		case 15250:
			nRefLeftEdgeMax = 2045;
			nRefLeftEdgeMin = 2030;
			break;
		case 15300:
			nRefLeftEdgeMax = 2045;
			nRefLeftEdgeMin = 2025;
			break;
		case 15400:
			nRefLeftEdgeMax = 2045;
			break;
		case 15500:
			nRefLeftEdgeMax = 2015;
			nRefLeftEdgeMin = 1997;
			break;
		case 15600:
			nRefLeftEdgeMax = 2005;
			nRefLeftEdgeMin = 1991;
			break;
		case 15700:
			nRefLeftEdgeMax = 1983;
			nRefLeftEdgeMin = 1970;
			break;
		case 15800:
			nRefLeftEdgeMax = 1975;
			nRefLeftEdgeMin = 1962;
			break;
		case 15900:
			nRefLeftEdgeMax = 1958;
			nRefLeftEdgeMin = 1942;
			break;
		case 16000:
			nRefLeftEdgeMax = 1942;
			nRefLeftEdgeMin = 1925;
			break;
		case 16100:
			nRefLeftEdgeMax = 1930;
			nRefLeftEdgeMin = 1914;
			break;
		case 16500:
			nRefLeftEdgeMax = 1878;
			nRefLeftEdgeMin = 1860;
			break;
		case 16760:
			nRefLeftEdgeMax = 1840;
			nRefLeftEdgeMin = 1820;
			break;
		case 16800:
			nRefLeftEdgeMax = 1842;
			nRefLeftEdgeMin = 1827;
			break;
		case 17000:
			nRefLeftEdgeMax = 1815;
			nRefLeftEdgeMin = 1790;
			break;
		case 17500:
			nRefLeftEdgeMax = 1745;
			nRefLeftEdgeMin = 1725;
			break;
		case 17600:
			nRefLeftEdgeMax = 1727;
			nRefLeftEdgeMin = 1705;
			break;
		case 17800:
			nRefLeftEdgeMax = 1711;
			nRefLeftEdgeMin = 1696;
			break;
		case 18000:
			nRefLeftEdgeMax = 1682;
			nRefLeftEdgeMin = 1665;
			break;
		case 18100:
			nRefLeftEdgeMax = 1660;
			nRefLeftEdgeMin = 1640;
			break;
		case 18290:
			nRefLeftEdgeMax = 1649;
			nRefLeftEdgeMin = 1625;
			break;
		case 18300:
			nRefLeftEdgeMax = 1645;
			nRefLeftEdgeMin = 1620;
			break;
		case 18800:
			nRefLeftEdgeMax = 1580;
			nRefLeftEdgeMin = 1550;
			break;
		case 18900:
			nRefLeftEdgeMax = 1562;
			nRefLeftEdgeMin = 1542;
			break;
		case 18990:
			nRefLeftEdgeMax = 1555;
			nRefLeftEdgeMin = 1525;
			break;
		case 19000:
			nRefLeftEdgeMax = 1541;
			nRefLeftEdgeMin = 1518;
			break;
		case 19200:
			nRefLeftEdgeMax = 1516;
			nRefLeftEdgeMin = 1480;
			break;
		case 19800:
			nRefLeftEdgeMax = 1462;
			nRefLeftEdgeMin = 1435;
			break;
		case 19810:
			nRefLeftEdgeMax = 1437;
			nRefLeftEdgeMin = 1415;
			break;
		case 20000:
			nRefLeftEdgeMax = 1415;
			nRefLeftEdgeMin = 1390;
			break;
		case 20100:
			nRefLeftEdgeMax = 1402;
			nRefLeftEdgeMin = 1377;
			break;
		case 20800:
			nRefLeftEdgeMax = 1332;
			nRefLeftEdgeMin = 1312;
			break;
		case 21000:
			nRefLeftEdgeMax = 1290;
			nRefLeftEdgeMin = 1265;
			break;
		case 21100:
			nRefLeftEdgeMax = 1290;
			nRefLeftEdgeMin = 1260;
			break;
		case 21340:
			nRefLeftEdgeMax = 1275;
			nRefLeftEdgeMin = 1230;
			break;
		case 21350:
			nRefLeftEdgeMax = 1270;
			nRefLeftEdgeMin = 1230;
			break;
		case 21620:
			nRefLeftEdgeMax = 1218;
			nRefLeftEdgeMin = 1198;
			break;
		case 21800:
			nRefLeftEdgeMax = 1221;
			nRefLeftEdgeMin = 1175;
			break;
		case 22000:
			nRefLeftEdgeMax = 1200;
			nRefLeftEdgeMin = 1157;
			break;
		case 22800:
			nRefLeftEdgeMax = 1106;
			nRefLeftEdgeMin = 1089;
			break;
		case 22860:
			nRefLeftEdgeMax = 1098;
			nRefLeftEdgeMin = 1052;
			break;
		case 23100:
			nRefLeftEdgeMax = 1063;
			nRefLeftEdgeMin = 1028;
			break;
		case 23250:
			nRefLeftEdgeMax = 1065;
			break;
		case 23500:
			nRefLeftEdgeMax = 1033;
			nRefLeftEdgeMin = 1014;
			break;
		case 23800:
			nRefLeftEdgeMax = 1000;
			nRefLeftEdgeMin = 985;
			break;
		case 24000:
			nRefLeftEdgeMax = 990;
			break;
		case 24100:
			nRefLeftEdgeMax = 960;
			nRefLeftEdgeMin = 922;
			break;
		case 24380:
			nRefLeftEdgeMax = 947;
			nRefLeftEdgeMin = 895;
			break;
		case 24400:
			nRefLeftEdgeMax = 938;
			nRefLeftEdgeMin = 895;
			break;
		case 25910:
			nRefLeftEdgeMax = 787;
			nRefLeftEdgeMin = 733;
			break;
		case 26000:
			nRefLeftEdgeMax = 785;
			nRefLeftEdgeMin = 770;
			break;
		case 27000:
			nRefLeftEdgeMax = 705;
			nRefLeftEdgeMin = 685;
			break;
		case 27430:
			nRefLeftEdgeMax = 670;
			nRefLeftEdgeMin = 618;
			break;
		case 28000:
			nRefLeftEdgeMax = 620;
			nRefLeftEdgeMin = 605;
			break;
		default:
			break;
		}
	}
	else
	{
		if (nStacker == 2)
		{
			switch (nLenRef)
			{
			case 5000:
				nRefLeftEdgeMax = 1350;
				nRefLeftEdgeMin = 1320;
				break;
			case 6000:
				nRefLeftEdgeMax = 1185;
				nRefLeftEdgeMin = 1153;
				break;
			case 6100:
				nRefLeftEdgeMax = 1170;
				nRefLeftEdgeMin = 1145;
				break;
			case 6500:
				nRefLeftEdgeMax = 1134;
				nRefLeftEdgeMin = 1110;
				break;
			case 6600:
				nRefLeftEdgeMax = 1120;
				nRefLeftEdgeMin = 1102;
				break;
			case 6800:
				nRefLeftEdgeMax = 1078;
				nRefLeftEdgeMin = 1055;
				break;
			case 6900:
				nRefLeftEdgeMax = 1077;
				nRefLeftEdgeMin = 1065;
				break;
			case 7000:
				nRefLeftEdgeMax = 1070;
				nRefLeftEdgeMin = 1050;
				break;
			case 7200:
				nRefLeftEdgeMax = 1073;
				nRefLeftEdgeMin = 1053;
				break;
			case 7500:
				nRefLeftEdgeMax = 1018;
				nRefLeftEdgeMin = 1002;
				break;
			case 7600:
				nRefLeftEdgeMax = 1025;
				nRefLeftEdgeMin = 970;
				break;
			case 7620:
				nRefLeftEdgeMax = 1015;
				break;
			case 7700:
				nRefLeftEdgeMax = 995;
				nRefLeftEdgeMin = 975;
				break;
			case 7800:
				nRefLeftEdgeMax = 990;
				break;
			case 8000:
				nRefLeftEdgeMax = 965;
				nRefLeftEdgeMin = 950;
				break;
			case 8100:
				nRefLeftEdgeMax = 955;
				nRefLeftEdgeMin = 935;
				break;
			case 8200:
				nRefLeftEdgeMax = 947;
				nRefLeftEdgeMin = 930;
				break;
			case 8300:
				nRefLeftEdgeMax = 944;
				nRefLeftEdgeMin = 920;
				break;
			case 8400:
				nRefLeftEdgeMax = 930;
				break;
			case 8500:
				nRefLeftEdgeMax = 912;
				nRefLeftEdgeMin = 880;
				break;
			case 8600:
				nRefLeftEdgeMax = 905;
				nRefLeftEdgeMin = 890;
				break;
			case 8700:
				nRefLeftEdgeMax = 892;
				break;
			case 8800:
				nRefLeftEdgeMax = 885;
				nRefLeftEdgeMin = 863;
				break;
			case 8900:
				nRefLeftEdgeMax = 875;
				nRefLeftEdgeMin = 840;
				break;
			case 9000:
				nRefLeftEdgeMax = 865;
				nRefLeftEdgeMin = 847;
				break;
			case 9100:
				nRefLeftEdgeMax = 865;
				nRefLeftEdgeMin = 852;
				break;
			case 9140:
				nRefLeftEdgeMax = 850;
				nRefLeftEdgeMin = 825;
				break;
			case 9200:
				nRefLeftEdgeMax = 855;
				break;
			case 9300:
				nRefLeftEdgeMax = 840;
				nRefLeftEdgeMin = 803;
				break;
			case 9500:
				nRefLeftEdgeMax = 813;
				nRefLeftEdgeMin = 798;
				break;
			case 9600:
				nRefLeftEdgeMax = 812;
				nRefLeftEdgeMin = 775;
				break;
			case 9700:
				nRefLeftEdgeMax = 798;
				nRefLeftEdgeMin = 775;
				break;
			case 9800:
				nRefLeftEdgeMax = 780;
				break;
			case 9900:
				nRefLeftEdgeMax = 790;
				break;
			case 10000:
				nRefLeftEdgeMax = 775;
				nRefLeftEdgeMin = 755;
				break;
			case 10100:
				nRefLeftEdgeMax = 767;
				nRefLeftEdgeMin = 750;
				break;
			case 10300:
				nRefLeftEdgeMax = 745;
				nRefLeftEdgeMin = 712;
				break;
			case 10500:
				nRefLeftEdgeMax = 720;
				nRefLeftEdgeMin = 700;
				break;
			case 10600:
				nRefLeftEdgeMax = 715;
				nRefLeftEdgeMin = 700;
				break;
			case 10670:
				nRefLeftEdgeMax = 725;
				nRefLeftEdgeMin = 675;
				break;
			case 10700:
				nRefLeftEdgeMax = 713;
				nRefLeftEdgeMin = 693;
				break;
			case 10800:
				nRefLeftEdgeMax = 715;
				break;
			case 11000:
				nRefLeftEdgeMax = 695;
				nRefLeftEdgeMin = 648;
				break;
			case 11100:
				nRefLeftEdgeMax = 690;
				nRefLeftEdgeMin = 675;
				break;
			case 11200:
				nRefLeftEdgeMax = 683;
				nRefLeftEdgeMin = 635;
				break;
			case 11300:
				nRefLeftEdgeMax = 656;
				nRefLeftEdgeMin = 640;
				break;
			case 11400:
				nRefLeftEdgeMax = 655;
				nRefLeftEdgeMin = 635;
				break;
			case 11500:
				nRefLeftEdgeMax = 646;
				nRefLeftEdgeMin = 629;
				break;
			case 11600:
				nRefLeftEdgeMax = 635;
				nRefLeftEdgeMin = 600;
				break;
			case 11700:
				nRefLeftEdgeMax = 647;
				nRefLeftEdgeMin = 628;
				break;
			case 11800:
				nRefLeftEdgeMax = 617;
				nRefLeftEdgeMin = 604;
				break;
			case 11900:
				nRefLeftEdgeMax = 630;
				nRefLeftEdgeMin = 610;
				break;
			case 12000:
				nRefLeftEdgeMax = 607;
				nRefLeftEdgeMin = 592;
				break;
			case 12100:
				nRefLeftEdgeMax = 597;
				nRefLeftEdgeMin = 585;
				break;
			case 12190:
				nRefLeftEdgeMax = 591;
				nRefLeftEdgeMin = 571;
				break;
			case 12200:
				nRefLeftEdgeMax = 587;
				nRefLeftEdgeMin = 565;
				break;
			case 12300:
				nRefLeftEdgeMax = 585;
				nRefLeftEdgeMin = 565;
				break;
			case 12400:
				nRefLeftEdgeMax = 573;
				break;
			case 12500:
				nRefLeftEdgeMax = 560;
				nRefLeftEdgeMin = 543;
				break;
			case 12600:
				nRefLeftEdgeMax = 560;
				break;
			case 12700:
				nRefLeftEdgeMax = 547;
				nRefLeftEdgeMin = 510;
				break;
			case 12800:
				nRefLeftEdgeMax = 545;
				nRefLeftEdgeMin = 508;
				break;
			case 12900:
				nRefLeftEdgeMax = 555;
				nRefLeftEdgeMin = 535;
				break;
			case 13000:
				nRefLeftEdgeMax = 542;
				nRefLeftEdgeMin = 498;
				break;
			case 13100:
				nRefLeftEdgeMax = 540;
				nRefLeftEdgeMin = 510;
				break;
			case 13200:
				nRefLeftEdgeMax = 530;
				break;
			case 13500:
				nRefLeftEdgeMax = 504;
				nRefLeftEdgeMin = 453;
				break;
			case 13600:
				nRefLeftEdgeMax = 495;
				break;
			case 13720:
				nRefLeftEdgeMax = 485;
				nRefLeftEdgeMin = 463;
				break;
			case 13800:
				nRefLeftEdgeMax = 504;
				nRefLeftEdgeMin = 453;
				break;
			case 13900:
				nRefLeftEdgeMax = 487;
				nRefLeftEdgeMin = 467;
				break;
			case 14000:
				nRefLeftEdgeMax = 477;
				nRefLeftEdgeMin = 450;
				break;
			case 14100:
				nRefLeftEdgeMax = 450;
				nRefLeftEdgeMin = 410;
				break;
			case 14200:
				nRefLeftEdgeMax = 450;
				break;
			case 14300:
				nRefLeftEdgeMax = 443;
				break;
			case 14600:
				nRefLeftEdgeMax = 426;
				break;
			case 14700:
				nRefLeftEdgeMax = 420;
				break;
			case 14900:
				nRefLeftEdgeMax = 418;
				nRefLeftEdgeMin = 390;
				break;
			case 15000:
				nRefLeftEdgeMax = 411;
				nRefLeftEdgeMin = 350;
				break;
			case 15100:
				nRefLeftEdgeMax = 385;
				nRefLeftEdgeMin = 370;
				break;
			case 15240:
				nRefLeftEdgeMax = 395;
				nRefLeftEdgeMin = 375;
				break;
			case 15500:
				nRefLeftEdgeMax = 360;
				nRefLeftEdgeMin = 320;
				break;
			case 15600:
				nRefLeftEdgeMax = 360;
				nRefLeftEdgeMin = 320;
				break;
			default:
				break;
			}
		}
		else
		{
			if (nStacker == 3)
			{
				switch (nLenRef)
				{
				case 6000:
					nRefLeftEdgeMax = 2160;
					nRefLeftEdgeMin = 2130;
					break;
				case 6100:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 6500:
					nRefLeftEdgeMax = 2085;
					nRefLeftEdgeMin = 2060;
					break;
				case 7000:
					nRefLeftEdgeMax = 2015;
					nRefLeftEdgeMin = 1990;
					break;
				case 7200:
					nRefLeftEdgeMax = 1985;
					nRefLeftEdgeMin = 1960;
					break;
				case 7500:
					nRefLeftEdgeMax = 1939;
					nRefLeftEdgeMin = 1920;
					break;
				case 7600:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 7700:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 7800:
					nRefLeftEdgeMax = 1768;
					nRefLeftEdgeMin = 1746;
					break;
				case 8000:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 8200:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 8500:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 8600:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 8900:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 9000:
					nRefLeftEdgeMax = 1730;
					nRefLeftEdgeMin = 1705;
					break;
				case 9140:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 9200:
					nRefLeftEdgeMax = 1715;
					nRefLeftEdgeMin = 1670;
					break;
				case 9300:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 9500:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 9600:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 9700:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 9900:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 10000:
					nRefLeftEdgeMax = 1597;
					nRefLeftEdgeMin = 1577;
					break;
				case 10100:
					nRefLeftEdgeMax = 1577;
					nRefLeftEdgeMin = 1557;
					break;
				case 10200:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 10300:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 10500:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 10670:
					nRefLeftEdgeMax = 1489;
					nRefLeftEdgeMin = 1459;
					break;
				case 10700:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 11000:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 11100:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 11200:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 11500:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 11600:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 11800:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 11900:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 12000:
					nRefLeftEdgeMax = 1315;
					nRefLeftEdgeMin = 1278;
					break;
				case 12100:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 12190:
					nRefLeftEdgeMax = 1319;//1285
					nRefLeftEdgeMin = 1300;
					break;
				case 12200:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 12400:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 12500:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 12600:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 12700:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 12800:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 13000:
					nRefLeftEdgeMax = 1220;
					nRefLeftEdgeMin = 1170;
					break;
				case 13100:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 13500:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 13600:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 13720:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 13730:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 13800:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 13900:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 14000:
					nRefLeftEdgeMax = 1090;
					nRefLeftEdgeMin = 1030;
					break;
				case 14100:
					nRefLeftEdgeMax = 1070;
					nRefLeftEdgeMin = 1050;
					break;
				case 14200:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 14300:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 14400:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 14500:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 14600:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 14630:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 14700:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 14800:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 15000:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 15100:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 15200:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 15240:
					nRefLeftEdgeMax = 940;
					nRefLeftEdgeMin = 900;
					break;
				case 15250:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 15400:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 15500:
					nRefLeftEdgeMax = 935;
					nRefLeftEdgeMin = 912;
					break;
				case 16000:
					nRefLeftEdgeMax = 865;
					nRefLeftEdgeMin = 835;
					break;
				case 16100:
					nRefLeftEdgeMax = 852;
					nRefLeftEdgeMin = 835;
					break;
				case 16500:
					nRefLeftEdgeMax = 820;
					nRefLeftEdgeMin = 790;
					break;
				case 16760:
					nRefLeftEdgeMax = 795;
					nRefLeftEdgeMin = 765;
					break;
				case 17000:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 17100:
					nRefLeftEdgeMax = 750;
					nRefLeftEdgeMin = 700;
					break;
				case 17500:
					nRefLeftEdgeMax = 735;
					nRefLeftEdgeMin = 670;
					break;
				case 17600:
					nRefLeftEdgeMax = 2200;
					nRefLeftEdgeMin = 250;
					break;
				case 17800:
					nRefLeftEdgeMax = 711;
					nRefLeftEdgeMin = 687;
					break;
				case 18000:
					nRefLeftEdgeMax = 665;
					nRefLeftEdgeMin = 635;
					break;
				case 18100:
					nRefLeftEdgeMax = 655;
					nRefLeftEdgeMin = 620;
					break;
				case 18290:
					nRefLeftEdgeMax = 640;
					nRefLeftEdgeMin = 600;
					break;
				case 18300:
					nRefLeftEdgeMax = 645;
					nRefLeftEdgeMin = 625;
					break;
				case 18990:
					nRefLeftEdgeMax = 640;
					nRefLeftEdgeMin = 250;
					break;
				case 19000:
					nRefLeftEdgeMax = 640;
					nRefLeftEdgeMin = 250;
					break;
				case 19200:
					nRefLeftEdgeMax = 560;
					nRefLeftEdgeMin = 520;
					break;
				case 19800:
					nRefLeftEdgeMax = 542;
					nRefLeftEdgeMin = 518;
					break;
				case 19810:
					nRefLeftEdgeMax = 495;
					nRefLeftEdgeMin = 465;
					break;
				case 20100:
					nRefLeftEdgeMax = 490;
					nRefLeftEdgeMin = 460;
					break;
				default:
					break;
				}
			}
		}
	}

	if (nRefLeftEdgeMin == 0 && nRefLeftEdgeMax == 0)
	{
		if (nStacker == 1)
		{
			cout << "Stk AB, pixel limits not defined for order len = " << nLenRef << endl;
			vLogger->WriteERRLog("Stk AB, pixel limits not defined for order len = " + to_string(nLenRef), logtype::severity_level::info);
		}
		else
		{
			if (nStacker == 2)
			{
				cout << "Stk CD, pixel limits not defined for order len = " << nLenRef << endl;
				vLogger->WriteERRLog("Stk CD, pixel limits not defined for order len = " + to_string(nLenRef), logtype::severity_level::info);
			}
			else
			{
				if (nStacker == 3)
				{
					cout << "Stk 18, pixel limits not defined for order len = " << nLenRef << endl;
					vLogger->WriteERRLog("Stk 18, pixel limits not defined for order len = " + to_string(nLenRef), logtype::severity_level::info);
				}
			}
		}
	}

	if (nRefLeftEdgeMin > 0)
	{
		if (bReturnMinValue == true)// to return the minimum edge value
		{
			return nRefLeftEdgeMin;
		}
		else
		{
			if (nLeftEdge < nRefLeftEdgeMin)
			{
				bResult = false;
			}
		}
	}

	if (nRefLeftEdgeMax > 0 && bResult == true)
	{
		if (nLeftEdge > nRefLeftEdgeMax)
		{
			bResult = false;
		}
	}


	if (bResult == true)
	{
		return 1;
	}
	else
	{
		if (nStacker == 1)
		{
			cout << "Stk AB, order len = " << nLenRef << " ;left edge = " << nLeftEdge << " is not in the range ( " << nRefLeftEdgeMin << " , " << nRefLeftEdgeMax << " ) .. discard length calculation \n";
			vLogger->WriteCam1Log("Stk AB, order len = " + to_string(nLenRef) + " ;left edge = " + to_string(nLeftEdge) + " is not in the range ( " + to_string(nRefLeftEdgeMin) + " , " + to_string(nRefLeftEdgeMax) + " ) .. discard length calculation", logtype::severity_level::info);
		}
		else
		{
			if (nStacker == 2)
			{
				cout << "Stk CD, order len = " << nLenRef << " ;left edge = " << nLeftEdge << " is not in the range ( " << nRefLeftEdgeMin << " , " << nRefLeftEdgeMax << " ) .. discard length calculation \n";
				vLogger->WriteCam2Log("Stk CD, order len = " + to_string(nLenRef) + " ;left edge = " + to_string(nLeftEdge) + " is not in the range ( " + to_string(nRefLeftEdgeMin) + " , " + to_string(nRefLeftEdgeMax) + " ) .. discard length calculation", logtype::severity_level::info);
			}
			else
			{
				if (nStacker == 3)
				{
					cout << "Stk 18, order len = " << nLenRef << " ;left edge = " << nLeftEdge << " is not in the range ( " << nRefLeftEdgeMin << " , " << nRefLeftEdgeMax << " ) .. discard length calculation \n";
					vLogger->WriteCam3Log("Stk 18, order len = " + to_string(nLenRef) + " ;left edge = " + to_string(nLeftEdge) + " is not in the range ( " + to_string(nRefLeftEdgeMin) + " , " + to_string(nRefLeftEdgeMax) + " ) .. discard length calculation", logtype::severity_level::info);
				}
			}
		}
	}
	return 0;
}

int CameraSource::getDatabasePrintLen(int nPLCcode)
{
	int nResult = 0;
	ocilib::Environment::Initialize();

	ocilib::Connection l2Con("LEVEL2", "ESIRMRT", "ESIRMRT");

	ocilib::Statement st(l2Con);

	try
	{

		st.Execute("Select SALE_LENGTH FROM RML_SALE WHERE SALE_PLC_CODE = " + to_string(nPLCcode));
		ocilib::Resultset rs = st.GetResultset();

		while (rs++)
		{
			nResult = rs.Get<int>(1);
		}
	}
	catch (std::exception &ex)
	{
		cout << ex.what() << std::endl;
	}
	if (l2Con)
	{
		l2Con.Close();
	}

	ocilib::Environment::Cleanup();
	return nResult;
}

void CameraSource::runDBPrintLength()
{
	ocilib::Environment::Initialize();

	ocilib::Connection l2Con("LEVEL2", "ESIRMRT", "ESIRMRT");

	try
	{
		while (true)
		{
			ocilib::Statement st(l2Con);
			//AB
			if (vGloABPlcCode > 0 && (vGloABPlcCode != vGloABPlcCodePrev || vGloABDBLen == 0))//vGloABPlcCode != vGloABPlcCodePrev && vGloABPlcCode > 0
			{
				vGloABDBLen = 0;
				st.Execute("Select SALE_LENGTH FROM RML_SALE WHERE SALE_PLC_CODE = " + to_string(vGloABPlcCode));
				ocilib::Resultset rs = st.GetResultset();

				while (rs++)
				{
					vGloABDBLen = rs.Get<int>(1);
				}
				cout << "Stk-AB Length from DB = " << vGloABDBLen << endl;
			}
			vGloABPlcCodePrev = vGloABPlcCode;
			//CD
			if (vGloCDPlcCode > 0 && (vGloCDPlcCode != vGloCDPlcCodePrev || vGloCDDBLen == 0))//vGloCDPlcCode != vGloCDPlcCodePrev && vGloCDPlcCode > 0
			{
				vGloCDDBLen = 0;
				st.Execute("Select SALE_LENGTH FROM RML_SALE WHERE SALE_PLC_CODE = " + to_string(vGloCDPlcCode));
				ocilib::Resultset rs = st.GetResultset();

				while (rs++)
				{
					vGloCDDBLen = rs.Get<int>(1);
				}
				cout << "Stk-CD Length from DB = " << vGloCDDBLen << endl;
			}
			vGloCDPlcCodePrev = vGloCDPlcCode;
			//18
			if (vGlo18PlcCode > 0 && (vGlo18PlcCode != vGlo18PlcCodePrev || vGlo18DBLen == 0))//vGlo18PlcCode != vGlo18PlcCodePrev && vGlo18PlcCode > 0
			{
				vGlo18DBLen = 0;
				st.Execute("Select SALE_LENGTH FROM RML_SALE WHERE SALE_PLC_CODE = " + to_string(vGlo18PlcCode));
				ocilib::Resultset rs = st.GetResultset();

				while (rs++)
				{
					vGlo18DBLen = rs.Get<int>(1);
				}
				cout << "Stk-18 Length from DB = " << vGlo18DBLen << endl;
			}
			vGlo18PlcCodePrev = vGlo18PlcCode;
		}

	}
	catch (std::exception &ex)
	{
		cout << ex.what() << std::endl;
	}
	ocilib::Environment::Cleanup();

	/*try
	{
		int nDBBufSize = 0;
		DBLenVsPLCLen vTemp;
		while (true)
		{
			vDBAccessBuffer->updateDBLengths();

			nDBBufSize = vDBAccessBuffer->getUpdatedDBLenSize();

			for (int i = 0; i < nDBBufSize; i++)
			{
				vTemp = vDBAccessBuffer->getUpdatedBar();

				if (vTemp.nStacker == 1)
				{
					cout << "Stk AB, PLC Code = " << vTemp.nPLCCode << "; PLC Len = " << vTemp.nPLCLen << "; Sticker Len = " << vTemp.nDBPrintLen << "\n";
					vLogger->WriteCam1Log("Stk AB, PLC Code = = " + to_string(vTemp.nPLCCode) + " ; PLC Len = " + to_string(vTemp.nPLCLen) + "; Sticker Len = " + to_string(vTemp.nDBPrintLen), logtype::severity_level::info);
				}
				else
				{
					cout << "Stk CD, PLC Code = " << vTemp.nPLCCode << "; PLC Len = " << vTemp.nPLCLen << "; Sticker Len = " << vTemp.nDBPrintLen << "\n";
					vLogger->WriteCam1Log("Stk CD, PLC Code = = " + to_string(vTemp.nPLCCode) + " ; PLC Len = " + to_string(vTemp.nPLCLen) + "; Sticker Len = " + to_string(vTemp.nDBPrintLen), logtype::severity_level::info);
				}
			}

			Sleep(1000);
		}
	}
	catch (const std::exception &ex)
	{
		timev = time(0);
		std::cout << ctime(&timev) << " error in compareDBPrintLength." << ex.what() << "\n";
	}
	catch (cv::Exception& e)
	{
		const char* err_msg = e.what();
		std::cout << "\n" << "Opencv Exception caught in compareDBPrintLength :" << err_msg << endl;
	}*/
}

void CameraSource::UpdateABResults(int result)
{
	resultsAB.push_back(result);
	if (resultsAB.size() > 10)
	{
		resultsAB.pop_front();
	}
}

void CameraSource::UpdateCDResults(int result)
{
	resultsCD.push_back(result);
	if (resultsCD.size() > 10)
	{
		resultsCD.pop_front();
	}
}

void CameraSource::Update18Results(int result)
{
	results18.push_back(result);
	if (results18.size() > 10)
	{
		results18.pop_front();
	}
}

bool sortByLastWriteTime(const boost::filesystem::path& path1, const boost::filesystem::path& path2)
{
	return boost::filesystem::last_write_time(path1) > boost::filesystem::last_write_time(path2);
}
void CameraSource::fillSavedResults(int nStkNumber)
{
	char timebuff[100];

	struct customFile {
		string sName;
		time_t lastWriteTime;
	};

	std::string folderPath;// = "path/to/folder"; // Replace with your folder path

	timev = time(0);
	std::strftime(timebuff, 100, "%Y_%m_%d", localtime(&timev));
	if (nStkNumber == 1)
	{
		folderPath.assign("C:\\Level-3\\ImageLib\\AB\\");
		folderPath.append(timebuff);
	}
	else if (nStkNumber == 2)
	{
		folderPath.assign("C:\\Level-3\\ImageLib\\CD\\");
		folderPath.append(timebuff);
	}
	else
	{
		folderPath.assign("C:\\Level-3\\ImageLib\\Stk18\\");
		folderPath.append(timebuff);
	}

	if (!boost::filesystem::exists(folderPath))
	{
		return;
	}
	int count = 0;

	std::vector<customFile> files;

	boost::filesystem::path p(folderPath);
	boost::filesystem::directory_iterator end_itr;

	for (boost::filesystem::directory_iterator itr(p); itr != end_itr; ++itr)
	{
		if (boost::filesystem::is_regular_file(itr->path()))
		{
			customFile temp;
			temp.sName = itr->path().string();
			temp.lastWriteTime = boost::filesystem::last_write_time(itr->path());
			files.push_back(temp);
		}
	}

	for (int i = 0; i < files.size() - 1; i++)
	{
		for (int j = 0; j < files.size() - i - 1; j++)
		{
			if (files[j].lastWriteTime > files[j + 1].lastWriteTime)
			{
				customFile temp = files[j];
				files[j] = files[j + 1];
				files[j + 1] = temp;
			}
		}
	}
	// Sort files based on last write time in descending order
	//std::sort(files.begin(), files.end(), std::greater<boost::filesystem::path>());
	//std::sort(files.begin(), files.end(), sortByLastWriteTime);
	//std::sort(files.rbegin(), files.rend());

	int nStartIndex = std::max(static_cast<int>(files.size()) - 10, 0);
	int nEndIndex = files.size() - 1;

	for (int i = nStartIndex; i <= nEndIndex; i++)
	{

		std::string fileName = files[i].sName;
		int value = 0;

		if (fileName.find("NOREAD") != std::string::npos)
			value = 0;

		else if (fileName.find("WARN") != std::string::npos)
			value = -1;
		else
			value = 1;

		if (nStkNumber == 1)
		{
			UpdateABResults(value);
		}
		else if (nStkNumber == 2)
		{
			UpdateCDResults(value);
		}
		else
		{
			Update18Results(value);
		}

		count++;
	}

	/*std::cout << "Values in the deque:\n";
	for (int value : values) {
		std::cout << value << "\n";
	}*/

	//return 0;
}

void CameraSource::runSaveVideo()
{
	try
	{
		int nBufSize = 0;
		MatAndPLCData vMatFrame;
		MatAndPLCData vCurrFrame;

		Mat vSearchFrame;
		time_t currTime;
		char timebuff[100];

		//namedWindow("SaveVideo", WINDOW_NORMAL);

		VideoWriter writer;
		string output_file = "C:\\VideoRecord\\output.avi";
		int codec = VideoWriter::fourcc('M', 'J', 'P', 'G');
		double fps = 30;
		int save_interval = 300;

		time_t last_sved_time = time(nullptr);
		time_t current_time;
		//Getting first frame
		while (true)
		{
			nBufSize = saveVideo.GetSize();
			if (nBufSize < 1)
			{
				cv::waitKey(1);
				continue;
			}

			vMatFrame = saveVideo.deleteFrame();
			break;
		}

		Size frame_size(vMatFrame.vMat.cols, vMatFrame.vMat.rows);

		while (true)
		{
			nBufSize = saveVideo.GetSize();

			//cout << "SaveVide Buffer Size = " << nBufSize << endl;

			if (nBufSize <= 1)
			{
				cv::waitKey(1);
				continue;
			}

			vMatFrame = saveVideo.deleteFrame();
			if (vMatFrame.vMat.empty())
			{
				continue;
			}

			vSearchFrame = vMatFrame.vMat.clone();

			vCurrFrame.nABPrintStart = vMatFrame.nABPrintStart;
			vCurrFrame.nABPrintLength = vMatFrame.nABPrintLength;
			vCurrFrame.nABPLCCode = vMatFrame.nABPLCCode;

			vCurrFrame.nCDPrintStart = vMatFrame.nCDPrintStart;
			vCurrFrame.nCDPrintLength = vMatFrame.nCDPrintLength;
			vCurrFrame.nCDPLCCode = vMatFrame.nCDPLCCode;
			vCurrFrame.eventTime = vMatFrame.eventTime;

			cv::rectangle(vSearchFrame, cv::Point(5, vSearchFrame.rows - 20), cv::Point(vSearchFrame.cols - 5, vSearchFrame.rows), Scalar(30, 30, 30), cv::FILLED);

			cv::putText(vSearchFrame, "Scan = " + to_string(vCurrFrame.nCDPrintStart), cv::Point(50, vSearchFrame.rows - 5), FONT_HERSHEY_COMPLEX, 0.75, Scalar(0, 255, 0), 2, LINE_AA);
			cv::putText(vSearchFrame, "Code = " + to_string(vCurrFrame.nCDPLCCode), cv::Point(300, vSearchFrame.rows - 5), FONT_HERSHEY_COMPLEX, 0.75, Scalar(0, 255, 0), 2, LINE_AA);
			cv::putText(vSearchFrame, "Len = " + to_string(vCurrFrame.nCDPrintLength), cv::Point(650, vSearchFrame.rows - 5), FONT_HERSHEY_COMPLEX, 0.75, Scalar(0, 255, 0), 2, LINE_AA);

			cv::putText(vSearchFrame, "Scan = " + to_string(vCurrFrame.nABPrintStart), cv::Point(vSearchFrame.cols - 1800, vSearchFrame.rows - 5), FONT_HERSHEY_COMPLEX, 0.75, Scalar(0, 255, 0), 2, LINE_AA);
			cv::putText(vSearchFrame, "Code = " + to_string(vCurrFrame.nABPLCCode), cv::Point(vSearchFrame.cols - 1550, vSearchFrame.rows - 5), FONT_HERSHEY_COMPLEX, 0.75, Scalar(0, 255, 0), 2, LINE_AA);
			cv::putText(vSearchFrame, "Len = " + to_string(vCurrFrame.nABPrintLength), cv::Point(vSearchFrame.cols - 1200, vSearchFrame.rows - 5), FONT_HERSHEY_COMPLEX, 0.75, Scalar(0, 255, 0), 2, LINE_AA);

			//timev = time(0);
			currTime = vCurrFrame.eventTime;
			std::strftime(timebuff, 100, "%d-%m-%y %H:%M:%S", localtime(&currTime));
			cv::putText(vSearchFrame, timebuff, cv::Point(1100, vSearchFrame.rows - 5), FONT_HERSHEY_COMPLEX, 0.75, Scalar(0, 255, 0), 2, LINE_AA);

			current_time = time(nullptr);
			if (current_time - last_sved_time >= save_interval)
			{
				if (writer.isOpened())
				{
					writer.release();
				}

				string new_output_file = "C:\\VideoRecord\\output_" + to_string(current_time) + ".avi";
				writer.open(new_output_file, codec, fps, frame_size, true);
				last_sved_time = current_time;
			}

			if (!writer.isOpened())
			{
				writer.open(output_file, codec, fps, frame_size, true);
			}
			writer.write(vSearchFrame);

			//imshow("SaveVideo", vSearchFrame);
		}

		writer.release();
	}
	catch (const cv::Exception &e)
	{
		timev = time(0);
		//const char* err_msg = e.what();
		std::cout << ctime(&timev) << " error in runSaveVideo." << e.what() << "\n";
	}
	catch (const std::exception &ex)
	{
		timev = time(0);
		std::cout << ctime(&timev) << " error in runSaveVideo." << ex.what() << "\n";
	}
}

void CameraSource::onMouse(int event, int x, int y, int, void *)
{
	if (event == EVENT_LBUTTONDBLCLK)
	{
		std::cout << "x = " << x << " " << y << "\n";

		if (y >= 2850 && y <= 2900)
		{
			if (x >= 185 && x <= 285)
			{
				if (iStkABWriteToPLC == 1)
				{
					iStkABWriteToPLC = 0;
				}
				else
				{
					iStkABWriteToPLC = 1;
				}
			}
			else
			{
				if (x >= 485 && x <= 585)
				{
					if (iStkCDWriteToPLC == 1)
					{
						iStkCDWriteToPLC = 0;
					}
					else
					{
						iStkCDWriteToPLC = 1;
					}
				}
				else
				{
					if (x >= 785 && x <= 885)
					{
						if (iStk18WriteToPLC == 1)
						{
							iStk18WriteToPLC = 0;
						}
						else
						{
							iStk18WriteToPLC = 1;
						}
					}
				}
			}
		}
	}
}

void CameraSource::displayCudaMat(cuda::GpuMat src, string sWindowName)
{
	Mat vMat;
	src.download(vMat);

	cv::namedWindow(sWindowName, WINDOW_NORMAL);
	cv::imshow(sWindowName, vMat);
	cv::waitKey(1);

}

void CameraSource::displayResult()
{
	try
	{
		Mat vTempOutput;
		Mat vResized;
		MatForDisplay vFinalFrame1;
		int nAlt = 0;
		Point pt1, pt2;
		int nEmptyProcessCount = 0;
		int nDisplayButtons = 1;
		int nCurrPos = 0;
		int nPosX = 0;
		int nRes = 0;

#pragma region GettingFirstFrame
		while (vTempOutput.cols == 0)
		{
			while (1)
			{
				if (vDisplayBuffer->GetSize() <= 0)
				{
					cv::waitKey(1);
					continue;
				}

				vFinalFrame1 = vDisplayBuffer->deleteFrame();
				if (!vFinalFrame1.vDisplayAD.empty())
				{
					nEmptyProcessCount = 0;
					break;
				}
				cv::waitKey(1);
				nEmptyProcessCount++;

				if (nEmptyProcessCount > 200)
				{
					break;
				}
			}

			if (nEmptyProcessCount == 0)
			{
				vFinalFrame1.vDisplayAD.copyTo(vTempOutput);
			}


			if (vTempOutput.cols > 0)
			{
				break;
			}
		}
#pragma endregion GettingFirstFrame

		Mat vMatOutput(3000, vTempOutput.cols, vTempOutput.type());
		vMatOutput = Scalar(5);
		while (true)
		{
			if (vDisplayBuffer->GetSize() <= 0)
			{
				cv::waitKey(1);
				continue;
			}

			//cout << "Display Buffer = " << vDisplayBuffer->GetSize();

			vFinalFrame1 = vDisplayBuffer->deleteFrame();

			/*if (nOutputDefined == 0)
			{
				//vSavingFrame1 = imread("C:\\Level-3\\ImageLib\\AB\\2021_06_24\\AB_20210624131252_4441496_12000_13749_WARN.jpg");
				//vSavingFrame2 = imread("C:\\Level-3\\ImageLib\\CD\\2021_06_24\\CD_20210624123336_4441402_15240_14777_WARN.jpg");
				//nRefreshWarnImages = 1;

				vMatOutput = vFinalFrame1.vDisplayAD.clone();
				vMatOutput = Scalar(5);
				nOutputDefined = 1;
			}*/

			if (vFinalFrame1.nRefresh == 1)
			{
				//vMatOutput = Scalar(5);
				nDisplayButtons = 1;
			}

			nCurrPos = 25;
			if (vFinalFrame1.nIsStk18 == 0)
			{
				if (CAM1_DISPLAY_RULER == 1)// & 1 == 2
				{
					nAlt = 0;
					for (int i = 0; i < nADPointCount; i = i + 2)
					{
						pt1 = lst30Point1[i];


						pt2 = lst30Point2[i];


						line(vFinalFrame1.vDisplayAD, pt1, pt2, Scalar(0, 255, 0), 2, 8);

						if (nAlt == 0)
						{
							cv::putText(vFinalFrame1.vDisplayAD, lst30Lengths[i], cv::Point(pt1.x, pt1.y + 20), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 255, 0), 2, LINE_AA);
							nAlt = 1;
						}
						else
						{
							cv::putText(vFinalFrame1.vDisplayAD, lst30Lengths[i], cv::Point(pt2.x, pt2.y - 20), FONT_HERSHEY_COMPLEX, 1, Scalar(0, 255, 0), 2, LINE_AA);
							nAlt = 0;
						}

					}
				}

				//cout << "nCurrPos1 = " << nCurrPos << endl;

				cv::putText(vMatOutput, "Stacker ABCD", cv::Point(10, nCurrPos), FONT_HERSHEY_COMPLEX, 1, Scalar(255, 255, 255), 2, LINE_AA);
				nCurrPos = nCurrPos + 15;

				vFinalFrame1.vDisplayAD(Rect(0, CAM1_DISPLAYTOP, vFinalFrame1.vDisplayAD.cols, CAM1_DISPLAY_HEIGHT)).copyTo(vMatOutput(Rect(0, nCurrPos, vFinalFrame1.vDisplayAD.cols, CAM1_DISPLAY_HEIGHT)));
				nCurrPos = nCurrPos + CAM1_DISPLAY_HEIGHT + 50;


				cv::putText(vMatOutput, "Stacker ABCD - Search Area", cv::Point(10, nCurrPos), FONT_HERSHEY_COMPLEX, 1, Scalar(255, 255, 255), 2, LINE_AA);
				nCurrPos = nCurrPos + 15;

				//vResized = vSearchFrame.clone();
				cv::resize(vFinalFrame1.vSearchFrameAD, vResized, cv::Size(), 1, 2);
				vResized(Rect(0, 0, vResized.cols, vResized.rows)).copyTo(vMatOutput(Rect(0, nCurrPos, vResized.cols, vResized.rows)));
				nCurrPos = nCurrPos + vResized.rows + 50;// CAM1_DISPLAY_HEIGHT + 100 + vResized.rows;//+ 50

				if (iDisplayCam2 == 0)
				{
					if (!vFinalFrame1.vWarnAB.empty())
					{
						cv::putText(vMatOutput, "Warning - AB", cv::Point(10, nCurrPos), FONT_HERSHEY_COMPLEX, 1, Scalar(255, 255, 255), 2, LINE_AA);
						nCurrPos = nCurrPos + 15;

						vFinalFrame1.vWarnAB(Rect(0, 0, vFinalFrame1.vWarnAB.cols, vFinalFrame1.vWarnAB.rows)).copyTo(vMatOutput(Rect(0, nCurrPos, vFinalFrame1.vWarnAB.cols, vFinalFrame1.vWarnAB.rows)));
						nCurrPos = nCurrPos + vFinalFrame1.vWarnAB.rows + 50;
					}

					if (!vFinalFrame1.vWarnCD.empty())
					{
						cv::putText(vMatOutput, "Warning - CD", cv::Point(10, nCurrPos), FONT_HERSHEY_COMPLEX, 1, Scalar(255, 255, 255), 2, LINE_AA);

						vFinalFrame1.vWarnCD(Rect(0, 0, vFinalFrame1.vWarnCD.cols, vFinalFrame1.vWarnCD.rows)).copyTo(vMatOutput(Rect(0, nCurrPos + 100, vFinalFrame1.vWarnCD.cols, vFinalFrame1.vWarnCD.rows)));
						nCurrPos = nCurrPos + vFinalFrame1.vWarnCD.rows + 50;
					}
				}
			}
			else
			{
				//cout << "nCurrPos2 = " << nCurrPos << endl;
				if (iDisplayCam1 == 1)//&& nCurrPos == 0
				{
					nCurrPos = 1400;
				}

				//nCurrPos = nCurrPos + 200;
				cv::putText(vMatOutput, "Stacker 18", cv::Point(10, nCurrPos), FONT_HERSHEY_COMPLEX, 1, Scalar(255, 255, 255), 2, LINE_AA);
				nCurrPos = nCurrPos + 15;

				vFinalFrame1.vDisplayAD(Rect(0, CAM1_DISPLAYTOP, vFinalFrame1.vDisplayAD.cols, CAM1_DISPLAY_HEIGHT)).copyTo(vMatOutput(Rect(0, nCurrPos, vFinalFrame1.vDisplayAD.cols, CAM1_DISPLAY_HEIGHT)));
				nCurrPos = nCurrPos + CAM1_DISPLAY_HEIGHT + 50;


				cv::putText(vMatOutput, "Stacker 18 - Search Area", cv::Point(10, nCurrPos), FONT_HERSHEY_COMPLEX, 1, Scalar(255, 255, 255), 2, LINE_AA);
				nCurrPos = nCurrPos + 15;

				//vResized = vSearchFrame.clone();
				cv::resize(vFinalFrame1.vSearchFrameAD, vResized, cv::Size(), 1, 2);
				vResized(Rect(0, 0, vResized.cols, vResized.rows)).copyTo(vMatOutput(Rect(0, nCurrPos, vResized.cols, vResized.rows)));
				nCurrPos = nCurrPos + vResized.rows + 50;// CAM1_DISPLAY_HEIGHT + 100 + vResized.rows;//+ 50

				if (iDisplayCam1 == 0)
				{
					if (!vFinalFrame1.vWarnAB.empty())
					{
						cv::putText(vMatOutput, "Warning - 18", cv::Point(10, nCurrPos), FONT_HERSHEY_COMPLEX, 1, Scalar(255, 255, 255), 2, LINE_AA);
						nCurrPos = nCurrPos + 15;

						vFinalFrame1.vWarnAB(Rect(0, 0, vFinalFrame1.vWarnAB.cols, vFinalFrame1.vWarnAB.rows)).copyTo(vMatOutput(Rect(0, nCurrPos, vFinalFrame1.vWarnAB.cols, vFinalFrame1.vWarnAB.rows)));
						nCurrPos = nCurrPos + vFinalFrame1.vWarnAB.rows + 50;
					}
				}
			}

			if (iStkABWriteToPLC != STKAB_WRITE_TO_PLC)
			{
				cout << "Stk AB, Writeto PLC value updated from = " << STKAB_WRITE_TO_PLC << " to = " << iStkABWriteToPLC << endl;
				vLogger->WriteCam1Log("Stk AB, Writeto PLC value updated from = " + to_string(STKAB_WRITE_TO_PLC) + " to = " + to_string(iStkABWriteToPLC), logtype::severity_level::info);

				STKAB_WRITE_TO_PLC = iStkABWriteToPLC;
				nDisplayButtons = 1;
			}
			else
			{
				if (iStkCDWriteToPLC != STKCD_WRITE_TO_PLC)
				{
					cout << "Stk CD, Writeto PLC value updated from = " << STKCD_WRITE_TO_PLC << " to = " << iStkCDWriteToPLC << endl;
					vLogger->WriteCam2Log("Stk AB, Writeto PLC value updated from = " + to_string(STKCD_WRITE_TO_PLC) + " to = " + to_string(iStkCDWriteToPLC), logtype::severity_level::info);

					STKCD_WRITE_TO_PLC = iStkCDWriteToPLC;
					nDisplayButtons = 1;
				}
				else
				{
					if (iStk18WriteToPLC != STK18_WRITE_TO_PLC)
					{
						cout << "Stk 18, Writeto PLC value updated from = " << STK18_WRITE_TO_PLC << " to = " << iStk18WriteToPLC << endl;
						vLogger->WriteCam3Log("Stk 18, Writeto PLC value updated from = " + to_string(STK18_WRITE_TO_PLC) + " to = " + to_string(iStk18WriteToPLC), logtype::severity_level::info);

						STK18_WRITE_TO_PLC = iStk18WriteToPLC;
						nDisplayButtons = 1;
					}
				}
			}

			if (nDisplayButtons == 1 && vMatOutput.rows > 0)
			{
				Mat buttonsFrame(nButtonFrameHt, nButtonFrameWidth, CV_8UC3, Scalar(30, 30, 30));

				cv::putText(buttonsFrame, "Write To PLC Status :", cv::Point(10, 70), FONT_HERSHEY_SIMPLEX, 1, Scalar(255, 255, 255), 2, LINE_AA);


				cv::putText(buttonsFrame, " Stk AB :", cv::Point(10, 150), FONT_HERSHEY_SIMPLEX, 1, Scalar(255, 255, 255), 2, LINE_AA);
				cv::putText(buttonsFrame, " Stk CD :", cv::Point(310, 150), FONT_HERSHEY_SIMPLEX, 1, Scalar(255, 255, 255), 2, LINE_AA);
				cv::putText(buttonsFrame, " Stk 18 :", cv::Point(610, 150), FONT_HERSHEY_SIMPLEX, 1, Scalar(255, 255, 255), 2, LINE_AA);

				if (STKAB_WRITE_TO_PLC == 1)
				{
					cv::rectangle(buttonsFrame, cv::Point(175, 100), cv::Point(275, 150), Scalar(0, 255, 0), cv::FILLED);
				}
				else
				{
					cv::rectangle(buttonsFrame, cv::Point(175, 100), cv::Point(275, 150), Scalar(0, 0, 255), cv::FILLED);
				}

				if (STKCD_WRITE_TO_PLC == 1)
				{
					cv::rectangle(buttonsFrame, cv::Point(475, 100), cv::Point(575, 150), Scalar(0, 255, 0), cv::FILLED);
				}
				else
				{
					cv::rectangle(buttonsFrame, cv::Point(475, 100), cv::Point(575, 150), Scalar(0, 0, 255), cv::FILLED);
				}

				if (STK18_WRITE_TO_PLC == 1)
				{
					cv::rectangle(buttonsFrame, cv::Point(775, 100), cv::Point(875, 150), Scalar(0, 255, 0), cv::FILLED);
				}
				else
				{
					cv::rectangle(buttonsFrame, cv::Point(775, 100), cv::Point(875, 150), Scalar(0, 0, 255), cv::FILLED);
				}


				buttonsFrame.copyTo(vMatOutput(Rect(10, vMatOutput.rows - nButtonFrameHt - 5, nButtonFrameWidth, nButtonFrameHt)));
			}

			if ((vFinalFrame1.nRefresh == 1 || nDisplayButtons == 1) && vMatOutput.rows > 0)
			{
				Mat resultsFrame(250, 2000, CV_8UC3, Scalar(30, 30, 30));

				cv::putText(resultsFrame, "Last 10 results : ", cv::Point(10, 50), FONT_HERSHEY_COMPLEX, 1, Scalar(255, 255, 255), 2, LINE_AA);
				cv::putText(resultsFrame, "AB ", cv::Point(10, 100), FONT_HERSHEY_COMPLEX, 1, Scalar(255, 255, 255), 2, LINE_AA);
				cv::putText(resultsFrame, "CD ", cv::Point(10, 150), FONT_HERSHEY_COMPLEX, 1, Scalar(255, 255, 255), 2, LINE_AA);
				cv::putText(resultsFrame, "18 ", cv::Point(10, 200), FONT_HERSHEY_COMPLEX, 1, Scalar(255, 255, 255), 2, LINE_AA);
				nPosX = 400;

				for (int i = 1; i <= 10; i++)
				{
					cv::putText(resultsFrame, std::to_string(10 + 1 - i), cv::Point(nPosX, 50), FONT_HERSHEY_COMPLEX, 1, Scalar(255, 255, 255), 1, LINE_AA);

					nRes = resultsAB[i - 1];
					Scalar colorAB;
					if (nRes == 0)
					{
						colorAB = Scalar(255, 255, 0);
					}
					else if (nRes == 1)
					{
						colorAB = Scalar(0, 255, 0);
					}
					else
					{
						colorAB = Scalar(0, 0, 255);
					}
					cv::circle(resultsFrame, cv::Point(nPosX, 100), 20, colorAB, -1);


					nRes = resultsCD[i - 1];
					Scalar colorCD;
					if (nRes == 0)
					{
						colorCD = Scalar(255, 255, 0);
					}
					else if (nRes == 1)
					{
						colorCD = Scalar(0, 255, 0);
					}
					else
					{
						colorCD = Scalar(0, 0, 255);
					}
					cv::circle(resultsFrame, cv::Point(nPosX, 150), 20, colorCD, -1);

					nRes = results18[i - 1];
					Scalar color18;
					if (nRes == 0)
					{
						color18 = Scalar(255, 255, 0);
					}
					else if (nRes == 1)
					{
						color18 = Scalar(0, 255, 0);
					}
					else
					{
						color18 = Scalar(0, 0, 255);
					}
					cv::circle(resultsFrame, cv::Point(nPosX, 200), 20, color18, -1);

					nPosX = nPosX + 125;
				}

				resultsFrame.copyTo(vMatOutput(Rect(1100, vMatOutput.rows - resultsFrame.rows, resultsFrame.cols, resultsFrame.rows)));
			}

			nDisplayButtons = 0;
			cv::setMouseCallback("output", onMouse, 0);

			cv::namedWindow("output", WINDOW_NORMAL);
			cv::imshow("output", vMatOutput);
			cv::waitKey(1);
		}
	}
	catch (const std::exception &ex)
	{
		timev = time(0);
		std::cout << ctime(&timev) << " error in displayResult." << ex.what() << "\n";
	}
	catch (cv::Exception& e)
	{
		const char* err_msg = e.what();
		std::cout << "\n" << "Opencv Exception caught in displayResult :" << err_msg << endl;
	}
}

void CameraSource::runThreads()
{
	try
	{
		thread* plcRead_thread = nullptr;
		thread* producer_thread = nullptr;
		thread* consumer_thread = nullptr;
		thread* display_thread = nullptr;

		thread* producer2_thread = nullptr;
		thread* consumer2_thread = nullptr;
		thread* db_thread = nullptr;
		//thread* saveVideo_thread = nullptr;


		producer_thread = new thread(&CameraSource::runProducer1, this);
		cv::waitKey(1);
		consumer_thread = new thread(&CameraSource::runConsumer1, this);
		cv::waitKey(1);

		producer2_thread = new thread(&CameraSource::runProducer2, this);
		cv::waitKey(1);
		consumer2_thread = new thread(&CameraSource::runConsumer2, this);
		cv::waitKey(1);

		display_thread = new thread(&CameraSource::displayResult, this);
		cv::waitKey(1);

		db_thread = new thread(&CameraSource::runDBPrintLength, this);
		cv::waitKey(1);

		plcRead_thread = new thread(&CameraSource::readPlcData, this);
		cv::waitKey(1);

		//saveVideo_thread = new thread(&CameraSource::runSaveVideo, this);
		//cv::waitKey(1);

		plcRead_thread->join();
		//	consumer_thread->join();
		cv::waitKey(1);
	}
	catch (const std::exception&)
	{

	}

}

void CameraSource::runSingleCamThread()
{
	try
	{


		thread* plcRead_thread = nullptr;
		thread* producer_thread = nullptr;
		thread* consumer_thread = nullptr;
		thread* display_thread = nullptr;

		thread* producer2_thread = nullptr;
		thread* consumer2_thread = nullptr;
		thread* db_thread = nullptr;

		if (iDisplayCam1 == 1)
		{
			producer_thread = new thread(&CameraSource::runProducer1, this);
			cv::waitKey(1);
			consumer_thread = new thread(&CameraSource::runConsumer1, this);
			cv::waitKey(1);
		}
		else
		{
			if (iDisplayCam1 == 1)
			{
				producer_thread = new thread(&CameraSource::runProducer2, this);
				cv::waitKey(1);
				consumer_thread = new thread(&CameraSource::runConsumer2, this);
				cv::waitKey(1);
			}
		}
		producer2_thread = new thread(&CameraSource::runProducer2, this);
		cv::waitKey(1);
		consumer2_thread = new thread(&CameraSource::runConsumer2, this);
		cv::waitKey(1);

		display_thread = new thread(&CameraSource::displayResult, this);
		cv::waitKey(1);

		db_thread = new thread(&CameraSource::runDBPrintLength, this);
		cv::waitKey(1);

		plcRead_thread = new thread(&CameraSource::readPlcData, this);
		cv::waitKey(1);

		plcRead_thread->join();
		//	consumer_thread->join();
		cv::waitKey(1);
	}
	catch (const std::exception&)
	{

	}
}
